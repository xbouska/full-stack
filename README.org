#+BEGIN_COMMENT
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-bigblow.setup
#+END_COMMENT
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+BEGIN_COMMENT
#+OPTIONS: html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-style.css" />
#+END_COMMENT
#+OPTIONS: d:t  prop:t tags:t |:t
#+OPTIONS: H:7 num:4 toc:t ^:nil p:nil html-style:nil pri:t
#+EXCLUDE_TAGS: no_export
#+EXPORT_FILE_NAME: public/fullstack.html
#+STARTUP:  overview entitiespretty
#+TODO:  TODO WIP | COMPETE OBSOLETE
#+CREATOR: org-mode
#+LANGUAGE: en
#+TITLE: full-stack
#+AUTHOR: Richard Bouska


#+BEGIN_SRC emacs-lisp :exports none :results verbatim
(org-html-export-to-html nil t nil nil)
 #+END_SRC
#+BEGIN_CENTER
*What is considered a full-stack - Richard's point of view*
 #+END_CENTER
* WIP Software Engineering                                           :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: SOFTWARE_ENGINEERING
:END:
** bit / byte / endian / float
*** XOR, OR, AND, Shift (logical vs aritmetic)
*** one`s complement
*** two`s complements
*** ieee754 explain float: mantisa,exponent
*** Endian
** TCP/IP
*** IP address / netmask
*** CIDR
** I18N
*** iso-639
*** bcp-47 / rfc-5646
** Unicode
*** What is unicode
:PROPERTIES:
:lerning:  http://www.unicode.org/standard/WhatIsUnicode.html
:END:
- The Unicode Standard provides a unique number for every character, no matter what platform, device, application or language. It has been adopted by all modern software providers and now allows data to be transported through many different platforms, devices and applications without corruption. Support of Unicode forms the foundation for the representation of languages and symbols in all major operating systems, search engines, browsers, laptops, and smart phonesplus the Internet and World Wide Web (URLs, HTML, XML, CSS, JSON, etc.). Supporting Unicode is the best way to implement ISO/IEC 10646.
- The emergence of the Unicode Standard and the availability of tools supporting it are among the most significant recent global software technology trends.
*** utf-8
*** ASCII
*** EBCDIC
** Formats
*** yaml
:PROPERTIES:
:learning: https://rollout.io/blog/yaml-tutorial-everything-you-need-get-started/
:END:
*** json
*** xml
** declarative vs imperative
** [#B] Code complexity 
*** Code complexity (big O)
*** Amortized complexity
** TCP/IP
*** IP address / netmask
*** CIDR
** basic data structures
*** tree
*** list
*** hash
** basic algorithms
*** Stable vs unstable sorting

* WIP Architecture                                                   :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: ARCHITECTURE
:END:
basic of architecture 
** WIP DDD                                                           :TOPIC:
*** bounded context                                               :TOPIC:
*** ubiquotous language                                           :TOPIC:
*** Entity and Value Object                                       :TOPIC:
** WIP Messaging                                                     :TOPIC:
*** queue
*** topics
*** message delivery mode: 
- at least once
- at most once
- exactly once
*** tools
**** TODO Solace Pub/Sub Plus
**** TODO Google PubSub
**** TODO AWS SNS
**** TODO AWS SES
**** TODO AWS SQS
**** TODO AWS Kinesis
**** TODO RabbbitMQ
**** TODO Kafka

*** protocols
**** TODO amqp(s)
**** TODO mqtt(s)
**** TODO http(s)
** WIP HTTP Family                                                   :TOPIC:
*** HTTP
**** What is the use of Accept and Content-Type Headers in HTTP Request? :QUESTION:
:ANSWER:
- Accept headers:
  - tells web service what kind of response client is accepting, so if a web service is capable of sending response in XML and JSON format and client sends Accept header as application/xml then XML response will be sent. For Accept header application/json, server will send the JSON response.
- Content-Type header:
  - is used to tell server what is the format of data being sent in the request. If Content-Type header is application/xml then server will try to parse it as XML data. This header is useful in HTTP Post and Put requests.
:END:
**** WIP What is Server-Sent Events  (SSE)                      :QUESTION:
:ANSWER:
- is a standard describing how servers can initiate data transmission towards clients once an initial client connection has been established.
- They are commonly used to send message updates or continuous data streams to a browser client
  - designed to enhance native, cross-browser streaming through a JavaScript API called EventSource,
    - through which a client requests a particular URL in order to receive an event stream.
:END:
**** WIP What are WebSockets                                    :QUESTION:
** WIP REST
*** What are the HTTP methods supported by REST?                 :QUESTION:
:ANSWER:
HTTP methods supported by REST are:

| GET     | It requests a resource at the request URL. It should not contain a request body as it will be discarded. Maybe it can be cached locally or on the server. |
| POST    | It submits information to the service for processing; it should typically return the modified or new resource                                             |
| PUT     | At the request URL it update the resource                                                                                                                 |
| DELETE  | At the request URL it removes the resource                                                                                                                |
| OPTIONS | It indicates which techniques are supported                                                                                                               |
| HEAD    | About the request URL it returns meta information                                                                                                         |
:END:

*** What is the purpose of HTTP Status Code?                     :QUESTION:
:ANSWER:
HTTP Status code are standard codes and refers to predefined status of task done at server. For example, HTTP Status 404 states that requested resource is not present on server.

Consider following status codes:
|-----+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
| 200 | OK                    | shows success.                                                                                                                                     |
| 201 | CREATED               | when a resource is successful created using POST or PUT request. Return link to newly created resource using location header.                      |
| 304 | NOT MODIFIED          | used to reduce network bandwidth usage in case of conditional GET requests. Response body should be empty. Headers should have date, location etc. |
| 400 | BAD REQUEST           | states that invalid input is provided e.g. validation error, missing data.                                                                         |
| 401 | FORBIDDEN             | states that user is not having access to method being used for example, delete access without admin rights.                                        |
| 404 | NOT FOUND             | states that method is not available.                                                                                                               |
| 409 | CONFLICT              | states conflict situation while executing the method for example, adding duplicate entry.                                                          |
| 500 | INTERNAL SERVER ERROR | states that server has thrown some exception while executing the method.                                                                           |
|-----+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
:END:
*** What is statelessness in RESTful Webservices?                :QUESTION:
:ANSWER:
- As per REST architecture, a RESTful web service should not keep a client state on server.
- This restriction is called statelessness.
- It is responsibility of the client to pass its context to server and then server can store this context to process client's further request.
- For example, session maintained by server is identified by session identifier passed by the client.
:END:
*** What is the difference between PUT and POST?                 :QUESTION:

:ANSWER:
- PUT puts a file or resource at a particular URI and exactly at that URI. If there is already a file or resource at that URI, PUT changes that file or resource. If there is no resource or file there, PUT makes one
- POST sends data to a particular URI and expects the resource at that URI to deal with the request. The web server at this point can decide what to do with the data in the context of specified resource
- PUT is idempotent meaning, invoking it any number of times will not have an impact on resources.
- However, POST is not idempotent, meaning if you invoke POST multiple times it keeps creating more resources
:END:
*** TODO HATEOAS
** TODO GraphQL
** TODO 12 Factor Apps
** TODO 3Factor Apps
** WIP OpenApiSpec / Open API 3.0 / Swagger 
:PROPERTIES:
:learning: https://app.swaggerhub.com/help/tutorials/openapi-3-tutorial
:END:
*** What Is OpenAPI?
:ANSWER:
- OpenAPI Specification (formerly known as Swagger Specification) is an open-source format for describing and documenting APIs. The Specification was originally developed in 2010 by Reverb Technologies (formerly Wordnik) as a way to keep the API design and documentation in sync. It has since become a de-facto standard for designing and describing RESTful APIs, and is used by millions of developers and organizations for developing their APIs, be it internal or client facing.

- The latest version of OpenAPI is 3.0. OpenAPI definitions can be written in JSON or YAML. We recommend YAML, because it is easier to read and write.

- A simple OpenAPI 3.0 specification looks like this:
#+begin_src yaml
  openapi: 3.0.0
  info:
    version: 1.0.0
    title: Sample API
    description: A sample API to illustrate OpenAPI concepts
  paths:
    /list:
      get:
        description: Returns a list of stuff              
        responses:
          '200':
            description: Successful response
#+end_src
:END:

** WIP micro-service-architecture
** WIP Enterprise Architecture Integration Patterns
*** orchestration
*** choreography
** TODO Event Sourcing
** TODO CQRS
** TODO CRUD
** WIP Pragmatic Design principes
*** DRY                                                           :TOPIC:
*** KISS                                                          :TOPIC:
*** YAGNI                                                         :TOPIC:
*** SOLID
*** open-close principal                                          :TOPIC:
*** High cohesion                                                 :TOPIC:
*** Low coupling                                                  :TOPIC:
**** What is temporal coupling?                                 :QUESTION:
** TODO Antifragile architecture
** WIP Evolutionary database design
:PROPERTIES:
:lerning:  https://martinfowler.com/articles/evodb.html
:END:

* WIP Data                                                           :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: DATA
:END:
** WIP background                                                    :TOPIC:
*** What does ACID mean?                                      :QUESTION:
:ANSWER:
- atomicity
- consistency
- isolation
- durability
:END:
*** WIP BASE
**** what does it mean?                                         :QUESTION:
:ANSWER:
- Basic Availability
- Soft-state
- Eventual consistency
:END:
*** ORM
**** What ORM (object-relational-mapping ) means                :QUESTION:
**** What is object relation impedance mismatch                 :QUESTION:
:PROPERTIES:
:learning: https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch
:END:
:ANSWER:
- The object-relational impedance mismatch is a set of conceptual and technical difficulties that are often encountered when a relational database management system (RDBMS) is being served by an application program (or multiple application programs) written in an object-oriented programming language or style.
- particularly because objects or class definitions must be mapped to database tables defined by a relational schema.
:END:
**** bottom up                                                  :QUESTION:
**** tom down                                                   :QUESTION:
**** meet in the middle                                         :QUESTION:
*** CAP theorem
:PROPERTIES:
:learning: https://towardsdatascience.com/cap-theorem-and-distributed-database-management-systems-5c2be977950e
:END:
:ANSWER:
- CAP Theorem is a concept that a distributed database system can only have 2 of the 3: Consistency, Availability and Partition Tolerance.
- CAP Theorem is very important in the Big Data world, especially when we need to make trade off's between the three, based on our unique use case.
:END:
**** Beyond CAP database systems
:PROPERTIES:
:learning: http://www.grokkingsystemdesigns.com/beyond-cap-theorem/
:END:
*** Wall: Write Ahead Logs
**** what it is good for
*** Eventual Consistency
*** Multi master replication
*** OLAP
#+BEGIN_NOTE
- OnLine Transactional Processing
#+END_NOTE
*** OLTP
- OnLine Analytical Processing
*** Slowly Moving Dimensions
**** What is it?                                                :QUESTION:
:ANSWER:
- Type 0 - The passive method
- Type 1 - Overwriting the old value
- Type 2 - Creating a new additional record
- Type 3 - Adding a new column
- Type 4 - Using historical table
- Type 6 - Combine approaches of types 1,2,3 (1+2+3=6)
:END:
**** Type 0 - The passive method.                               :QUESTION:
:ANSWER:
- In this method no special action is performed upon dimensional changes.
- Some dimension data can remain the same as it was first time inserted, others may be overwritten.
:END:
**** Type 1 - Overwriting the old value.                        :QUESTION:
:ANSWER:
- In this method no history of dimension changes is kept in the database.
- The old dimension value is simply overwritten be the new one.
- This type is easy to maintain and is often use for data which changes are caused by processing corrections (e.g. removal special characters, correcting spelling errors).
:END:
**** Type 2 - Creating a new additional record.                 :QUESTION:
:ANSWER:
- In this methodology all history of dimension changes is kept in the database.
- You capture attribute change by adding a new row with a new surrogate key to the dimension table.
- Both the prior and new rows contain as attributes the natural key(or other durable identifier).
- Also 'effective date' and 'current indicator' columns are used in this method. There could be only one record with current indicator set to 'Y'. For 'effective date' columns, i.e. start_date and end_date, the end_date for current record usually is set to value 9999-12-31. Introducing changes to the dimensional model in type 2 could be very expensive database operation so it is not recommended to use it in dimensions where a new attribute could be added in the future.
:END:
**** Type 3 - Adding a new column.                              :QUESTION:
:ANSWER:
- In this type usually only the current and previous value of dimension is kept in the database.
- The new value is loaded into 'current/new' column and the old one into 'old/previous' column.
- Generally speaking the history is limited to the number of column created for storing historical data. This is the least commonly needed technique.
:END:
**** Type 4 - Using historical table.                           :QUESTION:
:ANSWER:
- In this method a separate historical table is used to track all dimension's attribute historical changes for each of the dimension.
- The 'main' dimension table keeps only the current data e.g. customer and customer_history tables.
:END:
**** Type 6 - Combine approaches of types 1,2,3 (1+2+3=6).      :QUESTION:
:ANSWER:
- In this type we have in dimension table such additional columns as:

- current_type - for keeping current value of the attribute. All history records for given item of attribute have the same current value.
- historical_type - for keeping historical value of the attribute. All history records for given item of attribute could have different values.
- start_date - for keeping start date of 'effective date' of attribute's history.
- end_date - for keeping end date of 'effective date' of attribute's history.
- current_flag - for keeping information about the most recent record.

- In this method to capture attribute change we add a new record as in type 2. The current_type information is overwritten with the new one as in type 1. We store the history in a historical_column as in type 3.
:END:
*** Backup strategy
**** full vs incremental backup
**** snapshots
**** on-line replica
** WIP SQL
*** partitionning
- co to je?  rozdělení tabulek na více částí, může být vertikální či horizontální
- proč se to používá?  např. zvýšení výkonu (nevypisuji z celé tabulky ale jen z jedné partition) / zátěž rozložena na více disků  rychlejší čtení, velké tabulky které se nevejdou na disk -> vice partiton
*** inner vs outher join  
- typy spojení DB tabulek,
  - inner:  výsledek musí obsahovat průnik obou tabulek,
  - outer:  výsledek obsahuje data z jedné či druhé, případně z obou tabulek pokud klíč existuje v obou tabulkách …
- záleží na typu outer joinu - Full/left/right
*** DB Index 
- Druhy  primary/unique/(secondary) index …. Speciální: partial (na části dat definovaný where condition) / functional (nepoužívá atribut, ale funkci nad atributem/atributy) / spatial (prostorový index nad geografickými daty)
 k čemu slouží? K rychlejšímu vyhledávání v tabulce, v případě unique/primary zamezuje vložení duplicity
*** Constraint
- Omezení hodnoty vkládané do atribut, foreign key constraint  hodnota musí existovat v referenční tabulce, primary key constaint  unikátní hodnota v tabulce
*** Agregace (group by)
*** Co jsou window funkce?                                       :QUESTION:
- kalkulace/agregace nad množinou dat, přičemž každý prvek množiny může mít výsledek agregace jiný ….
- Např funkce lead/lag/rank/row_number/first/last/
*** what is a defference between CTE and temp table?             :QUESTION:
:ANSWER:
- A CTE is just that -- Common Table Expression, that is, only a syntax construct. The result set described by a CTE may never be materialized in the specified form.
- A temporary table, on the other hand, is a real database object that is initialized with the structure described by its DDL statement and possibly populated by actual rows.
:END:
*** CTE (with)  
- syntaxe pro vytvoření dočasné tabulky, kterou mohu použít v následujícím sql dotazu,
- lze pomocí ní dělat rekurzivní dotazy, výsledek je jen v paměti a neukládá se na disk (pokud mám dostatek working memory 😊 )
*** DML/DDL
- manipuklace s daty v tabulce (insert/delete/update) / definuje datové struktury (db,schema, tabulka) (create / drop / alter / rename)

** WIP Distributed consensus: 
*** Paxos                                                           :TOPIC:
:PROPERTIES:
:learning: https://en.wikipedia.org/wiki/Paxos_(computer_science)
:END:
- Paxos is a family of protocols for solving consensus in a network of unreliable or fallible processors. Consensus is the process of agreeing on one result among a group of participants. This problem becomes difficult when the participants or their communications may experience failures.[1]

- Consensus protocols are the basis for the state machine replication approach to distributed computing, as suggested by Leslie Lamport[2] and surveyed by Fred Schneider.[3] State machine replication is a technique for converting an algorithm into a fault-tolerant, distributed implementation. Ad-hoc techniques may leave important cases of failures unresolved. The principled approach proposed by Lamport et al. ensures all cases are handled safely.

- The Paxos protocol was first submitted in 1989 and named after a fictional legislative consensus system used on the Paxos island in Greece, where Lamport wrote that the parliament had to function "even though legislators continually wandered in and out of the parliamentary Chamber".[4] It was later published as a journal article in 1998.[5]

- The Paxos family of protocols includes a spectrum of trade-offs between the number of processors, number of message delays before learning the agreed value, the activity level of individual participants, number of messages sent, and types of failures. Although no deterministic fault-tolerant consensus protocol can guarantee progress in an asynchronous network (a result proved in a paper by Fischer, Lynch and Paterson[6]), Paxos guarantees safety (consistency), and the conditions that could prevent it from making progress are difficult to provoke.

- Paxos is usually used where durability is required (for example, to replicate a file or a database), in which the amount of durable state could be large. The protocol attempts to make progress even during periods when some bounded number of replicas are unresponsive. There is also a mechanism to drop a permanently failed replica or to add a new replica.
*** Raft                                                            :TOPIC:
*** Zab                                                             :TOPIC:
** WIP Transactions
*** transaction problems that are prevented by isolation:
**** What are they and what they mean?
:ASWER:
- Dirty reads
- non-repeatable reads
- phantom reads
:END:
*** JDBC transaction isolation levels
**** what are they and what they prevent from?
:ANSWER:
- TRANSACTION_READ_UNCOMMITTED
  - Dirty reads, non-repeatable reads and phantom reads can occur.
- TRANSACTION_READ_COMMITTED
  - Dirty reads are prevented; non-repeatable reads and phantom reads can occur.
- TRANSACTION_REPEATABLE_READ
  - Dirty reads and non-repeatable reads are prevented; phantom reads can occur.
- TRANSACTION_SERIALIZABLE
  - Dirty reads, non-repeatable reads and phantom reads are prevented. 
:END:
*** ANSI/ISO levels - 
**** what they are
:ANSWER:
- serializable
- repeatable read
- read committed
- read uncommitted
:END:
**** define some
:ANSWER:
- The Serializable isolation level guarantees that concurrent transactions run as they would if you would run sequentially one by one in order.
- One step weaker is the Read Repeatable isolation level that allows Phantom Reads to happen in the transaction. Contrary to transactions running in the Serializable mode, the set of rows that is returned by two consecutive select queries in a transaction can differ. This can happen if another transaction adds or removes rows from the table we are querying.
- Even weaker is the Read Commited isolation level. Two consecutive select statements in a transaction can return different data. Contrary to the Read Repeatable level, this level allows not only the set of rows to change, but also the data that those rows contain. This can happen if another transaction modifies the rows.
- The weakest isolation level is Read Uncommitted where dirty reads can occur. That means that non-committed changes from other transactions can affect a transaction.
:END:
** WIP Datawarehouse?  
- úložiště dat,
- organizovaných do určité struktury,
- pro účely analýzy dat … podpora business procesů organizace
** WIP Star schema  structure
- tvořené faktovou tabulkou (jednotlivá měření) a dimenzemi (entity popisující fakta); dimenze mohou být denormalizovánay
** WIP Snowflake schema  structure
- faktová tabulka (jednotlivá měření) + dimenze jsou normalizovány (jedna dimenze může být  složena z více tabulek)  3NF
** WIP WAL  / transactional log?  
- log kde je historie všech provedených DB operací nad danou instancí/databází.
- Z logu se zapisují záznamy do datových souborů.
- Z logu se dá obnovit databáze do určitého časového okamžiku (PITR-Point In Time Recovery);
- u postgre se dá použít například i k replikaci databáze
** WIP Tools
*** PostgreSQL
**** What is the current version of PostgreSQL                  :QUESTION:
**** Explain about Multi version concurrency control?           :QUESTION:
:ANSWER:
- Multi version concurrency control or MVCC is used to avoid unnecessary locking of the database.
- This removes the time lag for the user to log into his database.
- This feature or time lag occurs when some one else is on the content. All the transactions are kept as a record.
:END:
**** TODO psql
*** ORACLE:
:ANSWER:
- READ COMMITTED (the default)
- SERIALIZABLE.
  - that what Oracle call SERIALIZABLE is actually snapshot isolation.
:END:
*** Big Table
*** Big Query
*** Elastic Search
**** Bloom Filter
*** MongoDB
*** Liquibase
- open source
- tracks DB chanegs
- allows work with data as well as with the schema
- *changeset*:
  - XML, JSON, YAML, SQL
- can use context and label for filteriing chich chnages slould be applied where
*** Apache Drill
*** Apache Cassandra
- *Open Source:* Modern software development organizations have overwhelmingly moved to adopt open source technologies, starting with the Linux operating system and progressing into infrastructure for managing data. Open source technologies are attractive because of their affordability and extensibility, as well as the flexibility to avoid vendor lock-in. Organizations adopting open source report higher speed of innovation and faster adoption.
- *Flexible, Familiar Interface:* The Cassandra Query Language (CQL) is similar to SQL, meaning most developers should have a fairly easy time becoming familiar with it. (Here’s an introduction to CQL if you need some help).
- *High Performance:* The majority of traditional databases feature a primary / secondary architecture. In these configurations, a single primary replica performs read and write operations, while secondary replicas are only able to perform read operations. Downsides to this architecture include increased latency, as well as higher costs and lower availability at scale. In Cassandra, no single node is in charge of replicating data across a cluster. Instead, every node is capable of performing all read and write operations. This improves performance and adds resiliency to the database.
- *Active Everywhere / Zero-Downtime:* Since every Cassandra node is capable of performing read and write operations, data is quickly replicated across hybrid cloud environments and geographies. In the event a node fails, users are automatically routed to the nearest healthy node. They won’t even notice that a node has been knocked offline because applications behave as designed even in the event of failure. As a result, applications are always available and data is always accessible and never lost. What’s more, Cassandra’s built-in repair services fix problems immediately after they occur—without any manual intervention. Productivity doesn’t even need to take a hit should nodes fail.
- *Scalability:* In traditional environments, scaling applications is a time-consuming and costly process typically accomplished by scaling vertically with more expensive machines. Cassandra enables you to scale horizontally by simply adding more nodes to the cluster. If, for example, four nodes can handle 200,000 transactions/second, eight nodes will be able to handle 400,000 transactions/second. (source)
- *Seamless Replication:* Today’s leading enterprises are increasingly moving to multi-data center, hybrid cloud and even multi-cloud deployments to take advantage of the strengths of various deployments without getting locked into any single provider’s ecosystem. Getting the most out of multi-cloud environments, however, starts with having an underlying cloud database that offers: scalability, security, performance, and availability. For these reasons, it should come as no surprise that the cloud database market is expected to grow nearly 65% each year and reach $68.9 billion by 2022.
* WIP Methodology                                                    :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: METHODOLOGY
:END:
** Scrum                                                             :TOPIC:
** Kanban                                                            :TOPIC:
** XP                                                                :TOPIC:
** Lean                                                              :TOPIC:
** Jira                                                              :TOPIC:
** Confluence                                                        :TOPIC:
** MOSCOW                                                            :TOPIC:
** DoD                                                               :TOPIC:
** DoR                                                               :TOPIC:
** Uml                                                               :TOPIC:
** C4                                                                :TOPIC:
** Org42                                                             :TOPIC:
* WIP Cloud                                                          :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: CLOUD
:END:
** TODO Cloud native architecture
** TODO Open Policy Agent
** TODO IaaS
** TODO PaaS
** TODO SaaS
** WIP AWS Concepts                                                  :TOPIC:
*** Regions
- Each Amazon EC2 Region is designed to be isolated from the other Amazon EC2 Regions. This achieves the greatest possible fault tolerance and stability.
- When you view your resources, you see only the resources that are tied to the Region that you specified. This is because Regions are isolated from each other, and we don't automatically replicate resources across Regions.
- When you launch an instance, you must select an AMI that's in the same Region. If the AMI is in another Region, you can copy the AMI to the Region you're using. For more information, see Copying an AMI.

| Code           | Name                       | Opt-in Status | Local Zone        |
| us-east-2      | US East (Ohio)             | Not required  | Not available     |
| us-east-1      | US East (N. Virginia)      | Not required  | Not available     |
| us-west-1      | US West (N. California)    | Not required  | Not available     |
| us-west-2      | US West (Oregon)           | Not required  | us-west-2-lax-1a  |
| us-west-2      | US West (Oregon)           | Not required  | aus-west-2-lax-1b |
| af-south-1     | Africa (Cape Town)         | Required      | Not available     |
| ap-east-1      | Asia Pacific (Hong Kong)   | Required      | Not available     |
| ap-south-1     | Asia Pacific (Mumbai)      | Not required  | Not available     |
| ap-northeast-3 | Asia Pacific (Osaka-Local) | Not required  | Not available     |
| ap-northeast-2 | Asia Pacific (Seoul)       | Not required  | Not available     |
| ap-southeast-1 | Asia Pacific (Singapore)   | Not required  | Not available     |
| ap-southeast-2 | Asia Pacific (Sydney)      | Not required  | Not available     |
| ap-northeast-1 | Asia Pacific (Tokyo)       | Not required  | Not available     |
| ca-central-1   | Canada (Central)           | Not required  | Not available     |   
| eu-central-1   | Europe (Frankfurt)         | Not required  | Not available     |   
| eu-west-1      | Europe (Ireland)           | Not required  | Not available     |   
| eu-west-2      | Europe (London)            | Not required  | Not available     |   
| eu-south-1     | Europe (Milan)             | Required      | Not available     |   
| eu-west-3      | Europe (Paris)             | Not required  | Not available     |   
| eu-north-1     | Europe (Stockholm)         | Not required  | Not available     |   
| me-south-1     | Middle East (Bahrain)      | Required      | Not available     |   
| sa-east-1      | South America (São Paulo)  | Not required  | Not available     |  

*** Availability Zones
- Each Region has multiple, isolated locations known as Availability Zones. - When you launch an instance, you can select an Availability Zone or let us choose one for you. If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests.
** WIP AWS Services                                                  :TOPIC:
*** EC2 (Amazon Elastic Compute Cloud)
**** AMI
*** ELB CLB ALB
*** EFS
*** Route53
*** Beanstalk
*** RDS
*** AWS Wavelength
- AWS Wavelength allows developers to build applications that deliver ultra-low latencies to mobile devices and end users. Wavelength deploys standard AWS compute and storage services to the edge of telecommunication carriers' 5G networks. Developers can extend an Amazon Virtual Private Cloud (VPC) to one or more Wavelength Zones, and then use AWS resources like Amazon Elastic Compute Cloud (EC2) instances to run applications that require ultra-low latency and a connection to AWS services in the Region.
** AWS cli 
- boto3
- aws-shell
** GCP Services                                                      :TOPIC:
*** TODO bigquery
*** TODO composer
*** TODO dataflow
*** TODO firestore
*** TODO automl
*** TODO dataproc
*** TODO secretmanager
*** TODO pubsub
*** TODO iam
*** WIP aim:service accounts
:PROPERTIES:
:learning: https://cloud.google.com/iam/docs/understanding-service-accounts
:END:
- A service account is a special type of Google account intended to represent a non-human user that needs to authenticate and be authorized to access data in Google APIs.
- Typically, service accounts are used in scenarios such as:
  - Running workloads on virtual machines (VMs).
  - Running workloads on on-premises workstations or data centers that call Google APIs.
  - Running workloads which are not tied to the lifecycle of a human user.
- Your application assumes the identity of the service account to call Google APIs, so that the users aren't directly involved.

** GCP CLI                                                           :TOPIC:
- gcloud

** FINOPS                                                            :TOPIC:
*** GCP Cost Model
*** AWS Cost Model
*** data at rest cost
*** transfer cost
*** CPU cost
** Storage:
*** AWS S3
*** GCS bucket
**** api
**** what it is good for
*** WIP MinIO Object Storage
:PROPERTIES:
:learning: https://min.io/product/overview
:END:
* WIP DEVOPS / SRE                                                   :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: DEVOPS
:END:
** Culture
:PROPERTIES:
:lerning:  https://blog.sonatype.com/principle-based-devops-frameworks-three-ways
:END:
*** TODO The Three Ways
:PROPERTIES:
:lerning:  https://blog.sonatype.com/principle-based-devops-frameworks-three-ways
:END:

The Phoenix Project/DevOps Handbook’s Three Ways
If you’ve read either The Phoenix Project or The DevOps Handbook, you’ve been introduced to The Three Ways framework for DevOps:

- The First Way: Principles of Flow
- The Second Way: Principles of Feedback
- The Third Way: Principles of Continuous Learning

**** The First Way: Principles of Flow
The First Way is mostly concerned with accelerating the “flow” of work throughout a process. Gene Kim also refers to the First Way as Systems Thinking in his article The Three Ways: Principles Underpinning DevOps. Whether you’re calling it Flow or Systems Thinking, the principles underpinning the First Way are working toward the same end: viewing the flow of work as one continuous system (unsiloed) that can be continually refined and optimized.

Some of the key principles of the First Way are:
- *Making work “visible”.* Unlike manufacturing processes, which are easily observable on a plant floor, the flow of software through its development lifecycle is not easily seen. Using methods such as Kanban boards can surface the activities going on behind the scenes, by showing the left-to-right movement of a user story through the development phases.
- *Limiting work-in-progress (WIP).* Keeping work-in-progress to a minimum has also been shown to accelerate work flow, because it minimizes multi-tasking and context-switching.
- *Reducing batch sizes*. “Chunking” work into smaller pieces like a two-week sprint can also help deliver features (albeit smaller ones) and bug fixes to the customer faster. Issues are often caught earlier when those updates and additions are released sooner.
- *Reducing hand-offs between teams.* The risk of “dropping the baton” increases as the hand-offs do. Although hand-offs can’t be completely minimized, the key is to keep the teams in tight communication with one another so that the hand-off itself is almost a non-event rather than a large ordeal with the potential for communication missteps along the way.
- *Identifying and removing constraints and waste.* Constraints might be bottlenecks in the process, such as environments, test setup, and overly tight architecture, while waste includes things like manual work, heroics, and context-switching.
**** The Second Way: Principles of Feedback
The Second Way works to enable fast and constant feedback cycles throughout all stages of a development cycle.

Some of the key principles of the Second Way are:
- *Swarming and solving problems to build new knowledge.* This principle fits into the “fail fast” mentality, so that teams can find issues with an implementation as soon as possible and address them early and often as iterations continue.
- *Pushing quality closer to source.* This principle is at the core of the DevSecOps movement, which is concerned with addressing security concerns during the development cycle, instead of at the end, when rework to remediate is more difficult and costly.
- *Optimizing for downstream work centers.*  This principle works against the “throw it over the wall” mentality, by underscoring that development should be just as invested in their application being deployable, working with operations to bridge that gap (and vice versa).
**** The Third Way: Principles of Continuous Learning
The Third Way seeks to create a culture of continual learning and experimentation within the development organization.

Some of the key principles of the Third Way are:
- *Enabling organizational learning and a safety culture.* Leaders must help “set the tone” for the organization, making it okay to learn, make mistakes, and try again.
- *Institutionalizing the improvement of daily work.* Improving what you do and how you accomplish it should be part of everyone’s daily thinking and call to action.
- *Transforming local discoveries to global improvements.* Surfacing and sharing improvements at all levels will help enable a “bubble up” culture of continuous improvement.
- *Injecting resilience patterns into daily work.* Some examples might include rehearsing failures, and working toward improving key metrics for deployment.
- *Leaders enforcing a learning culture.* Organization-wide learning is unlikely to take hold and become pervasive unless it is sanctioned and exemplified by its leaders. So being intentional about communicating the value of learning and problem-solving is crucial to building that culture.
*** ACCELERATE
*** CALMS (Culture, Automation, Lean, Measurement, Sharing)
:PROPERTIES:
:lerning:  https://blog.sonatype.com/principle-based-devops-frameworks-calms
:END:
Created by Jez Humble, co-author of The DevOps Handbook and Accelerate, the CALMS framework is used as a means of assessing whether an organization is ready to adopt DevOps processes, or how an organization is progressing in their DevOps transformation. It is based on the following five pillars:

- *Culture.* Before silos can be torn down, there needs to be a culture of shared responsibility, or at least a group of people devoted to establishing that culture in a grassroots type of way, with management approval and support.
- *Automation.* Similar to the technical practices centered around continuous delivery mentioned above, teams undertaking a DevOps transformation should be devoted to automating as many manual tasks as possible, especially with respect to continuous integration and test automation.
- *Lean.* Development teams are making use of lean principles to eliminate waste and optimize the value stream, such as minimizing WIP, making work visible, and reducing hand-off complexity and wait times.
- *Measurement.* The organization is devoted to collecting data on their processes, deployments, etc., in order to understand their current capabilities and where improvements could be achieved.
- *Sharing.* A culture of openness and sharing within and between teams (and enabled with the proper tools) keeps everyone working toward the same goals and eases friction with hand-offs when issues arise.
** Tools
*** DNS
:PROPERTIES:
:learning: https://www.freshersemploy.com/dns-interview-questions-answers/
:END:
**** What is DNS?
- Domain Name Systems(DNS) maps domain names with Internet Protocol(IP) address, thus helping computer for translating human-readable(domain name) to machine-readable language(IP address).
**** What is Nameserver?
- It is used for storing the information for the domain name to IP and IP to the domain name. In other words, the name server is used for storing records of the domain names, Name servers help for convert domain name to IP address.
**** What is DNS Spoofing?
- DNS Spoofing occurs when a hacker is redirecting website traffic maliciously to spread the malware or to compromise the user's data through forged DNS record.

- When a user visits a website(like freshersemploy.com) in a browser, it needs to be resolved from human-readable to machine-readable(i.e. IP addresses) using DNS resolver. To decrease the time and resolve faster, DNS resolvers cache the data and store for a specific time(until it expires). An attacker can inject forged DNS entry, thus causing DNS Cache Poisoning and instead of freshersemploy.com, the attacker will redirect it to the wrong domain or fake website.
**** How can we prevent DNS Spoofing?

DNS Spoofing or DNS Cache Poisoning can be avoided by following guidelines:

- From a users point of view, it is almost impossible for users to detect whether the DNS records are compromised, but users should be alerted when accessing the sites like banking, payment website where credit card details are used by checking the domain name in the browser and does it have a valid SSL certificate.
- Domain owner and DNS provider cannot avoid DNS Spoofing but surely can take protective measures to avoid the compromise of DNS records.
  - Using Domain Name System Security Extensions(DNSSEC) which helps in determining the DNS records authenticity by signing each request with certified signature and this is recommended by ICANN. Still this in process of implementation.
**** What is Round Robin DNS? What is the purpose of it?

Round Robin DNS is a technique for load distribution, load balancing, fault-tolerance service such as mail server, FTP server etc. which enables
distribution of load evenly among multiple servers using various DNS A addresses.

Suppose a domain abc.com is configured with Round robin DNS which has 3 potential IP mapping to the same domain(i.e. freshersemploy.com) as follows:

- freshersemploy.com -- 104.28.26.01
- freshersemploy.com -- 104.28.26.02
- freshersemploy.com -- 104.28.26.03

Then the first request will go to 104.28.26.01, the second request will go to 104.28.26.02 and the third request will go to 104.28.26.03, thus DNS
queries are responded by returning IP addresses in a rotation.
**** What is primary and secondary name server?
- Primary name server reads the data from the domain zone, it has DNS records of domain names and it replicates the data with the secondary name server.
- A secondary name server is the back up of primary name server which is used for high reliability, in case the primary name server is having an issue or not reachable.
**** What is DNS resolver?
- DNS resolvers are being used by ISP (Internet service provider) for the user request to resolve the domain name. If a user request for google.com, DNS resolver needs to contact TLD(Top Level Domain) i.e. .com, for translation of domain name to IP address and it caches the data if the user again queries for the same domain, thus reducing the loads on the server and response time.
**** What is the difference between URL and Domain?
- URL stands for Uniform Resource Locator. URL specifies the full address of a webpage. It consists of three components: protocol(like HTTP, mailto, ftp), domain name(like freshersemploy.com) and file name(eg. homepage.html)
- e.g.:
  - [[https://www.freshersemploy.com/]]
  - [[https://www.freshersemploy.com/html-interview-questions-answers/]]
  - [[mailto:admin@freshersemploy.com]]

- A domain is the name of a website with the top-level domain(like .com, .org etc.). A domain is a part of URL.
- e.g.:
  - [[https://www.freshersemploy.com/]]
  - [[mailto:admin@freshersemploy.com][admin@freshersemploy.com]]

**** What is DNS server?
- DNS servers resolve IP address to respective hostnames and it maintains directory or database to store the information.
- When we try to access the website (like /*freshersemploy.com)*/, DNS servers help to translate to machine-readable language i.e. IP address (like /*104.28.27.67*/).
**** What are the different types of records in DNS?
- Some of commonly used of DNS records are A, CNAME, NS, MX, PTR, SOA etc.
**** Explain SOA record?
- Start of Authority(SOA) records stores essential information(like refresh rate, expiry, TTL etc) in domain name system(DNS) in a zone file.

; name TTL class rr Nameserver email-address freshersemploy.com. 12000 IN SOA ns.nameserver.com. root.ns.nameserver.com. ( 2098163206 ; Serial number
12000 ; Refresh rate in seconds 3600 ; Update Retry in seconds 5788864; Expiry in seconds 100 ; minimum in seconds )

#+begin_src dns
; name TTL class rr Nameserver email-address   
freshersemploy.com. 12000 IN SOA               
ns.nameserver.com. root.ns.nameserver.com.     
(                                              
    2098163206 ; Serial number                     
    12000 ; Refresh rate in seconds                
    3600 ; Update Retry in seconds                 
    5788864; Expiry in seconds                     
    100 ; minimum in seconds )
#+end_src
                                                      

- *Serial Number:* It has the serial number, which gets increments whenever there is a change in the DNS records.
- *Refresh interval:* It gets refresh at the specific interval and if there any changes in the records, data is replicated.
- *Retry:* If the propagation gets failed, it will retry after specific time which is defined in the zone file.
- *Expire:* It is set to have an expiry date, as specified in the zone file. Also used for secondary server how long it should be active in case the primary DNS server is down.
- *TTL:* It has the default time-to-live(TTL),

A zone file should have only one SOA record and it must be at the top of it.

**** What is the use of PTR in DNS?

PTR(Pointer) records are used for mapping IP addresses which are associated with hostname name. It is also called has reverse DNS lookup as it
resolves IP address to domain or hostname. There must be A record for every PTR record. PTR is mainly used for the mail server.

**** Explain CNAME record?
- CNAME record stands for Canonical Name record. It used as the alias for domain or the Canonical name(another name) for a domain.
- For example, suppose someone incorrectly types(or misspelled the website name) like fresher*s*employ.com as fresheremploy.com(we should also own this domain), then using CNAME record, we can redirect to fresher*s*employ.com
- It is a type of resource record in DNS which is specified in the zone file. CNAME records should always point to another domain and never directly points to IP address.

**** Explain Dynamic DNS
- Dynamic DNS helps for automatically updating the name servers whenever there is a change in the IP address in the Domain Name System(DNS).

**** What is Resource Record?
- Resource Record(RR) defines the elements or attributes of a domain name in DNS zone file like Address(A) record, Mail Exchange(MX) record etc. which helps in name resolutions.
- Some of the most common Resource Records are:

- A -- IPv4 Address record
- AAAA -- IPv6 Address record
- CNAME -- Canonical Name
- MX -- Mail Exchange
- PTR -- Pointer
- SOA -- Start of Authority
- NS -- Name Server

**** What is DNS Zone?
- A DNS zone file contains the mapping between a domain name, IP address, recourse records etc. in text representative format. Also, DNS zone refers to the administrative responsibility in the DNS.

**** Define TTL
- Time-to-live caches the DNS records for a specific period of time(when TTL expires, it has to query new record). It helps in queries the records faster, eventually reducing the load on the DNS server.

**** Explain MX record?
- Mail Exchange(MX) record is a type of resource record which is used for email sending and delivery. It must be specified in the DNS zone files mails for the domain.

**** What is Forward Lookup
- Forward Lookup is used to find the IP address through the domain name.

**** What is Reverse Lookup
- Reverse Lookup is used for finding the domain name through it IP.


**** TODO What is  DKIM

*** Git                                                             :TOPIC:
**** What is the use of Staging area or Indexing in Git?        :QUESTION:
:ANSWER:
From Git’s perspective, there are three areas where the file changes can be kept i.e.:
- working directory,
- staging area, and
- repository.


- First, you make changes in your project’s working directory stored on your computer file system.
- All the changes remain here until you add them to an intermediate area called staging area.

- You can stage the changes by executing ~git add .~
- This staging area gives you a preview of your next commit and basically lets you fine-tune your commits.
- You can add or remove changes in the staging area until you are satisfied with the version you are going to commit.

- Once you verify your changes and sign off the stage changed, then you can finally commit the changes.
- Upon commit, they go the local repository i.e. into ~.git/objects~ directory.

- If you use Git GUI, then you will see the option to stage your changes.

- In the below screenshot, the file sample.txt is under unstaged changes area which means that it’s in your working directory.

- Staging is also referred to as indexing because git maintains an index file to keep track of your file changes across these three areas.
- The files which are staged are currently in your index.
- When you add changes to the staging area, then the information in the index gets updated.
- When you do a commit, its actually what’s in the index that gets committed, and not what’s in the working directory.
- You can use the git status command to see what’s in the index.
:END:
**** TODO squash? Waht it is? whan to use it awht it is good for? 
**** TODO pull-request
**** TODO cherry pick
**** TODO flow
**** TODO git push
**** TODO rebase vs merge - semantical and syntactical diff
**** TODO stash
*** Artifactory
*** Nexus ... sunset
*** Docker                                                          :TOPIC:
**** TODO dockerhub :-)
**** TODO docker file
**** TODO docker image
**** TODO docker compose
**** TODO docker swarm
**** TODO linux namespaces 
**** TODO cgroups
**** TODO OCI
**** TODO volumes
**** TODO networks
**** TODO BuildKit
**** TODO DTR - docker trusted registry

*** K8S / Kubernetes:                                               :TOPIC:
**** What is a service                                          :QUESTION:
**** What are network policies?                                 :QUESTION:
:PROPERTIES:
:learning: https://github.com/ahmetb/kubernetes-network-policy-recipes
:learning: https://www.infoq.com/news/2019/12/network-isolation-kubernetes/
:END:
:ANSWER:
- firewall on the  pod level
:END:
**** what are labels?
:ANSWER:
- key value pairs that can be assigned to majority of Kubernetes objects
:END:
**** What are network policies rules?                           :QUESTION:
:ANSWER:
1) traffic is allowed unless there is a network policy that blocks it
2) rules apply as soon as pod is selected and it is deny by default unless stated differently
3) you then only write rules that allow (whitelist)
4) rules are aditive "ored" i.e. or is applied and single allow rule is enough to open the flow
5) network policies are scoped to a namespace they are deployed to
6) ports in rules are ports on pods not ports of services
:END:
**** what are podSelectors?                                     :QUESTION:
:PROPERTIES:
:lerning:  https://medium.com/@zwhitchcox/matchlabels-labels-and-selectors-explained-in-detail-for-beginners-d421bdd05362
:END:
:ANSWER:
matchLabels: 
:END:
**** what is namespaceSelector?                                 :QUESTION:
:ANSWER:
:END:
**** what is empty selector:                                    :QUESTION:
:ANSWER:
example: matchLabels:{}
:END:
**** what ipBlock and hwhat are they good for?
**** what is a network policy plugin and how you enable that?
:answer:
- Calico,  for example
- iptables vs overlay network (calico is iptables based)
:end:
**** network policy API
**** whats is kube-dns
**** helm
**** chart
**** template
**** cluster
**** pod
**** node
**** service mesh
**** ingress controller
**** ingress and exgress?
**** etcd
**** secret
**** operator
**** CRD / Custom Resources
:answer:
- A resource is an endpoint in the Kubernetes API that stores a collection of API objects of a certain kind; for example, the built-in pods resource contains a collection of Pod objects.
- A custom resource is an extension of the Kubernetes API that is not necessarily available in a default Kubernetes installation. It represents a customization of a particular Kubernetes installation. However, many core Kubernetes functions are now built using custom resources, making Kubernetes more modular.
- Custom resources can appear and disappear in a running cluster through dynamic registration, and cluster admins can update custom resources independently of the cluster itself. Once a custom resource is installed, users can create and access its objects using kubectl, just as they do for built-in resources like Pods.
:end:
**** liveness/readines probes
**** kubectl
**** CNCF

*** Terraform                                                       :TOPIC:
**** resource
**** module
**** state
**** backend
*** Chef                                                            :TOPIC:
*** Puppet                                                          :TOPIC:
*** Ansible                                                         :TOPIC:
*** Cloud Formation                                                 :TOPIC:
*** Hashicorp consul                                                :TOPIC:
*** Hashicorp vault                                                 :TOPIC:
*** zookeeper                                                       :TOPIC:
*** kibana                                                          :TOPIC:
*** graphana                                                        :TOPIC:
*** ELK                                                             :TOPIC:
*** DynaTrace                                                       :TOPIC:
*** Piwik                                                           :TOPIC:
** Linux
*** cron
*** runlevel / init / inittab 
*** systemd
*** snap
*** apt
*** ssh 
**** how to create trust between computers
*** awk 
:PROPERTIES:
:learning: https://www.digitalocean.com/community/tutorials/how-to-use-the-awk-language-to-manipulate-text-in-linux
:learning: https://linuxhint.com/20_awk_examples/
:END:
*** sed 
*** grep 
*** tail
*** head
*** rsync
*** mount
*** ls / ps / htop
*** bash                                                          :TOPIC:
**** co je to here doc?                                         :QUESTION:
*** co je to regexp
*** list open ports
*** iptables
*** BPF
*** list open files
*** stdin stdout stderr
*** NFS
*** file types: 
**** block device
**** character device
**** named pipe
**** symlink
*** etc/nsswitch./conf
*** etc/resolv.conf
*** ip
#+begin_src bash
ip addr sh
ip route sh
#+end_src
*** nmap
*** nc
*** socat
*** chmod
*** dd
*** tar
*** apt-get apt
*** wget
*** curl
*** find
** Observability
*** 3 pillars
**** logs
**** metrics
**** traces
*** Tail Latency
* WIP Web Front End                                                  :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: WEB
:END:
** React
*** React 
*** React Native
*** react-hooks
** Angular
** PWA
*** app-shell model 

** HTML + CSS
*** Chrome Development Tools
*** HTML5 Layout 
:ANSWER:
#+begin_src html
<header> It is used to define a header for a document or a section.
<nav> It is used to define a container for navigation links
<section> It is used to define a section in a document
<article> It is used to define an independent, self-contained article
<aside> It is used to define content aside from the content (like a sidebar)
<footer> It is used to define a footer for a document or a section
#+end_src
:END:
*** What is iframe good for?                                     :QUESTION:
:ANSWER:
An iframe is used to display a web page within a web page.
Syntax:
#+begin_src html
<iframe src="URL"></iframe>  
#+end_src
Example:
#+begin_src html
<iframe src="demo_iframe.html" width="200px" height="200px"></iframe>  
#+end_src
Target to a link:
#+begin_src html
<iframe src="http://www.javatpoint.com" name="iframe_a"></iframe>  
#+end_src
:END:
*** WIP Cookies
:PROPERTIES:
:lerning:  https://tools.ietf.org/id/draft-ietf-httpbis-rfc6265bis-03.html
:END:
*** WIP Cookies / SameSite
:PROPERTIES:
:lerning:  https://web.dev/samesite-cookies-explained/
:END:
*** Less
*** Sass
*** CORS
:PROPERTIES:
:learning: https://www.codecademy.com/articles/what-is-cors
:END:
**** why is CORS necessary?                                     :QUESTION:
**** How Does CORS Manage Requests From External Resources?     :QUESTION:
**** What http headers were added by CORS?                      :QUESTION:
:ANSWER:
#+begin_src html
Access-Control-Allow-Origin
Access-Control-Allow-Credentials
Access-Control-Allow-Headers
Access-Control-Allow-Methods
Access-Control-Expose-Headers
Access-Control-Max-Age
Access-Control-Request-Headers
Access-Control-Request-Method
Origin
#+end_src
:END:
** The Elm Architecture (TEA)
* WIP Security                                                       :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: SECURITY
:END:
** SPIFFE                                                            :TOPIC:
*** what is spiffe
:PROPERTIES:
:lerning:  https://spiffe.io/docs/latest/spiffe/overview/
:END:
:ANSWER:
- SPIFFE, the Secure Production Identity Framework for Everyone, is a set of open-source standards for securely identifying software systems in dynamic and heterogeneous environments. Systems that adopt SPIFFE can easily and reliably mutually authenticate wherever they are running.
- Distributed design patterns and practices such as micro-services, container orchestrators, and cloud computing have led to production environments that are increasingly dynamic and heterogeneous. Conventional security practices (such as network policies that only allow traffic between particular IP addresses) struggle to scale under this complexity. A first-class identity framework for workloads in an organization becomes necessary.
- Further, modern developers are expected to understand and play a role in how applications are deployed and managed in production environments. Operations teams require deeper visibility into the applications they are managing. As we move to a more evolved security stance, we must offer better tools to both teams so they can play an active role in building secure, distributed applications.
- SPIFFE is a set of open-source specifications for a framework capable of bootstrapping and issuing identity to services across heterogeneous environments and organizational boundaries. The heart of these specifications is the one that defines short lived cryptographic identity documents – called SVIDs via a simple API. Workloads can then use these identity documents when authenticating to other workloads, for example by establishing a TLS connection or by signing and verifying a JWT token.
:END:
** Oauth2/OIDC                                                       :TOPIC:
*** grant (flow) types:
**** Authorization Code Flow
**** Client Credentials Flow
**** Device Code
**** Refresh Token
**** PKCE
**** (Implicit Flow)
**** (Password Grant)
*** Scope
:answer:
A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf. 
Often, applications will want to make use of the information that has already been created in an online resource.
To do so, the application must ask for authorization to access this information on a user’s behalf. 
When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs,
and the authorization server uses the Scope parameter to respond with the access that was actually granted.
:end:
*** What is acr_values
:PROPERTIES:
:lerning:  https://ldapwiki.com/wiki/Acr_values
:END:
:ANSWER:
- Acr_values is an OPTIONAL parameter that is a Space-separated string that specifies the Authentication Context Class Values within the Authentication Request that the Authorization Server is being requested to use for processing requests from this Client, with the values appearing in order of preference.
- Acr_values was originally specified within the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC 7523)

- The Authentication Context Class Reference values actually utilized by the Authorization Server is returned within the Identity Token in the acr parameter.
:END:
** JWT
:PROPERTIES:
:learning:    https://tools.ietf.org/html/rfc7519
:END:
*** What are the registered claim names?                        :QUESTION:
*** What is registered claim name "iss" (Issuer) Claim?          :QUESTION:
:ANSWER:
- The "iss" (issuer) claim identifies the principal that issued the JWT.
- The processing of this claim is generally application specific.
- The "iss" value is a case-sensitive string containing a StringOrURI value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "sub" (Subject) Claim          :QUESTION:
:ANSWER:
- The "sub" (subject) claim identifies the principal that is the subject of the JWT.
- The claims in a JWT are normally statements about the subject.
- The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique.
- The processing of this claim is generally application specific.
- The "sub" value is a case-sensitive string containing a StringOrURI value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "aud" (Audience) Claim         :QUESTION:
:ANSWER:
- The "aud" (audience) claim identifies the recipients that the JWT is intended for.
- Each principal intended to process the JWT MUST identify itself with a value in the audience claim.
- If the principal processing the claim does not identify itself with a value in the "aud" claim when this claim is present, then the JWT MUST be rejected.
- In the general case, the "aud" value is an array of case-sensitive strings, each containing a StringOrURI value.
- In the special case when the JWT has one audience, the "aud" value MAY be a single case-sensitive string containing a StringOrURI value.
- The interpretation of audience values is generally application specific.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "exp" (Expiration Time) Claim  :QUESTION:
:ANSWER:
- The "exp" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.
- The processing of the "exp" claim requires that the current date/time MUST be before the expiration date/time listed in the "exp" claim.
- Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.
- Its value MUST be a number containing a NumericDate value.
- Use of this claim is OPTIONAL. 
:END:
*** What is registered claim name "nbf" (Not Before) Claim       :QUESTION:
:ANSWER:
- The "nbf" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing.
- The processing of the "nbf" claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the "nbf" claim.
- Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.
- Its value MUST be a number containing a NumericDate value.
- Use of this claim is OPTIONAL.
*** What is registered claim name "iat" (Issued At) Claim        :QUESTION:
- The "iat" (issued at) claim identifies the time at which the JWT was issued.
- This claim can be used to determine the age of the JWT.
- Its value MUST be a number containing a NumericDate value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "jti" (JWT ID) Claim           :QUESTION:
:ANSWER:
- The "jti" (JWT ID) claim provides a unique identifier for the JWT.
- The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object;
- if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well.
- The "jti" claim can be used to prevent the JWT from being replayed.
- The "jti" value is a case-sensitive string.
- Use of this claim is OPTIONAL.
:END:
*** What are Public Claim Names                                  :QUESTION:
:ANSWER:
- Claim Names can be defined at will by those using JWTs.
- However, in order to prevent collisions, any new Claim Name should either be registered in the IANA "JSON Web Token Claims" registry established by Section 10.1 or be a Public Name:
  - a value that contains a Collision-Resistant Name.
- In each case, the definer of the name or value needs to take reasonable precautions to make sure they are in control of the part of the namespace they use to define the Claim Name.
:END:
** WIP JWKS
:PROPERTIES:
:lerning:  https://auth0.com/docs/tokens/json-web-tokens/json-web-key-sets
:END:
- JSON Web Key Sets:
  - The JSON Web Key Set (JWKS) is a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by the authorization server and signed using the RS256 signing algorithm.
  - When creating applications and APIs in Auth0, two algorithms are supported for signing JWTs: RS256 and HS256.
    - RS256 generates an asymmetric signature, which means a private key must be used to sign the JWT and a different public key must be used to verify the signature.
  - Auth0 uses the JSON Web Key (JWK) specification to represent the cryptographic keys used for signing RS256 tokens. This specification defines two high-level data structures: JSON Web Key (JWK) and JSON Web Key Set (JWKS). Here are the definitions from the specification:

| Item                    | Description                                                                                                                        |
| JSON Web Key (JWK)      | A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value. |
| JSON Web Key Set (JWKS) | A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.                   |

Auth0 exposes a JWKS endpoint for each tenant, which is found at https://YOUR_DOMAIN/.well-known/jwks.json. This endpoint will contain the JWK used to sign all Auth0-issued JWTs for this tenant.

** LDAP
*** object class
**** inetOrgPerson
*** OID
*** CN, DN, SN,
** OWASP top 10 2017
:PROPERTIES:
:learning: - https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/
:END:
*** A1:2017-Injection
*** A2:2017-Broken Authentication
*** A3:2017-Sensitive Data Exposure
*** A4:2017-XML External Entities (XXE)
*** A5:2017-Broken Access Control
*** A6:2017-Security Misconfiguration
*** A7:2017-Cross-Site Scripting (XSS)
*** A8:2017-Insecure Deserialization
*** A9:2017-Using Components with Known Vulnerabilities
*** A10:2017-Insufficient Logging & Monitoring
** Crypto
*** Block Ciphers
**** ECB, CBC, OFB, CFB, CTR  - what they are
:PROPERTIES:
:learning:    https:/www.highgo.ca/2019/08/08/the-difference-in-five-modes-in-the-aes-encryption-algorithm//
:END:
**** RSA
**** AES
**** DES
*** Hash
***** base64
*** symetricka sifra
*** asymetricka sifra
*** HMAC
:PROPERTIES:
:learning: https://en.wikipedia.org/wiki/HMAC
:END:
:ANSWER:
- In cryptography, an HMAC (sometimes expanded as either keyed-hash message authentication code or hash-based message authentication code) is a specific type of message authentication code (MAC) involving a cryptographic hash function and a secret cryptographic key. 
- As with any MAC, it may be used to simultaneously verify both the data integrity and the authenticity of a message. 
:END:

*** RS256 vs HS256: What's the difference?
:PROPERTIES:
:learning: https://stackoverflow.com/questions/39239051/rs256-vs-hs256-whats-the-difference
:END:
:ANSWER:
- Both choices refer to what algorithm the identity provider uses to sign the JWT. Signing is a cryptographic operation that generates a "signature" (part of the JWT) that the recipient of the token can validate to ensure that the token has not been tampered with.
  - *RS256 (RSA Signature with SHA-256)* is an asymmetric algorithm, and it uses a public/private key pair: the identity provider has a private (secret) key used to generate the signature, and the consumer of the JWT gets a public key to validate the signature. Since the public key, as opposed to the private key, doesn't need to be kept secured, most identity providers make it easily available for consumers to obtain and use (usually through a metadata URL).
  - *HS256 (HMAC with SHA-256)*, on the other hand, involves a combination of a hashing function and one (secret) key that is shared between the two parties used to generate the hash that will serve as the signature. Since the same key is used both to generate the signature and to validate it, care must be taken to ensure that the key is not compromised.
- If you will be developing the application consuming the JWTs, you can safely use HS256, because you will have control on who uses the secret keys. If, on the other hand, you don't have control over the client, or you have no way of securing a secret key, RS256 will be a better fit, since the consumer only needs to know the public (shared) key.
- Since the public key is usually made available from metadata endpoints, clients can be programmed to retrieve the public key automatically. If this is the case (as it is with the .Net Core libraries), you will have less work to do on configuration (the libraries will fetch the public key from the server). Symmetric keys, on the other hand, need to be exchanged out of band (ensuring a secure communication channel), and manually updated if there is a signing key rollover.
- Auth0 provides metadata endpoints for the OIDC, SAML and WS-Fed protocols, where the public keys can be retrieved. You can see those endpoints under the "Advanced Settings" of a client.
- The OIDC metadata endpoint, for example, takes the form of https://{account domain}/.well-known/openid-configuration.
  - If you browse to that URL, you will see a JSON object with a reference to https://{account domain}/.well-known/jwks.json, which contains the public key (or keys) of the account.
- If you look at the RS256 samples, you will see that you don't need to configure the public key anywhere: it's retrieved automatically by the framework.
:END:

** bastillion.io
** PKI
** X509
*** Why does GoDaddy have four different certificate chain, G2, G3, G4? :QUESTION:
:ANSWER:
- "G" stands for Root certificates generation.
- Basically, it identifies the generation (version) of a Root certificate that signs the Chain of trust.
- When CA needs to get a new chain (for example, because of upgrade from SHA-1 to SHA-256), they just increment the generation number.
- This is good because obsolete certificates can be better identified.
:END:
** TODO Illumio Security
** TODO DEVSECOPS

* WIP Languages & programming                                        :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: LANGUAGES
:END:
** Functional Programming                                           :TOPIC:
*** Lambda Calculus                                                 :TOPIC:
**** α-conversion
- changing bound variables
**** β-reduction
- applying functions to their arguments;
**** η-reduction
- which captures a notion of extensionality.
*** Patterns
**** Monoid
**** Functor
**** Applicative
**** Monad
**** Kleisli Functor
**** Optics
***** Lenses
***** Prisms
**** Recursion Schemes
***** catamorphisms
***** anamorphisms
***** hylomorphisms
***** paramorphisms

***** Persistent data structure - Chris Okasaki
**** Immutability                                                  :TOPIC:
** Object Oriented Programming                                      :TOPIC:
*** Polymorphism
*** Gof Design Patterns
**** Abstract Factory 
**** Singleton
** ReasonML                                                          :TOPIC:
** JavaScript                                                       :TOPIC:
*** what is IIFE?                                                :QUESTION:
- An Immediately Invoked Function Expression is a good way at protecting the scope of your function and the variables within it.
*** inheritance model of JS
**** What is template based inheritance
*** hoisting
*** event loop
*** promisses
*** observables
*** RxJS
*** JS modular system
** TypeScript                                                        :TOPIC:
** Babel
** Java                                                              :TOPIC:
*** Basic Java
**** hashCode()
***** is this code wrong? yes / no / why                       :QUESTION:
Imagine you replace all haskCode implementation by this - what will happen
#+begin_src java
@Override
public final int hashCode() {
    int result = 17;
    return result;
}
#+end_src
**** hashCode vs equals()                                       :QUESTION:
**** what is a contract?                                        :QUESTION:
**** Java Collections Framework:
***** what is a difference between List vs Set vs Map          :QUESTION:
***** what is the difference ArrayList vs LinkedList           :QUESTION:
**** StringBuilder vs StringBuffer vs String
**** Can we have static method in the interface?                :QUESTION:
:ANSWER:
- Yes, we can have static method in the interface from Java 8.
:END:
****  You have a list of Custom objects? How can you sort them? :QUESTION:
:ANSWER:
You need to use Comparable or Comparator interface to sort list of custom objects.
:END:
**** How to create thread safe Singleton in Java                :QUESTION:
:ANSWER:
- use double checked locking
- use class loader
- use enum
- Read more: https://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html#ixzz6Y1Y1v8C1
:END:
**** Difference between List and Set in Java?                   :QUESTION:
:ANSWER:
- hint: List is ordered and allows duplicate. Set is unordered and doesn't allow duplicate elements.
:END:
**** How do you prevent a class from being sub-classed in Java? :QUESTION:
:ANSWER:
- just make its constructor private
:END:
**** Difference between throw and throws keyword in Java?       :QUESTION:
:ANSWER:
- throws declare what exception a method can throw in case of error but throw keyword actually throws an exception. 
- See Java Fundamentals: Exception Handling to learn more about Exception handling in Java. 
:END:
**** Difference between Iterator and Enumeration in Java?       :QUESTION:
:ANSWER:
- Iterator also gives you the ability to remove an element while iterating while Enumeration doesn't allow that.
:END:
**** What is IdentityHashMap in Java?  :QUESTION:
:ANSWER:
- A Map, which uses  the == equality operator to check equality instead of the equals() method.
:END:
**** What is String pool in Java?  :QUESTION:
:ANSWER:
- A pool of String literals. Remember it's moved to heap from perm gen space in JDK 7.
:END:
**** Can a Serializable class contain a non-serializable field in Java?  :QUESTION:
:ANSWER:
- Yes, but you need to make it either static or transient.
:END:
**** Difference between this and super in Java?  :QUESTION:
:ANSWER:
- this refers to the current instance while super refers to an instance of the superclass.
:END:
**** Difference between Comparator and Comparable in Java?  :QUESTION:
:ANSWER:
- Comparator defines custom ordering while Comparable defines the natural order of objects, e.g. the alphabetic order for String. See The Complete Java MasterClass to learn more about sorting in Java. 
:END:
**** BigDecimal vs float                                        :QUESTION:
**** what is the difference betwen checked and unchecked exception? :QUESTION:
**** Co všechno je špatně na tomto kusu kódu                    :QUESTION:
#+begin_src java
try {
  // ...
} catch (Exception e) {
  log.error("Oh no!", e.getMessage());
}
#+end_src
:ANSWER:
- Zdaleka největší průšvih je, že jsme přišli o stack trace!
  - Musíme nechat zalogovat celý objekt "e" a nebo aspoň přímo jeho ST.
- Chytáme příliš obecný typ, takže nemůžeme nijak rozlišit mezi jednotlivými typy chyb.
- Kombinace chytání příliš obecné chyby a neudělání re-throw, je velmi nebezpečná.
  - Pokud nechceme dělat re-throw, měli bychom chytat jen ten typ, kterého se to týká.
- A další věci, jako stupidní message "Oh no!", atd.
:END:
**** Explain Java 7 ARM (Automatic Resource Managemet) Feature and multi-catch block? :QUESTION:
- If you are catching a lot of exceptions in a single try block, you will notice that catch block code looks very ugly and mostly consists of redundant code to log the error,
- keeping this in mind Java 7 one of the feature was multi-catch block where we can catch multiple exceptions in a single catch block.
- The catch block with this feature looks like below:

#+begin_src java
  catch(IOException | SQLException | Exception ex){
      logger.error(ex);
      throw new MyException(ex.getMessage());
  }
#+end_src
- Most of the time, we use finally block just to close the resources and sometimes we forget to close them and get runtime exceptions when the resources are exhausted.
- These exceptions are hard to debug and we might need to look into each place where we are using that type of resource to make sure we are closing it.
- So java 7 one of the improvement was try-with-resources where we can create a resource in the try statement itself and use it inside the try-catch block.
- When the execution comes out of try-catch block, runtime environment automatically close these resources.
- Sample of try-catch block with this improvement is:

#+begin_src java
  try (MyResource mr = new MyResource()) {
      System.out.println("MyResource created in try-with-resources");
  } catch (Exception e) {
      e.printStackTrace();
  }
#+end_src
**** TODO JPA
**** TODO Generics
**** TODO Java 9 - project jigsaw
**** TODO QueryDSL
**** WIP Maven
***** Jaký je rozdíl mezi <dependencies> a <dependencyManagement>? :QUESTION:
:ANSWER:
- dependencyManagement má smysl je v multi-module projektu, konkrétně v otcovském pomu.
- Používá se pro deklarování dependencí a jejich scopů a verzí a každý sub-modul si pak jen řekne, které z nich chce používat (a už nemusí deklarovat scope a verzi).
- dependencies v otcovském pomu znamenají, že každý sub-modul všechny takové dependence automaticky dostane.
- Používá se to např. pro testovací balíky nebo nějaké velmi obecně použitelné commons balíky a jiné pomocné tooly jako Lombok.
:END:
***** K čemu se používá scope provided?                        :QUESTION:
:ANSWER:
- Jde o dependence, které chceme při kompilaci, ale nechceme na runtimu
- Většinou jde o dependence, které nám v JavaEE poskytne aplikační server
- Nebo o tooly jako Lombok, které potřebujeme při kompilaci a nepotřebujeme na runtimu
:END:
**** TODO Gradle
*** Spring & Spring Boot
:PROPERTIES:
:lerning:  https://www.baeldung.com/spring-interview-questions
:END:
**** Jaký je rozdíl mezi JavaEE a Springem?                     :QUESTION:
- JavaEE je standard, který potřebuje aplikační server (JBoss, WebSphere, etc.) jakožto implementaci a runtime prostředí.
- Spring je framework, který roztáčí vlastní Spring Context, což je taková obdoba kontejneru v JavaEE a v něm všechno běží.
**** Difference between spring and spting boot                 :QUESTION:
**** Co přinesl Spring Boot do Spring ekosystému?               :QUESTION:
:ANSWER:
- Strašně zjednodušený start aplikace.
- Vše je velmi opinionated a není potřeba napsat ani jednu řádku konfigurace, protože všechno má nějaký "rozumný default".
- Aplikace může být standalone JAR proces, WAR nebo JAR s embedded Tomcatem.
- V každém případě je to one liner.
- Plus mnoho "starter" dependencí, kterými jde snadno přidat další moduly a tooly tímto opinionated stylem.
:END:
**** Jaký je hlavní rozdíl v transaction handlingu mezi JavaEE (od verze 3) a Springem? :QUESTION:
:ANSWER:
- JavaEE to má implicitní a Spring explicitní
- V JavaEE deklarujeme EJB a ta má všechny své public metody automaticky v transakci v nějakém defaultním módu
- Ve Springu deklarujeme beanu nějakého typu a automaticky nikdy žádné transakce nemá.
- Zapínáme si je explicitně pomocí anotace.
:END:
**** How Would You Enable Transactions in Spring and What Are Their Benefits? :QUESTION:
:ANSWER:
There are two distinct ways to configure Transactions:
- with *annotations* or
- by using *Aspect Oriented Programming* (AOP)  each with their advantages.

The benefits of using Spring Transactions, according to the official docs, are:

- Provide a consistent programming model across different transaction APIs such as JTA, JDBC, Hibernate, JPA, and JDO
- Support declarative transaction management
- Provide a simpler API for programmatic transaction management than some complex transaction APIs such as JTA
- Integrate very well with Spring's various data access abstractions
:END:
**** What is the difference betweek JPA and Hibernate?          :QUESTION:
:ANSWER:
- JPA is a Data Access Abstraction used to reduce the amount of boilerplate code
- Hibernate is an implementation of Java Persistence API and offers benefits of loose coupling
:END:
**** Can use jetty instead of tomcat in spring-boot-starter-web? :QUESTION:
:ANSWER:
- Yes, we can use jetty instead of tomcat in spring-boot-starter-web, by removing the existing dependency and including the following:
#+begin_src xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>
#+end_src
:END:
**** What Is Reactive Programming?                              :QUESTION:
:ANSWER:
- Reactive programming is about:
  - non-blocking,
  - event-driven applications that
  - scale with a small number of threads, with
  - back pressure being a key ingredient that aims to ensure producers don't overwhelm consumers.

- The primary benefits of reactive programming are:

- increased utilization of computing resources on multicore and multi-CPU hardware
- and increased performance by reducing serialization
- Reactive programming is generally event-driven, in contrast to reactive systems, which are message-driven.
- Thus, using reactive programming does not mean we're building a reactive system, which is an architectural style.

However, reactive programming may be used as a means to implement reactive systems if we follow the Reactive Manifesto, which is quite vital to understand.

- Based on this, reactive systems have four important characteristics:
  - Responsive: the system should respond in a timely manner
  - Resilient: in case the system faces any failure, it should stay responsive
  - Elastic: reactive systems can react to changes and stay responsive under varying workload
  - Message-driven: reactive systems need to establish a boundary between components by relying on asynchronous message passing
:END:
**** What Is Spring Webflux?                                    :QUESTION:
:ANSWER:
- Spring WebFlux is Spring's reactive-stack web framework, and it's an alternative to Spring MVC.

- In order to achieve this reactive model and be highly scalable, the entire stack is non-blocking. Check out our tutorial on Spring 5 WebFlux for additional details.
:END:
**** What Are the Mono and Flux Types?                          :QUESTION:
:ANSWER:
- The WebFlux framework in Spring Framework 5 uses Reactor as its async foundation.

- This project provides two core types: Mono to represent a single async value, and Flux to represent a stream of async values.

- They both implement the ~Publisher~ interface defined in the Reactive Streams specification.

Mono implements ~Publisher~ and returns 0 or 1 elements:
#+begin_src java
public abstract class Mono<T> implements Publisher<T> {...}
#+end_src
Also, Flux implements ~Publisher~ and returns N elements:

#+begin_src java
public abstract class Flux<T> implements Publisher<T> {...}
#+end_src
By definition, the two types represent streams, hence they're both lazy, which means nothing is executed until we consume the stream using the subscribe() method. Both types are immutable, therefore calling any method will return a new instance of Flux or Mono.
:END:
**** What Is the Use of Webclient and Webtestclient?            :QUESTION:
:ANSWER:
- *WebClient* is a component in the new Web Reactive framework that can act as a reactive client for performing non-blocking HTTP requests.
  - Being a reactive client, it can handle reactive streams with back pressure, and it can take full advantage of Java 8 lambdas.
  - It can also handle both sync and async scenarios.

- On the other hand, the *WebTestClient* is a similar class that we can use in tests.
  - Basically, it's a thin shell around the WebClient. It can connect to any server over an HTTP connection. It can also bind directly to WebFlux applications using mock request and response objects, without the need for an HTTP server.
:END:
**** What Are the Disadvantages of Using Reactive Streams?      :QUESTION:
:ANSWER:
The major disadvantages of using reactive streams are:

- Troubleshooting a Reactive application is a bit difficult; be sure to check out our tutorial on debugging reactive streams for some handy debugging tips
- There is limited support for reactive data stores, as traditional relational data stores have yet to embrace the reactive paradigm
- There's an extra learning curve when implementing
:END:
**** Is Spring 5 Compatible With Older Versions of Java?        :QUESTION:
:ANSWER:
In order to take advantage of Java 8 features, the Spring codebase has been revamped. This means older versions of Java cannot be used. Hence, the framework requires a minimum of Java 8.
:END:
**** Can We Use Both Web Mvc and Webflux in the Same Application? :QUESTION:
:ANSWER:
- As of now, Spring Boot will only allow either Spring MVC or Spring WebFlux, as Spring Boot tries to auto-configure the context depending on the dependencies that exist in its classpath.
- Also, Spring MVC cannot run on Netty. 
-  Moreover, MVC is a blocking paradigm and WebFlux is a non-blocking style, therefore we shouldn't be mixing both together, as they serve different purposes.
:END:
**** What Is the Role of the @Autowired Annotation?             :QUESTION:
- The @Autowired annotation can be used with fields or methods for injecting a bean by type.
- This annotation allows Spring to resolve and inject collaborating beans into your bean.
**** "Spring 4.3 přinesl constructor-based dependency injection i bez nutnosti anotace Autowired. Jaké jsou výhody a nevýhody takového DI?" :QUESTION:
:ANSWER:
- "Lépe se to testuje - máme větší kontrolu nad dependencemi a můžeme je mockovat dle libosti a velmi snadno.
- Současně tím v testech vynucujeme nějakou inicializaci těchto dependencí. Jinak by klidně mohly být null.
- Je to takový mnohem přirozenější a intuitivnější způsob inicializace v OOP světě.
- Asi jediná nevýhoda: pokud bude dependencí hodně, začne to být trochu nepřehledné."
:END:
*** JavaEE / JakartaEE
**** access intent
***** optimistic vs pessimistic
**** Jaký je rozdíl mezi Java SE a JavaEE                       :QUESTION:
- Java SE se používá hlavně pro nějaké procesy, které se nastartují, provedou nějakou činost a skončí
- JavaEE se používá hlavně pro aplikace, které jsou nasazené na nějakém trvale běžícím serveru a vystavují buď nějaké služby nebo přímo front end.
**** Co je to aplikační server a nějaký příklad                 :QUESTION:
*** Implemetations
**** GraalVM
**** Quarcus
**** AdoptOpenJDK
*** JDBC
*** JMS
 
** TODO Python
** TODO JS on a backend
*** TODO NodeJS                                                     :TOPIC:
** TODO JS environment
*** npm
*** yarn
*** nvm
*** Name soem popular libraries?

** Language theory                                                   :TOPIC:
*** Garbage Collector
*** Type systems
**** strongly typed
**** weakly typed

* WIP Quality and Testing                                            :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: QUALITY
:END:
** TODO Blue green deployment
** TODO AB testing
** TODO Code coverage
** TODO Cyclomatic complexity                                        :TOPIC:
** TODO Code quality                                                 :TOPIC:
** TODO Unit testing
* WIP Core Values                                                    :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: CORE_VALUES
:END:
The moral aspect
** TODO Code of Conduct                                                :TOPIC:
** WIP SW developer responsibility                                   :TOPIC:
- finally the code that was driving the engine in diesel gat was written by someone -> this developer(s) knew what are they doing
  - 
* WIP Information Sources                                            :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: INFORMATION_SOURCES
:END:
- where to learn, what to read and follow
** InfoQ
** Coding Blocks
** SE-Radio
* WIP Big Names                                                      :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: BIG_NAMES
:END:
- whom to follow
** TODO Bartosz Milewski
** TODO Venkat Subramaniam
** TODO Trisha Gee
** TODO Kevlin Henney
** TODO Brian Goetz
** TODO Troy HUNT
** TODO Scott Meyers
** TODO Erik Meijer
** TODO Edward Kmett
** TODO Chris Allen
** TODO Martin Fowller
** TODO Martin Kleppmann 
:PROPERTIES:
:book:     https://dataintensive.net/
:END:
- Book: Designing data intensive applications
* TODO To integrate :no_export:

- tiller

- https://haydenjames.io/linux-commands-frequently-used-by-linux-sysadmins-part-1
- https://jeremiahflaga.github.io/2017/06/03/most-important-design-guideline-of-scott-myers/
- http://site.icu-project.org/
- https://www.softwaretestinghelp.com/git-interview-questions/
- https://iqsanswers.com/postgresql-interview-questions-answers/
- https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/
- https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/
- https://ahmet.im/blog/knative-better-kubernetes-networking/
- https://github.com/ahmetb/kubernetes-network-policy-recipes
- https://ahmet.im/blog/kubecon-2017/
- https://www.illumio.com/
- https://micronaut.io/
- https://docs.solace.com/SDKPerf/SDKPerf.htm
- https://github.com/mjoellnier/micronaut-vs-quarkus
- https://github.com/quarkusio/quarkus
- https://java.libhunt.com/
- https://architectelevator.com/book/
- https://www.enterpriseintegrationpatterns.com/ramblings.html
- https://www.simultrans.com/blog/what-are-.po-files
- https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html
- https://docs.weblate.org/en/latest/admin/addons.html?highlight=.po#update-po-files-to-match-pot-msgmerge
- http://www.chschneider.org/linux/server/openldap.shtml
- https://medium.com/@raghu.icecraft/simple-working-with-ldapsearch-cf6a5986977
- https://linoxide.com/mail/ldapsearch-command-test-ldap-connection/
- https://adoptopenjdk.net/
- https://quarkus.io/
- https://github.com/vaquarkhan/vaquarkhan
- https://java.libhunt.com/
- https://hub.docker.com/r/jboss/keycloak/
- https://docs.nats.io/
- https://github.com/nkatre/Free-DevOps-Books-1
- https://openid.net/2015/05/26/enhancing-oauth-security-for-mobile-applications-with-pkse/
- https://en.wikipedia.org/wiki/Apache_Drill
- https://cloud.google.com/files/BigQueryTechnicalWP.pdf
- https://cloud.google.com/bigquery/streaming-data-into-bigquery
- https://cilium.io/
- https://medium.com/@ruxijitianu/database-version-control-liquibase-versus-flyway-9872d43ee5a4
- https://insights.stackoverflow.com/survey/2020#developer-profile
- https://ldapwiki.com/wiki/Acr_values
- https://www.udemy.com/course/spring-interview-questions-and-answers/
- https://www.edureka.co/blog/interview-questions/spring-boot-interview-questions/
- https://en.wikipedia.org/wiki/Comparison_of_Java_virtual_machines
- https://en.wikipedia.org/wiki/OpenJ9#Garbage_Collector
- https://en.wikipedia.org/wiki/Azul_Systems
- https://en.wikipedia.org/wiki/GraalVM
- https://en.wikipedia.org/wiki/List_of_Java_virtual_machines
- https://dzone.com/articles/choosing-the-right-gc
- https://medium.com/@gacheruevans0/2-tier-vs-3-tier-architecture-26db56fe7e9c
- https://en.wikipedia.org/wiki/IETF_language_tag#cite_note-8
- https://stackoverflow.com/questions/43535693/private-ios-app
- https://emacs.christianbaeuerlein.com/my-org-config.html
- https://www.typescriptlang.org/docs/handbook/advanced-types.html
- https://cloud.google.com/logging
- https://kubernetes.io/docs/tutorials/#services
- https://kubernetes.io/docs/concepts/services-networking/service/
- https://examples.yourdictionary.com/examples-of-hindsight-bias.html
- https://guides.sonatype.com/foundations/devops/principle-based-devops-frameworks/
- https://aws.amazon.com/getting-started/learning-path-hobbyist-developer/
- https://blog.sonatype.com/2010/04/why-nexus-for-the-non-programmer/
- https://en.wikipedia.org/wiki/Pomodoro_Technique
- https://en.wikipedia.org/wiki/X.509
- https://www.dmarcanalyzer.com/dkim/
- https://www.dmarcanalyzer.com/dmarc/
- https://www.dmarcanalyzer.com/spf/
- https://www.npmjs.com/package/@dynatrace/react-native-plugin
- https://astrobiomike.github.io/unix/six-glorious-commands
- https://docs.ksqldb.io/en/latest/developer-guide/syntax-reference/
- https://tapoueh.org/blog/2018/07/postgresql-listen-notify/
- https://editor.swagger.io/
- https://www.nbs-system.com/
- https://crowdsec.net/
- https://www.datawarehouse4u.info/SCD-Slowly-Changing-Dimensions.html
- https://www.baeldung.com/spring-mvc-interview-questions
- https://www.baeldung.com/spring-mvc-interview-questions
- https://archive.fosdem.org/2018/schedule/event/closing_keynote/attachments/slides/2597/export/events/attachments/closing_keynote/slides/2597/FOSDEM_2018_Closing_Keynote.pdf
- https://en.wikipedia.org/wiki/Cache_placement_policies
- https://en.wikipedia.org/wiki/Cache_replacement_policies
- https://docs.oracle.com/javaee/6/tutorial/doc/giwhl.html
- https://weld.cdi-spec.org/
- https://www.journaldev.com/2763/java-8-functional-interfaces
- https://www.journaldev.com/592/java-try-with-resources
- https://www.journaldev.com/2167/java-exception-interview-questions-and-answers
- https://tools.ietf.org/html/rfc6749#section-3.3
- https://www.oauth.com/oauth2-servers/scope/defining-scopes/
- https://docs.apigee.com/api-platform/security/oauth/working-scopes
- https://developer.okta.com/blog/2017/07/25/oidc-primer-part-1
- https://brandur.org/oauth-scope
- https://oauth.net/2/scope/
- https://auth0.com/docs/authorization/which-oauth-2-0-flow-should-i-use
- https://cloudinit.readthedocs.io/en/latest/topics/availability.html
- https://en.wikipedia.org/wiki/ACID
- http://shiroyasha.io/transaction-isolation-levels-in-postgresql.html
- https://stackoverflow.com/questions/13647604/isolation-levels-in-oracle
- https://docs.oracle.com/cd/E19830-01/819-4721/beamv/index.html
- https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation
- https://www.codecademy.com/articles/what-is-cors
- https://www.javatpoint.com/html-interview-questions
- https://github.com/IdentityModel/oidc-client-js/blob/dev/jsrsasign/dist/jsrsasign.js
- https://snyk.io/vuln/npm:jsrsasign@8.0.12
- https://www.mongodb.com/cloud/atlas
- https://tools.ietf.org/id/draft-ietf-httpbis-rfc6265bis-03.html
- https://web.dev/samesite-cookies-explained/
- https://cloud.google.com/stackdriver/pricing#pricing_examples_2
- https://nativecloud.dev/cnn-2020-21/
- https://k3d.io/
- https://www.reddit.com/r/kubernetes/comments/be0415/k3s_minikube_or_microk8s/
- https://helm.sh/docs/topics/charts/#helm
- https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes
- https://aws.amazon.com/ec2/instance-types/
- https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html
- https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
- https://aws.amazon.com/cli/
- https://martinfowler.com/articles/evodb.html
- https://github.com/IdentityModel/oidc-client-js
- https://www.baeldung.com/java-equals-hashcode-contracts
- https://gethue.com/
- https://en.wikipedia.org/wiki/Apache_Hadoop
- https://spark.apache.org/
- https://hive.apache.org/
- https://hbase.apache.org/
- 
- 
- 
- 


