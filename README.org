#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-bigblow.setup
#+BEGIN_COMMENT
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+END_COMMENT
#+BEGIN_COMMENT
#+OPTIONS: html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-style.css" />
#+END_COMMENT
#+OPTIONS: d:t  prop:t tags:t |:t
#+OPTIONS: H:1 num:1 toc:t ^:nil


* Architecture & Design                                              :DOMAIN:
** DDD                                                             :TOPIC:
*** bounded context                                               :TOPIC:
*** ubiquotous language                                           :TOPIC:
*** Entity and Value Object                                       :TOPIC:
** Data architecture and tools
*** background
**** ACID
***** What does ti mean?                                       :QUESTION:
:ANSWER:
- atomicity
- consistency
- isolation
- durability
:END:
**** BASE
***** what does it mean?                                       :QUESTION:
:ANSWER:
- Basic Availability
- Soft-state
- Eventual consistency
:END:
**** ORM
***** whatit is                                                :QUESTION:
***** object relation impedance mismatch                       :QUESTION:
***** bottom up                                                :QUESTION:
***** tom down                                                 :QUESTION:
***** meet in the middle                                       :QUESTION:
**** CAP theorem
***** Beyond CAP database systems
**** Wall: Write Ahead Logs
***** what it is good for

**** eventual consistency
**** Multi master replication
**** OLAP vs OLTP
**** slowly moving dimensions
**** Backup strategy
*** SQL
**** inner vs outher join
**** partitionning
*** Distributed consensus: 
**** Paxos 
**** Raft 
**** Zab
*** Transactions
**** transaction problems that are prevented by isolation:
***** What are they and what they mean?
:ASWER:
- Dirty reads
- non-repeatable reads
- phantom reads
:END:
**** JDBC transaction isolation levels
***** what are they and what they prevent from?
:ANSWER:
- TRANSACTION_READ_UNCOMMITTED
  - Dirty reads, non-repeatable reads and phantom reads can occur.
- TRANSACTION_READ_COMMITTED
  - Dirty reads are prevented; non-repeatable reads and phantom reads can occur.
- TRANSACTION_REPEATABLE_READ
  - Dirty reads and non-repeatable reads are prevented; phantom reads can occur.
- TRANSACTION_SERIALIZABLE
  - Dirty reads, non-repeatable reads and phantom reads are prevented. 
:END:
**** ANSI/ISO levels - 
***** what they are
:ANSWER:
- serializable
- repeatable read
- read committed
- read uncommitted
:END:
***** define some
:ANSWER:
- The Serializable isolation level guarantees that concurrent transactions run as they would if you would run sequentially one by one in order.
- One step weaker is the Read Repeatable isolation level that allows Phantom Reads to happen in the transaction. Contrary to transactions running in the Serializable mode, the set of rows that is returned by two consecutive select queries in a transaction can differ. This can happen if another transaction adds or removes rows from the table we are querying.
- Even weaker is the Read Commited isolation level. Two consecutive select statements in a transaction can return different data. Contrary to the Read Repeatable level, this level allows not only the set of rows to change, but also the data that those rows contain. This can happen if another transaction modifies the rows.
- The weakest isolation level is Read Uncommitted where dirty reads can occur. That means that non-committed changes from other transactions can affect a transaction.
:END:
**** ORACLE:
:ANSWER:
- READ COMMITTED (the default)
- SERIALIZABLE.
  - that what Oracle call SERIALIZABLE is actually snapshot isolation.
:END:
**** PostgreSQL
*** Tools
**** Big Table
**** Big Query
**** Elastic Search
***** Bloom Filter
**** MongoDB
**** Apache Drill
** Messaging
*** queue
*** topics
*** message delivery mode: 
- at least once at most once exactly once
** HTTP Family
*** HTTP
**** What is the use of Accept and Content-Type Headers in HTTP Request? :QUESTION:
:ANSWER:
- Accept headers:
  - tells web service what kind of response client is accepting, so if a web service is capable of sending response in XML and JSON format and client sends Accept header as application/xml then XML response will be sent. For Accept header application/json, server will send the JSON response.
- Content-Type header:
  - is used to tell server what is the format of data being sent in the request. If Content-Type header is application/xml then server will try to parse it as XML data. This header is useful in HTTP Post and Put requests.
:END:
**** What is Server-Sent Events  (SSE)                          :QUESTION:
:ANSWER:
- is a standard describing how servers can initiate data transmission towards clients once an initial client connection has been established.
- They are commonly used to send message updates or continuous data streams to a browser client
  - designed to enhance native, cross-browser streaming through a JavaScript API called EventSource,
    - through which a client requests a particular URL in order to receive an event stream.
:END:
*** REST
**** What are the HTTP methods supported by REST?               :QUESTION:
:ANSWER:
HTTP methods supported by REST are:

| GET     | It requests a resource at the request URL. It should not contain a request body as it will be discarded. Maybe it can be cached locally or on the server. |
| POST    | It submits information to the service for processing; it should typically return the modified or new resource                                             |
| PUT     | At the request URL it update the resource                                                                                                                 |
| DELETE  | At the request URL it removes the resource                                                                                                                |
| OPTIONS | It indicates which techniques are supported                                                                                                               |
| HEAD    | About the request URL it returns meta information                                                                                                         |
:END:

**** What is the purpose of HTTP Status Code?                   :QUESTION:
:ANSWER:
HTTP Status code are standard codes and refers to predefined status of task done at server. For example, HTTP Status 404 states that requested resource is not present on server.

Consider following status codes:
| 200 | OK                    | shows success.                                                                                                                                     |
| 201 | CREATED               | when a resource is successful created using POST or PUT request. Return link to newly created resource using location header.                      |
| 304 | NOT MODIFIED          | used to reduce network bandwidth usage in case of conditional GET requests. Response body should be empty. Headers should have date, location etc. |
| 400 | BAD REQUEST           | states that invalid input is provided e.g. validation error, missing data.                                                                         |
| 401 | FORBIDDEN             | states that user is not having access to method being used for example, delete access without admin rights.                                        |
| 404 | NOT FOUND             | states that method is not available.                                                                                                               |
| 409 | CONFLICT              | states conflict situation while executing the method for example, adding duplicate entry.                                                          |
| 500 | INTERNAL SERVER ERROR | states that server has thrown some exception while executing the method.                                                                           |
:END:
**** What is statelessness in RESTful Webservices?              :QUESTION:
:ANSWER:
- As per REST architecture, a RESTful web service should not keep a client state on server.
- This restriction is called statelessness.
- It is responsibility of the client to pass its context to server and then server can store this context to process client's further request.
- For example, session maintained by server is identified by session identifier passed by the client.
:END:
**** what is the difference between PUT and POST?               :QUESTION:

:ANSWER:
- PUT puts a file or resource at a particular URI and exactly at that URI. If there is already a file or resource at that URI, PUT changes that file or resource. If there is no resource or file there, PUT makes one
- POST sends data to a particular URI and expects the resource at that URI to deal with the request. The web server at this point can decide what to do with the data in the context of specified resource
- PUT is idempotent meaning, invoking it any number of times will not have an impact on resources.
- However, POST is not idempotent, meaning if you invoke POST multiple times it keeps creating more resources
:END:

** micro-service-architecture
** Enterprise Architecture Integration Patterns
*** orchestration
*** choreography
** Event Sourcing
** CQRS
** CRUD
** Pragmatic Design principes
*** DRY                                                           :TOPIC:
*** KISS                                                          :TOPIC:
*** YAGNI                                                         :TOPIC:
*** open-close principal                                          :TOPIC:
*** High cohesion                                                 :TOPIC:
*** Low coupling                                                  :TOPIC:
**** What is temporal coupling?                                 :QUESTION:
* Project Process Documentation                                      :DOMAIN:
** Scrum                                                             :TOPIC:
** Kanban                                                            :TOPIC:
** XP
** Lean
** Jira
** Confluence
** MOSCOW
** DoD
** DoR

** Uml
** C4
** Org42
* Cloud                                                              :DOMAIN:
** Cloud native architecture
** IaaS
** PaaS
** SaaS
** FINOPS
*** data at rest cost
*** transfer cost
*** cpu cost
*** 
** DEVSECOPS
** storage:
*** S3
*** GCS bucket
**** api
**** what it is good for
*** min.io
* DEVOPS / SRE                                                       :DOMAIN:
** Linux
*** ssh how to create trust between computers
*** awk / sed / grep / bash / tail / head
*** rsync
*** mount
*** ls / ps / htop
*** bash                                                          :TOPIC:
**** co je to here doc?                                         :QUESTION:
*** co je to regexp
*** list open ports
*** iptables
*** BPF
*** list open files
*** stdin stdout stderr
*** NFS
*** file types: 
**** block device
**** character device
**** named pipe
**** symlink
*** /etc/nsswitch.conf
*** /etc/resolv.conf
*** ip
#+begin_src bash
ip addr sh
ip route sh
#+end_src
** Tools
*** Git
**** TODO pull-request
**** TODO cherry pick
**** TODO flow
**** TODO git push
**** TODO rebase vs merge - semantical and syntactical diff
**** TODO stash
*** Docker
**** TODO dockerhub :-)
**** TODO docker file
**** TODO docker image
**** TODO docker compose
**** TODO docker swarm
**** TODO linux namespaces 
**** TODO cgroups
**** TODO OCI
**** TODO volumes,
**** TODO networks
**** TODO BuildKit

*** K8S / Kubernetes: 
**** helm
**** chart
**** template
**** cluster
**** pod
**** node
**** service mesh
**** ingress controller
**** ingress and exgress?
**** etcd
**** secret
**** operator
**** CRD / Custom Resources
:answer:
- A resource is an endpoint in the Kubernetes API that stores a collection of API objects of a certain kind; for example, the built-in pods resource contains a collection of Pod objects.
- A custom resource is an extension of the Kubernetes API that is not necessarily available in a default Kubernetes installation. It represents a customization of a particular Kubernetes installation. However, many core Kubernetes functions are now built using custom resources, making Kubernetes more modular.
- Custom resources can appear and disappear in a running cluster through dynamic registration, and cluster admins can update custom resources independently of the cluster itself. Once a custom resource is installed, users can create and access its objects using kubectl, just as they do for built-in resources like Pods.
:end:
**** liveness/readines probes
**** kubectl
**** CNCF

*** Terraform
**** resource
**** module
**** state
**** backend
*** Chef
*** Puppet
*** Ansible
*** Cloud Formation
*** Hashicorp consul
*** Hashicorp vault
*** zookeeper
*** kibana
*** graphana
*** ELK
*** DynaTrace
*** Piwik
** Observability
*** 3 pillars
**** logs
**** metrics
**** traces
*** Tail Latency
* Web Front End                                                      :DOMAIN:
** React
*** React 
*** React Native
*** react-hooks
** HTML
*** Chrome Development Tools
*** HTML5 Layout 
:ANSWER:
#+begin_src html
<header> It is used to define a header for a document or a section.
<nav> It is used to define a container for navigation links
<section> It is used to define a section in a document
<article> It is used to define an independent, self-contained article
<aside> It is used to define content aside from the content (like a sidebar)
<footer> It is used to define a footer for a document or a section
#+end_src
:END:
*** What is iframe good for?                                     :QUESTION:
:ANSWER:
An iframe is used to display a web page within a web page.
Syntax:
#+begin_src html
<iframe src="URL"></iframe>  
#+end_src
Example:
#+begin_src html
<iframe src="demo_iframe.html" width="200px" height="200px"></iframe>  
#+end_src
Target to a link:
#+begin_src html
<iframe src="http://www.javatpoint.com" name="iframe_a"></iframe>  
#+end_src
:END:
** CSS
*** Less
*** Sass
** CORS
:PROPERTIES:
:lerning:  https://www.codecademy.com/articles/what-is-cors
:END:
*** why is CORS necessary?                                       :QUESTION:
*** How Does CORS Manage Requests From External Resources?       :QUESTION:
*** What http headers were added by CORS?                        :QUESTION:
:ANSWER:
#+begin_src html
Access-Control-Allow-Origin
Access-Control-Allow-Credentials
Access-Control-Allow-Headers
Access-Control-Allow-Methods
Access-Control-Expose-Headers
Access-Control-Max-Age
Access-Control-Request-Headers
Access-Control-Request-Method
Origin
#+end_src
:END:
** The Elm Architecture (TEA)
* IT+CS                                                              :DOMAIN:
** bit / byte / endian / float
*** XOR, OR, AND, Shift (logical vs aritmetic)
*** mantisa exponent jednickovy a dvojkovy doplnek
** TCP/IP
*** IP address / netmask
*** CIDR
** Unicode
*** What is unicode
*** utf-8
*** ASCII
*** EBCDIC
** XML JSON YAML ...
*** yaml
*** json
*** xml

** Code complexity O notation
** Amortized complexity

* Security:                                                          :DOMAIN:
** Oauth2/OIDC
*** grant (flow) types:
**** Authorization Code Flow
**** Client Credentials Flow
**** Device Code
**** Refresh Token
**** PKCE
**** (Implicit Flow)
**** (Password Grant)
*** Scope
:answer:
A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf. 
Often, applications will want to make use of the information that has already been created in an online resource.
To do so, the application must ask for authorization to access this information on a user’s behalf. 
When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs,
and the authorization server uses the Scope parameter to respond with the access that was actually granted.
:end:
** LDAP
*** object class
**** inetOrgPerson
*** OID
*** CN, DN, SN,
** OWASP top 10 2017
*** A1:2017-Injection
*** A2:2017-Broken Authentication
*** A3:2017-Sensitive Data Exposure
*** A4:2017-XML External Entities (XXE)
*** A5:2017-Broken Access Control
*** A6:2017-Security Misconfiguration
*** A7:2017-Cross-Site Scripting (XSS)
*** A8:2017-Insecure Deserialization
*** A9:2017-Using Components with Known Vulnerabilities
*** A10:2017-Insufficient Logging & Monitoring
** Ciphers
*** Block Ciphers
**** ECB, CBC, OFB, CFB, CTR  - what they are
:PROPERTIES:
:study:    https://www.highgo.ca/2019/08/08/the-difference-in-five-modes-in-the-aes-encryption-algorithm/
:END:
**** AES
**** DES
*** Hash
***** base64
*** symetricka sifra
*** asymetricka sifra
** bastillion.io
** PKI
** X509
*** Why does GoDaddy have four different certificate chain, G2, G3, G4? :QUESTION:
:ANSWER:
- "G" stands for Root certificates generation.
- Basically, it identifies the generation (version) of a Root certificate that signs the Chain of trust.
- When CA needs to get a new chain (for example, because of upgrade from SHA-1 to SHA-256), they just increment the generation number.
- This is good because obsolete certificates can be better identified.
:END:
* Languages & programming:                                           :DOMAIN:
** Functional Programming                                           :TOPIC:
*** Lambda Calculus                                                 :TOPIC:
**** α-conversion
- changing bound variables
**** β-reduction
- applying functions to their arguments;
**** η-reduction
- which captures a notion of extensionality.
*** Patterns
**** Monoid
**** Functor
**** Applicative
**** Monad
**** Kleisli Functor
**** Optics
***** Lenses
***** Prisms
**** Recursion Schemes
***** catamorphisms
***** anamorphisms
***** hylomorphisms
***** paramorphisms

***** Persistent data structure - Chris Okasaki
**** Immutability                                                  :TOPIC:
** Object Oriented Programming                                      :TOPIC:
*** Polymorphism
*** Gof Design Patterns
**** Abstract Factory 
**** Singleton
** ReasonML                                                          :TOPIC:
** Java Script                                                       :TOPIC:
*** co je to iife
*** inheritance model of JS
*** hoisting
*** event loop
*** promisses
*** observables
*** RxJS
*** JS modular system
** Java                                                              :TOPIC:
*** Basic Java
**** hashCode()
***** is this code wrong? yes / no / why                       :QUESTION:
Imagine you replace all haskCode implementation by this - what will happen
#+begin_src java
@Override
public final int hashCode() {
    int result = 17;
    return result;
}
#+end_src
**** hashCode vs equals()
**** what is a contract?                                        :QUESTION:
**** Java Collections Framework:
***** what is a difference between List vs Set vs Map          :QUESTION:
***** what is the difference ArrayList vs LinkedList           :QUESTION:
**** StringBuilder vs StringBuffer vs String
**** Can we have static method in the interface?                :QUESTION:
:ANSWER:
- Yes, we can have static method in the interface from Java 8.
:END:
****  You have a list of Custom objects? How can you sort them? :QUESTION:
:ANSWER:
You need to use Comparable or Comparator interface to sort list of custom objects.
:END:
**** How to create thread safe Singleton in Java                :QUESTION:
:ANSWER:
- use double checked locking
- use class loader
- use enum
- Read more: https://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html#ixzz6Y1Y1v8C1
:END:
**** Difference between Listand Set in Java?                    :QUESTION:
:ANSWER:
- hint: List is ordered and allows duplicate. Set is unordered and doesn't allow duplicate elements.
:END:
**** How do you prevent a class from being sub-classed in Java? :QUESTION:
:ANSWER:
- just make its constructor private
:END:
**** Difference between throw and throws keyword in Java?
:ANSWER:
- throws declare what exception a method can throw in case of error but throw keyword actually throws an exception. 
- See Java Fundamentals: Exception Handling to learn more about Exception handling in Java. 
:END:
**** Difference between Iterator and Enumeration in Java?
:ANSWER:
- Iterator also gives you the ability to remove an element while iterating while Enumeration doesn't allow that.
:END:
**** What is IdentityHashMap in Java?  :QUESTION:
:ANSWER:
- A Map, which uses  the == equality operator to check equality instead of the equals() method.
:END:
**** What is String pool in Java?  :QUESTION:
:ANSWER:
- A pool of String literals. Remember it's moved to heap from perm gen space in JDK 7.
:END:
**** Can a Serializable class contain a non-serializable field in Java?  :QUESTION:
:ANSWER:
- Yes, but you need to make it either static or transient.
:END:
**** Difference between this and super in Java?  :QUESTION:
:ANSWER:
- this refers to the current instance while super refers to an instance of the superclass.
:END:
**** Difference between Comparator and Comparable in Java?  :QUESTION:
:ANSWER:
- Comparator defines custom ordering while Comparable defines the natural order of objects, e.g. the alphabetic order for String. See The Complete Java MasterClass to learn more about sorting in Java. 
:END:
**** Generics
**** Java 9 - project jigsaw
**** BigDecimal vs float
**** Java exception handling                                       :TOPIC:
***** what is the difference betwen checked and unchecked exception? :QUESTION:
***** Co všechno je špatně na tomto kusu kódu                  :QUESTION:
#+begin_src java
try {
  // ...
} catch (Exception e) {
  log.error("Oh no!", e.getMessage());
}
#+end_src
:ANSWER:
- Zdaleka největší průšvih je, že jsme přišli o stack trace!
  - Musíme nechat zalogovat celý objekt "e" a nebo aspoň přímo jeho ST.
- Chytáme příliš obecný typ, takže nemůžeme nijak rozlišit mezi jednotlivými typy chyb.
- Kombinace chytání příliš obecné chyby a neudělání re-throw, je velmi nebezpečná.
  - Pokud nechceme dělat re-throw, měli bychom chytat jen ten typ, kterého se to týká.
- A další věci, jako stupidní message "Oh no!", atd.
:END:
**** JPA
**** QueryDSL
**** Maven
***** Jaký je rozdíl mezi <dependencies> a <dependencyManagement>? :QUESTION:
:ANSWER:
- dependencyManagement má smysl je v multi-module projektu, konkrétně v otcovském pomu.
- Používá se pro deklarování dependencí a jejich scopů a verzí a každý sub-modul si pak jen řekne, které z nich chce používat (a už nemusí deklarovat scope a verzi).
- dependencies v otcovském pomu znamenají, že každý sub-modul všechny takové dependence automaticky dostane.
- Používá se to např. pro testovací balíky nebo nějaké velmi obecně použitelné commons balíky a jiné pomocné tooly jako Lombok.
:END:
***** K čemu se používá scope provided?                        :QUESTION:
:ANSWER:
- Jde o dependence, které chceme při kompilaci, ale nechceme na runtimu
- Většinou jde o dependence, které nám v JavaEE poskytne aplikační server
- Nebo o tooly jako Lombok, které potřebujeme při kompilaci a nepotřebujeme na runtimu
:END:
**** Gradle
*** Spring & Spring Boot
**** Difference between spting abd spting boot                  :QUESTION:
**** Jaký je rozdíl mezi JavaEE a Springem?                     :QUESTION:
- JavaEE je standard, který potřebuje aplikační server (JBoss, WebSphere, etc.) jakožto implementaci a runtime prostředí.
- Spring je framework, který roztáčí vlastní Spring Context, což je taková obdoba kontejneru v JavaEE a v něm všechno běží.
**** Co přinesl Spring Boot do Spring ekosystému?               :QUESTION:
- Strašně zjednodušený start aplikace.
- Vše je velmi opinionated a není potřeba napsat ani jednu řádku konfigurace, protože všechno má nějaký "rozumný default".
- Aplikace může být standalone JAR proces, WAR nebo JAR s embedded Tomcatem.
- V každém případě je to one liner.
- Plus mnoho "starter" dependencí, kterými jde snadno přidat další moduly a tooly tímto opinionated stylem.
**** Jaký je hlavní rozdíl v transaction handlingu mezi JavaEE (od verze 3) a Springem? :QUESTION:
- JavaEE to má implicitní a Spring explicitní
- V JavaEE deklarujeme EJB a ta má všechny své public metody automaticky v transakci v nějakém defaultním módu
- Ve Springu deklarujeme beanu nějakého typu a automaticky nikdy žádné transakce nemá. Zapínáme si je explicitně pomocí anotace.
**** What is the difference betweek JPA and Hibernate?          :QUESTION:
:ANSWER:
- JPA is a Data Access Abstraction used to reduce the amount of boilerplate code
- Hibernate is an implementation of Java Persistence API and offers benefits of loose coupling
:END:
**** Can use jetty instead of tomcat in spring-boot-starter-web? :QUESTION:
:ANSWER:
- Yes, we can use jetty instead of tomcat in spring-boot-starter-web, by removing the existing dependency and including the following:
#+begin_src xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>
#+end_src
:END:
*** JavaEE / JacartaEE
**** access intent
***** optimistic vs pessimistic
**** Jaký je rozdíl mezi Java SE a JavaEE
- Java SE se používá hlavně pro nějaké procesy, které se nastartují, provedou nějakou činost a skončí
- JavaEE se používá hlavně pro aplikace, které jsou nasazené na nějakém trvale běžícím serveru a vystavují buď nějaké služby nebo přímo front end.
**** Co je to aplikační server a nějaký příklad
*** Implemetations
**** GraalVM
**** Quarcus
**** AdoptOpenJDK
** NodeJS                                                            :TOPIC:
- npm
- yarn
- nvm
- popular libraries

** Language theory                                                   :TOPIC:
*** Garbage Collector
*** Type systems
**** strongly typed
**** weakly typed
* Quality and Testing                                                :DOMAIN:
** Blue green deployment
** Code coverage
** Cyclomatic complexity                                           :TOPIC:
** Code quality                                                    :TOPIC:
** Antifragile architecture
** Unit testing
** AB testing



