#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readthedoc.setup
#+OPTIONS: d:t  prop:t tags:t |:t
#+OPTIONS: H:2 num:1 toc:t ^:nil


* Architecture & Design
** DDD                                                             :SUBJECT:
*** bounded context                                               :SUBJECT:
*** ubiquotous language                                           :SUBJECT:
*** Entity and Value Object                                       :SUBJECT:
** Data architecture and tools
*** ACID
**** What does ti mean?
***** answer
- atomicity
- consistency
- isolation
- durability
*** BASE
**** what does it mean?
***** answer
- Basic Availability
- Soft-state
- Eventual consistency
*** SQL
**** inner vs outher join
**** partitionning
*** ORM
*** CAP theorem
*** Beyond CAP database systems
*** Wall: Write Ahead Logs
**** what it is good for
*** Distributed consensus: 
**** Paxos 
**** Raft 
**** Zab
*** Transactions
**** transaction problems that are prevented by isolation:
***** What are they and what they mean?
****** answer:
- Dirty reads
- non-repeatable reads
- phantom reads
**** JDBC transaction isolation levels
***** what are they and what they prevent from?
****** answer
- TRANSACTION_READ_UNCOMMITTED
  - Dirty reads, non-repeatable reads and phantom reads can occur.
- TRANSACTION_READ_COMMITTED
  - Dirty reads are prevented; non-repeatable reads and phantom reads can occur.
- TRANSACTION_REPEATABLE_READ
  - Dirty reads and non-repeatable reads are prevented; phantom reads can occur.
- TRANSACTION_SERIALIZABLE
  - Dirty reads, non-repeatable reads and phantom reads are prevented. 
**** ANSI/ISO levels - 
***** what they are
:ANSWER:
- serializable
- repeatable read
- read committed
- read uncommitted
:END:
***** define some
:ANSWER:
- The Serializable isolation level guarantees that concurrent transactions run as they would if you would run sequentially one by one in order.
- One step weaker is the Read Repeatable isolation level that allows Phantom Reads to happen in the transaction. Contrary to transactions running in the Serializable mode, the set of rows that is returned by two consecutive select queries in a transaction can differ. This can happen if another transaction adds or removes rows from the table we are querying.
- Even weaker is the Read Commited isolation level. Two consecutive select statements in a transaction can return different data. Contrary to the Read Repeatable level, this level allows not only the set of rows to change, but also the data that those rows contain. This can happen if another transaction modifies the rows.
- The weakest isolation level is Read Uncommitted where dirty reads can occur. That means that non-committed changes from other transactions can affect a transaction.
:END:
**** ORACLE:
***** answer
- READ COMMITTED (the default)
- SERIALIZABLE.
  - that what Oracle call SERIALIZABLE is actually snapshot isolation.
**** PostgreSQL
*** eventual consistency
*** big table
*** big query
*** OLAP vs OLTP
*** slowly moving dimensions
*** Elastic Search
**** Bloom Filter
*** MongoDB
*** Apache Drill
*** Multi master replication
*** Backup strategy
** Messaging
*** queue
*** topics
*** message delivery mode: 
- at least once at most once exactly once
** micro-service-architecture
** TODO Enterprise Architecture Integration Patterns
*** orchestration
*** choreography
** Event Sourcing
** CQRS
** CRUD
** Pragmatic Design principes
*** DRY                                                           :SUBJECT:
*** KISS                                                          :SUBJECT:
*** YAGNI                                                         :SUBJECT:
*** open-close principal                                          :SUBJECT:
*** High cohesion                                                 :SUBJECT:
*** Low coupling                                                  :SUBJECT:
* Project Process Documentation
** Scrum                                                           :SUBJECT:
** Kanban                                                          :SUBJECT:
** XP
** Lean
** Jira
** Confluence
** MOSCOW
** DoD
** DoR

** Uml
** C4
** Org42
* Cloud
** Cloud native architecture
** IaaS
** PaaS
** SaaS
** FINOPS
*** data at rest cost
*** transfer cost
*** cpu cost
** DEVSECOPS
** storage:
*** S3
*** GCS bucket
**** api
**** what it is good for
*** min.io
* DEVOPS / SRE
** Linux
*** ssh how to create trust between computers
*** awk / sed / grep / bash / tail / head
*** rsync
*** mount
*** ls / ps / htop
*** bash                                                          :SUBJECT:
**** co je to here doc?                                         :QUESTION:
*** co je to regexp
*** list open ports
*** iptables
*** BPF
*** list open files
*** stdin stdout stderr
*** NFS
*** file types: 
**** block device
**** character device
**** named pipe
**** symlink
*** /etc/nsswitch.conf
*** /etc/resolv.conf
*** ip
#+begin_src bash :output verbatim
ip addr sh
ip route sh
#+end_src
** Tools
*** Git
**** TODO pull-request
**** TODO cherry pick
**** TODO flow
**** TODO git push
**** TODO rebase vs merge - semantical and syntactical diff
**** TODO stash
*** Docker
**** TODO dockerhub :-)
**** TODO docker file
**** TODO docker image
**** TODO docker compose
**** TODO docker swarm
**** TODO linux namespaces 
**** TODO cgroups
**** TODO OCI
**** TODO volumes,
**** TODO networks
**** TODO BuildKit

*** K8S / Kubernetes: 
**** helm
**** chart
**** template
**** cluster
**** pod
**** node
**** service mesh
**** ingress controller
**** ingress and exgress?
**** etcd
**** secret
**** operator
**** CRD / Custom Resources
:answer:
- A resource is an endpoint in the Kubernetes API that stores a collection of API objects of a certain kind; for example, the built-in pods resource contains a collection of Pod objects.
- A custom resource is an extension of the Kubernetes API that is not necessarily available in a default Kubernetes installation. It represents a customization of a particular Kubernetes installation. However, many core Kubernetes functions are now built using custom resources, making Kubernetes more modular.
- Custom resources can appear and disappear in a running cluster through dynamic registration, and cluster admins can update custom resources independently of the cluster itself. Once a custom resource is installed, users can create and access its objects using kubectl, just as they do for built-in resources like Pods.
:end:
**** liveness/readines probes
**** kubectl
**** CNCF

*** Terraform
**** resource
**** module
**** state
**** backend
*** Chef
*** Puppet
*** Ansible
*** Cloud Formation
*** Hashicorp consul
*** Hashicorp vault
*** zookeeper
*** kibana
*** graphana
*** ELK
*** DynaTrace
*** Piwik
** Observability
*** 3 pillars
**** logs
**** metrics
**** traces
*** Tail Latency
* Web Front End
** React
*** TODO React 
*** TODO React Native
*** TODO react-hooks
** HTML
*** Chrome Development Tools
*** HTML5 Layout 
**** answer
- <header>: It is used to define a header for a document or a section.
- <nav>: It is used to define a container for navigation links
- <section>: It is used to define a section in a document
- <article>: It is used to define an independent, self-contained article
- <aside>: It is used to define content aside from the content (like a sidebar)
- <footer>: It is used to define a footer for a document or a section
*** What is iframe good for?
**** answer
An iframe is used to display a web page within a web page.
Syntax:
#+begin_src html :output verbatim
<iframe src="URL"></iframe>  
#+end_src
Example:
#+begin_src html :output verbatim
<iframe src="demo_iframe.html" width="200px" height="200px"></iframe>  
#+end_src
Target to a link:
#+begin_src html :output verbatim
<iframe src="http://www.javatpoint.com" name="iframe_a"></iframe>  
#+end_src
** CSS
*** Less
*** Sass
** CORS
:PROPERTIES:
:lerning:  https://www.codecademy.com/articles/what-is-cors
:END:
*** why is CORS necessary?
*** How Does CORS Manage Requests From External Resources?
*** What http headers were added by CORS?
**** answer
#+begin_src html :output verbatim
Access-Control-Allow-Origin
Access-Control-Allow-Credentials
Access-Control-Allow-Headers
Access-Control-Allow-Methods
Access-Control-Expose-Headers
Access-Control-Max-Age
Access-Control-Request-Headers
Access-Control-Request-Method
Origin
#+end_src
** The Elm Architecture (TEA)
* IT+CS
** bit / byte / endian / float
*** XOR, OR, AND, Shift (logical vs aritmetic)
*** mantisa exponent jednickovy a dvojkovy doplnek
** TCP/IP
*** IP address / netmask
*** CIDR
** Unicode
*** What is unicode
*** utf-8
*** ASCII
*** EBCDIC
** XML JSON YAML ...
*** yaml
*** json
*** xml

** Code complexity O notation
** Amortized complexity

* Functional Programming
** Lambda Calculus                                                 :SUBJECT:
*** α-conversion
- changing bound variables
*** β-reduction
- applying functions to their arguments;
*** η-reduction
- which captures a notion of extensionality.
** Patterns
*** Monoid
*** Functor
*** Applicative
*** Monad
*** Kleisli Functor
*** Optics
**** Lenses
**** Prisms
*** Recursion Schemes
**** catamorphisms
**** anamorphisms
**** hylomorphisms
**** paramorphisms

**** Persistent data structure - Chris Okasaki
*** Immutability                                                  :SUBJECT:

* Security:
** Oauth2/OIDC
*** grant (flow) types:
**** Authorization Code Flow
**** Client Credentials Flow
**** Device Code
**** Refresh Token
**** PKCE
**** (Implicit Flow)
**** (Password Grant)
*** Scope
:answer:
A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf. 
Often, applications will want to make use of the information that has already been created in an online resource.
To do so, the application must ask for authorization to access this information on a user’s behalf. 
When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs,
and the authorization server uses the Scope parameter to respond with the access that was actually granted.
:end:
** LDAP
*** object class
**** inetOrgPerson
*** OID
*** CN, DN, SN,
** OWASP top 10 2017
*** A1:2017-Injection
*** A2:2017-Broken Authentication
*** A3:2017-Sensitive Data Exposure
*** A4:2017-XML External Entities (XXE)
*** A5:2017-Broken Access Control
*** A6:2017-Security Misconfiguration
*** A7:2017-Cross-Site Scripting (XSS)
*** A8:2017-Insecure Deserialization
*** A9:2017-Using Components with Known Vulnerabilities
*** A10:2017-Insufficient Logging & Monitoring
** Ciphers
*** Block Ciphers
**** ECB, CBC, OFB, CFB, CTR  - what they are
:PROPERTIES:
:study:    https://www.highgo.ca/2019/08/08/the-difference-in-five-modes-in-the-aes-encryption-algorithm/
:END:
**** AES
**** DES
*** Hash
***** base64
*** symetricka sifra
*** asymetricka sifra
** bastillion.io
** PKI
** X509

* Languages:
** ReasonML
** Java Script
*** co je to iife
*** inheritance model of JS
*** hoisting
*** event loop
*** promisses
*** observables
*** RxJS
*** JS modular system
** Java
*** hashCode()
**** is this code wrong? yes / no / why                         :QUESTION:
Imagine you replace all haskCode implementation by this - what will happen
#+begin_src java :output verbatim
@Override
public final int hashCode() {
    int result = 17;
    return result;
}
#+end_src
*** hashCode vs equals()
*** contract? in Java 
*** Java Collections Framework:
**** List vs Set vs Map
**** ArrayList vs LinkedList
*** StringBuilder vs StringBuffer vs String
*** Generics
*** Java 9 - project jigsaw
*** JavaEE / JacartaEE
**** access intent
***** optimistic vs pessimistic
*** BigDecimal vs float
*** Spring & Spring Boot
**** Difference between spting abd spting boot
**** Jaký je rozdíl mezi JavaEE a Springem?
- JavaEE je standard, který potřebuje aplikační server (JBoss, WebSphere, etc.) jakožto implementaci a runtime prostředí.
- Spring je framework, který roztáčí vlastní Spring Context, což je taková obdoba kontejneru v JavaEE a v něm všechno běží.
**** Co přinesl Spring Boot do Spring ekosystému?
- Strašně zjednodušený start aplikace.
- Vše je velmi opinionated a není potřeba napsat ani jednu řádku konfigurace, protože všechno má nějaký "rozumný default".
- Aplikace může být standalone JAR proces, WAR nebo JAR s embedded Tomcatem.
- V každém případě je to one liner.
- Plus mnoho "starter" dependencí, kterými jde snadno přidat další moduly a tooly tímto opinionated stylem.
**** Jaký je hlavní rozdíl v transaction handlingu mezi JavaEE (od verze 3) a Springem?
- JavaEE to má implicitní a Spring explicitní
- V JavaEE deklarujeme EJB a ta má všechny své public metody automaticky v transakci v nějakém defaultním módu
- Ve Springu deklarujeme beanu nějakého typu a automaticky nikdy žádné transakce nemá. Zapínáme si je explicitně pomocí anotace.
**** What is the difference betweek JPA and Hibernate?
:ANSWER:
- JPA is a Data Access Abstraction used to reduce the amount of boilerplate code
- Hibernate is an implementation of Java Persistence API and offers benefits of loose coupling
:END:
**** Can use jetty instead of tomcat in spring-boot-starter-web?
:ANSWER:
- Yes, we can use jetty instead of tomcat in spring-boot-starter-web, by removing the existing dependency and including the following:
#+begin_src xml :output verbatim
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>
#+end_src
:END:
*** Jaký je rozdíl mezi Java SE a JavaEE
- Java SE se používá hlavně pro nějaké procesy, které se nastartují, provedou nějakou činost a skončí
- JavaEE se používá hlavně pro aplikace, které jsou nasazené na nějakém trvale běžícím serveru a vystavují buď nějaké služby nebo přímo front end.
*** Co je to aplikační server a nějaký příklad
*** Java exception handling                                       :SUBJECT:
**** what is the difference betwen checked and unchecked exception?
**** Co všechno je špatně na tomto kusu kódu
#+begin_src java :output verbatim
try {
  // ...
} catch (Exception e) {
  log.error("Oh no!", e.getMessage());
}
#+end_src
:ANSWER:
- Zdaleka největší průšvih je, že jsme přišli o stack trace!
  - Musíme nechat zalogovat celý objekt "e" a nebo aspoň přímo jeho ST.
- Chytáme příliš obecný typ, takže nemůžeme nijak rozlišit mezi jednotlivými typy chyb.
- Kombinace chytání příliš obecné chyby a neudělání re-throw, je velmi nebezpečná.
  - Pokud nechceme dělat re-throw, měli bychom chytat jen ten typ, kterého se to týká.
- A další věci, jako stupidní message "Oh no!", atd.
:END:
*** JPA
*** QueryDSL
*** Maven
**** Jaký je rozdíl mezi <dependencies> a <dependencyManagement>?
***** answer
- dependencyManagement má smysl je v multi-module projektu, konkrétně v otcovském pomu.
- Používá se pro deklarování dependencí a jejich scopů a verzí a každý sub-modul si pak jen řekne, které z nich chce používat (a už nemusí deklarovat scope a verzi).
- dependencies v otcovském pomu znamenají, že každý sub-modul všechny takové dependence automaticky dostane.
- Používá se to např. pro testovací balíky nebo nějaké velmi obecně použitelné commons balíky a jiné pomocné tooly jako Lombok.
**** K čemu se používá scope provided?
***** answer
- Jde o dependence, které chceme při kompilaci, ale nechceme na runtimu
- Většinou jde o dependence, které nám v JavaEE poskytne aplikační server
- Nebo o tooly jako Lombok, které potřebujeme při kompilaci a nepotřebujeme na runtimu

*** Implemetations
**** GraalVM
**** Quarcus
**** AdoptOpenJDK
** NodeJS
- npm
- yarn
- nvm
- popular libraries

** Language theory
*** Garbage Collector
*** Type systems
**** strongly typed
**** weakly typed
* Quality and Testing
** Blue green deployment
** Code coverage
** Cyclomatic complexity                                           :SUBJECT:
** Code quality                                                    :SUBJECT:
** Antifragile architecture
** Unit testing
** AB testing
* Object Oriented Programming
** Polymorphism
** Gof Design Patterns
*** Abstract Factory 
*** Singleton

* TODO unsorted
** Gradle

