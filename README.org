#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: d:t  prop:t tags:t |:t


* Architecture
** DDD                                                             :SUBJECT:
*** bounded context                                               :SUBJECT:
*** ubiquotous language                                           :SUBJECT:
*** Entity and Value Object                                       :SUBJECT:
** Messaging
*** queue
*** topics
*** message delivery mode: 
- at least once at most once exactly once
** micro-service-architecture
** Enterprise Architecture Integration Patterns
*** orchestration
*** choreography
* Design principles
** DRY                                                             :SUBJECT:
** KISS                                                            :SUBJECT:
** YAGNI                                                           :SUBJECT:
** open-close principal                                            :SUBJECT:
* project flow
** MOSCOW
** DoD
** DoR

* Linux
** ssh how to create trust between computers
** awk / sed / grep / bash / tail / head
** ls / ps / htop
** bash                                                            :SUBJECT:
*** co je to here doc?                                           :QUESTION:
** co je to regexp
** list open ports
** iptables
** BPF
** list open files
** stdin stdout stderr
** NFS
** file types: 
*** block device
*** character device
*** named pipe
*** symlink
** /etc/nsswitch.conf
** /etc/resolv.conf
* Data
** CAP theorem
** Beyond CAP database systems
** ACID
** BASE
** transaction isolation levels
** eventual consistency
** big table
** big query
** OLAP vs OLTP
** slowly moving dimensions
** Apache Drill .. a jeho kamaradi
** Elastic Search
*** Bloom Filter
** MongoDB
** SQL
*** inner vs outher join
*** partitionning
* Cloud
** IAAS
** FINOPS
** DEVSECOPS
** Cloud native architecture
** storage:
*** S3
*** GCS
*** min.io
* K8S: 
** pod
** node
** service mesh
** ingress and exgress?
** etcd
* DEVOPS: 
** co je to docker, docker file, docker compose
** DEVOPS: co je to cheff pupet, ansible, terraform , cloud formation - co maji spolecneho jaky je mezi nimi rozdil

* DEVOPS / SRE
** Tools
*** Git
**** pull-request
**** cherry pick
**** flow
**** git push
**** rebase vs merge - semantical and syntactical diff
**** stash
*** docker
**** docker file
**** docker compose
*** Chef
*** Puppet
*** Ansible
*** Terraform
*** Cloud Formation
*** hashicorp consul
*** hashicorp vault
*** zookeeper
** Observability
*** 3 pillars
**** logs
**** metrics
**** traces
*** Tail Latency

** kibana
** graphana
** ELK
* FE 
** CORS
** React
*** react-hooks a jak se to pouziva?
*** jaky je rozdil mezi React a React native
** The Elm Architecture (TEA)
* IT: 
** co je to bit 
*** XOR, OR, AND, BitShift
** co je to CIDR co je to netmast
** co je to unicode, utf-8, ASCII, EBCDIC
* Java: 
** Java EE
*** access intent
**** optimistic vs pessimistic
** Java 9 - project jigsaw
** Loom
** Diamond operator
** generics
** Co je to Local-Variable Type inference
** Jaky je rozdil mezi hashCode a equals(), co je to contrakt
** JCF:
*** List, Set
*** ArrayList vs LinkedList
*** StringBuilder vs String Buffer vs String
*** BigDecimal vs float

** TODO Spring
Jako jeho CV je docela impresivní, tak bych asi akorát ověřil, jestli nepřehání. Osobně by mě - čistě z pohledu BE - zajímalo, jestli FAKT zná ten Spring a pokud jo, tak jestli taky zná JavuEE a ideálně i stařičký věcí jako EJB2. To bych teda nebral jako nezbytnou podmínku, spíš jako bonus. Takže za mě hlavně:
Jaký je rozdíl mezi JavaEE a Springem?
JavaEE je standard, který potřebuje aplikační server (JBoss, WebSphere, etc.) jakožto implementaci a runtime prostředí. Spring je framework, který roztáčí vlastní Spring Context, což je taková obdoba kontejneru v JavaEE a v něm všechno běží.
Co přinesl Spring Boot do Spring ekosystému?
Strašně zjednodušený start aplikace. Vše je velmi opinionated a není potřeba napsat ani jednu řádku konfigurace, protože všechno má nějaký "rozumný default". Aplikace může být standalone JAR proces, WAR nebo JAR s embedded Tomcatem. V každém případě je to one liner. Plus mnoho "starter" dependencí, kterými jde snadno přidat další moduly a tooly tímto opinionated stylem.
No a pak všetečný otázky na JavaEE a EJB2 a tak. To už znáš sám líp než já. :wink:

* JS: 
** co je to iife
** inheritance model of JS
** hoisting
** event loop
** promisses
** observables
** RxJS
** JS modular system
* BASICS: 
** co je to yaml json xml jaky je mezi nimi rozdil - zamerte se na vyhody ledniho
* FP: 
** functional programming?
** main properties
** Lambda Calculus
*** α-conversion: 
- changing bound variables;
*** β-reduction: 
- applying functions to their arguments;
*** η-reduction: 
- which captures a notion of extensionality.
** Monoid
** Functor
** Applicative
** Monad
** kleisli functor
** Optics
*** Lenses
*** prisms
** recursion schemes
*** catamorphisms
*** anamorphisms
*** hylomorphisms
*** paramorphisms

* LANG:
** co je to Garbage Collector
** strongly typed languages vs weakly typed
* Security:
** LDAP
*** object class
**** inetOrgPerson
*** iod
*** CN, DN, SN,
** owasp top10
** Bock Ciphers
*** ECB, CBC, OFB, CFB, CTR  - what they are
:PROPERTIES:
:study:    https://www.highgo.ca/2019/08/08/the-difference-in-five-modes-in-the-aes-encryption-algorithm/
:END:
*** AES
*** DES
** Hash
*** base64
** co je to symetricka a asymetricka sifra
** bastillion.io
** PKI
** X509
** Oauth2/OIDC
*** grant types:
**** Authorization Code
**** Client Credentials
**** Device Code
**** Refresh Token
**** PKCE
**** (Implicit Flow)
**** (Password Grant)
*** Scope
:answer:
A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf. 
Often, applications will want to make use of the information that has already been created in an online resource.
To do so, the application must ask for authorization to access this information on a user’s behalf. 
When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs,
and the authorization server uses the Scope parameter to respond with the access that was actually granted.
:end:
* OOP:
** jake znate navrhove vzory?
** popist me Abstract Factory 
** Singleton

* TODO unsorted
** High cohesion
** Low coupling
** Blu green deployment
** Unit testing
** Code coverage
** Cyclomatic complexity                                           :SUBJECT:
** Code quality                                                    :SUBJECT:
** Java exception handling                                         :SUBJECT:
** Immutability                                                    :SUBJECT:
** Persistent data structure - Chris okasaki
** Code complexity O notation
** Amortized complexity
** ip addr sh IP route sh
** Maven
** Gradle
** ReasonML
** Antifragile architecture
** Less
** Sass
** Jira 
** Confluence
** Uml
** C4
** Org42
** Wall
** Paxos raft zab - distributed consensus
** Multi master replycation
** Backup strategy
** Jaký je rozdíl mezi Java a JavaEE
** Pár zvídavých otázek na Javu: equals, hashCode, List vs Set vs Map, klasika...
** Co je to aplikační server a nějaký příklad
** ORM a JPA
** Co jsou to transakce
** Znáš Spring?
