#+BEGIN_COMMENT
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-bigblow.setup
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+END_COMMENT
#+SETUPFILE: ./theme-readtheorg.setup
#+BEGIN_COMMENT
#+OPTIONS: html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-style.css" />
#+END_COMMENT
#+OPTIONS: d:t prop:nil tags:t |:t H:5 num:4 toc:t ^:nil p:nil html-style:nil pri:t
#+EXCLUDE_TAGS: NO_EXPORT
#+EXPORT_FILE_NAME: public/fullstack.html
#+STARTUP:  entitiespretty overview
#+TODO:  TODO WIP | COMPETE OBSOLETE
#+CREATOR: org-mode
#+LANGUAGE: en
#+TITLE: full-stack
#+AUTHOR: Richard Bouska
#+DESCRIPTION: What to know / what to learn
#+ODT_STYLES_FILE: "./OrgOdtStyles.xml"

#+begin_src emacs-lisp :exports none
;;(setq org-odt-content-template-file "./OrgOdtContentTemplate-orig.xml")
(setq org-odt-content-template-file "./OrgOdtContentTemplate.xml")
;;(makunbound 'org-odt-content-template-file)
 #+end_src

#+name: lg-get-props-entry
#+begin_src emacs-lisp :exports none
  (setq
   lg-properties-display-list
   (list '("lg-authors" "Authors" org-link-decode)
     '("lg-consumed" "Seen" identity)
     '("lg-duration" "Duration" identity)
     '("lg-event-date" "Event Date" identity)
     '("lg-group" "Group" identity)
     '("lg-keywords" "Keywords" identity)
     '("lg-quality" "Quality" identity)
     '("lg-source" "Source" identity)
     '("lg-subject" "Subject" identity)
     '("lg-topic" "Topic" identity)
     '("lg-url-1" "Url" identity)
     '("lg-rss" "Rss" identity)
     '("lg-yt-url" "Youtube" identity)
     '("lg-vimeo-url" "Vimeo" identity)
     '("lg-se-radio-url" "SE Radio" identity)
     '("lg-full-stack-radio-url" "Full Stack Radio" identity)
     '("learning_1" "Primary source:" identity)
     '("learning_2" "Learn more:" identity)
     '("learning_3" "Learn more:" identity)
     '("learning_4" "Learn more:" identity)
     '("learning_5" "Learn more:" identity)
     '("learning_6" "Learn more:" identity)
     '("learning_7" "Learn more:" identity)
     '("learning_8" "Learn more:" identity)
     '("learning_9" "Learn more:" identity)
     ))
  ;;-----------------------

  (defun lg-get-props()
    (mapcar
     (lambda (propname)
       (let ((value (org-entry-get (point) (nth 0 propname))))
         (when value
           (list (nth 1 propname) (funcall (nth 2 propname) value )))))
     lg-properties-display-list))
     (lg-get-props)
#+end_src


#+begin_src emacs-lisp :exports none
(defun my/ensure-headline-ids (&rest _)
  "Org trees without a

All non-alphanumeric characters are cleverly replaced with ‘-’.

If multiple trees end-up with the same id property, issue a
message and undo any property insertion thus far.

E.g., ↯ We'll go on a ∀∃⇅ adventure
   ↦  We'll-go-on-a-adventure
"
  (interactive)
  (let ((ids))
    (org-map-entries
     (lambda ()
       (org-with-point-at (point)
         (let ((id (org-entry-get nil "CUSTOM_ID")))
           (unless id
             (thread-last (nth 4 (org-heading-components))
               (s-replace-regexp "[^[:alnum:]']" "-")
               (s-replace-regexp "-+" "-")
               (s-chop-prefix "-")
               (s-chop-suffix "-")
               (setq id))
             (if (not (member id ids))
                 (push id ids)
               (message-box "Oh no, a repeated id!\n\n\t%s" id)
               (undo)
               (setq quit-flag t))
             (org-entry-put nil "CUSTOM_ID" id))))))))
#+end_src

#+RESULTS:
: my/ensure-headline-ids

#+BEGIN_CENTRE
*What is considered a full-stack - Richard's point of view*
 #+END_CENTRE
* WIP Computer Science [0/5]                                         :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: COMPUTER_SCIENCE
:END:
#+call: lg-get-props-entry()
** WIP Number Encoding
:PROPERTIES:
:CUSTOM_ID: NUMBER_ENCODING
:END:
#+call: lg-get-props-entry()
*** OR, AND, XOR, Shift (logical vs arithmetic)
:PROPERTIES:
:CUSTOM_ID: or-and-xor
:END:
*** One's Complement
:PROPERTIES:
:CUSTOM_ID: ones-complement
:END:
*** Two's Complement
:PROPERTIES:
:CUSTOM_ID: twos-complement
:END:
*** BCD encoding
:PROPERTIES:
:CUSTOM_ID: bcd-encoding
:END:
*** Float: (ieee754)
:PROPERTIES:
:CUSTOM_ID: float-ieee754
:END:
**** Explain mantisa, exponent                                  :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Explain-mantisa-exponent
:END:
**** How do you compare two float values?                       :QUESTION:
:PROPERTIES:
:CUSTOM_ID: How-do-you-compare-two-float-values
:END:
**** Explain risk of using floating point in business programming :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Explain-risk-of-using-floating-point-in-business-programming
:END:
*** Endiannes
:PROPERTIES:
:CUSTOM_ID: ENDIANNESS
:learning_1: https://en.wikipedia.org/wiki/Endianness
:END:
#+call: lg-get-props-entry()
- In computing, endianness is the order or sequence of bytes of a word of digital data in computer memory. Endianness is primarily expressed as big-endian (BE) or little-endian (LE). A big-endian system stores the most significant byte of a word at the smallest memory address and the least significant byte at the largest. A little-endian system, in contrast, stores the least-significant byte at the smallest address. Endianness may also be used to describe the order in which the bits are transmitted over a communication channel. Bit-endianess is seldom used in other contexts.
*** binary / octal / hex
:PROPERTIES:
:CUSTOM_ID: binary-octal-hex
:END:
** WIP Text Encodings
:PROPERTIES:
:CUSTOM_ID: Text-Encodings
:END:
*** What is unicode
:PROPERTIES:
:learning_1:  http://www.unicode.org/standard/WhatIsUnicode.html
:CUSTOM_ID: What-is-unicode
:END:
#+call: lg-get-props-entry()

- The Unicode Standard provides a unique number for every character, no matter what platform, device, application or language. It has been adopted by all modern software providers and now allows data to be transported through many different platforms, devices and applications without corruption. Support of Unicode forms the foundation for the representation of languages and symbols in all major operating systems, search engines, browsers, laptops, and smart phonesplus the Internet and World Wide Web (URLs, HTML, XML, CSS, JSON, etc.). Supporting Unicode is the best way to implement ISO/IEC 10646.
- The emergence of the Unicode Standard and the availability of tools supporting it are among the most significant recent global software technology trends.
*** utf-8
:PROPERTIES:
:CUSTOM_ID: utf-8
:END:
*** ASCII
:PROPERTIES:
:CUSTOM_ID: ascii
:END:
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|     |   _0 |   _1 |   _2 |   _3 |   _4 |   _5 |   _6 |   _7 |   _8 |   _9 | _A   | _B   | _C   | _D   | _E   | _F   |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  0_ |  NUL |  SOH |  STX |  ETX |  EOT |  ENQ |  ACK |  BEL |   BS |   HT | LF   | VT   | FF   | CR   | SO   | SI   |
|   0 | 0000 | 0001 | 0002 | 0003 | 0004 | 0005 | 0006 | 0007 | 0008 | 0009 | 000A | 000B | 000C | 000D | 000E | 000F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  1_ |  DLE |  DC1 |  DC2 |  DC3 |  DC4 |  NAK |  SYN |  ETB |  CAN |   EM | SUB  | ESC  | FS   | GS   | RS   | US   |
|  16 | 0010 | 0011 | 0012 | 0013 | 0014 | 0015 | 0016 | 0017 | 0018 | 0019 | 001A | 001B | 001C | 001D | 001E | 001F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  2_ |   SP |    ! |    " |    # |    $ |    % |    & |    ' |    ( |    ) | *    | +    | ,    | -    | .    | /    |
|  32 | 0020 | 0021 | 0022 | 0023 | 0024 | 0025 | 0026 | 0027 | 0028 | 0029 | 002A | 002B | 002C | 002D | 002E | 002F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  3_ |    0 |    1 |    2 |    3 |    4 |    5 |    6 |    7 |    8 |    9 | :    | ;    | <    | =    | >    | ?    |
|  48 | 0030 | 0031 | 0032 | 0033 | 0034 | 0035 | 0036 | 0037 | 0038 | 0039 | 003A | 003B | 003C | 003D | 003E | 003F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  4_ |    @ |    A |    B |    C |    D |    E |    F |    G |    H |    I | J    | K    | L    | M    | N    | O    |
|  64 | 0040 | 0041 | 0042 | 0043 | 0044 | 0045 | 0046 | 0047 | 0048 | 0049 | 004A | 004B | 004C | 004D | 004E | 004F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  5_ |    P |    Q |    R |    S |    T |    U |    V |    W |    X |    Y | Z    | [    | \    | ]    | ^    | _    |
|  80 | 0050 | 0051 | 0052 | 0053 | 0054 | 0055 | 0056 | 0057 | 0058 | 0059 | 005A | 005B | 005C | 005D | 005E | 005F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  6_ |    ` |    a |    b |    c |    d |    e |    f |    g |    h |    i | j    | k    | l    | m    | n    | o    |
|  96 | 0060 | 0061 | 0062 | 0063 | 0064 | 0065 | 0066 | 0067 | 0068 | 0069 | 006A | 006B | 006C | 006D | 006E | 006F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|
|  7_ |    p |    q |    r |    s |    t |    u |    v |    w |    x |    y | z    | {    | \vert    | }    | ~    | DEL  |
| 112 | 0070 | 0071 | 0072 | 0073 | 0074 | 0075 | 0076 | 0077 | 0078 | 0079 | 007A | 007B | 007C | 007D | 007E | 007F |
|-----+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------|

*** EBCDIC
:PROPERTIES:
:CUSTOM_ID: ebcdic
:END:
** TODO I18N
:PROPERTIES:
:CUSTOM_ID: I18N
:END:
#+call: lg-get-props-entry()
*** iso-3166
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/ISO_3166
:CUSTOM_ID: ISO_3166
:END:
#+call: lg-get-props-entry()
- ISO 3166 is a standard published by the International Organization for Standardization (ISO) that defines codes for the names of countries, dependent territories, special areas of geographical interest, and their principal subdivisions (e.g., provinces or states). The official name of the standard is Codes for the representation of names of countries and their subdivisions.
*** iso-639
:PROPERTIES:
:CUSTOM_ID: ISO_639
:learning_1: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
:END:
#+call: lg-get-props-entry()
- ISO 639 is a standardized nomenclature used to classify languages. Each language is assigned a two-letter (639-1) and three-letter (639-2 and 639-3) lowercase abbreviation, amended in later versions of the nomenclature.
- ISO 639-2/T: three-letter codes, for the same languages as 639-1
- ISO 639-2/B: three-letter codes, mostly the same as 639-2/T, but with some codes derived from English names rather than native names of languages (in the following table, these differing codes are highlighted in boldface)
- ISO 639-3: three-letter codes, the same as 639-2/T for languages, but with distinct codes for each variety of an ISO 639 macrolanguage
*** bcp-47 / rfc-5646
:PROPERTIES:
:CUSTOM_ID: bcp-47-rfc-5646
:END:
** WIP Data Serialization Formats [0/5]
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Comparison_of_data-serialization_formats
:CUSTOM_ID: Data-Serialization-Formats-0-5
:END:
#+call: lg-get-props-entry(aa=3)


*** WIP yaml
:PROPERTIES:
:learning_1: https://rollout.io/blog/yaml-tutorial-everything-you-need-get-started/
:learning_2: https://yaml.org/spec/1.2/spec.html
:CUSTOM_ID: yaml
:END:
#+call: lg-get-props-entry()
#+begin_src yaml
---
# Comments in YAML look like this.

################
# SCALAR TYPES #
################

# Our root object (which continues for the entire document) will be a map,
# which is equivalent to a dictionary, hash or object in other languages.
key: value
another_key: Another value goes here.
a_number_value: 100
scientific_notation: 1e+12
# The number 1 will be interpreted as a number, not a boolean. if you want
# it to be interpreted as a boolean, use true
boolean: true
null_value: null
key with spaces: value
# Notice that strings don't need to be quoted. However, they can be.
however: 'A string, enclosed in quotes.'
'Keys can be quoted too.': "Useful if you want to put a ':' in your key."
single quotes: 'have ''one'' escape pattern'
double quotes: "have many: \", \0, \t, \u263A, \x0d\x0a == \r\n, and more."
# UTF-8/16/32 characters need to be encoded
Superscript two: \u00B2

# Multiple-line strings can be written either as a 'literal block' (using |),
# or a 'folded block' (using '>').
literal_block: |
    This entire block of text will be the value of the 'literal_block' key,
    with line breaks being preserved.

    The literal continues until de-dented, and the leading indentation is
    stripped.

        Any lines that are 'more-indented' keep the rest of their indentation -
        these lines will be indented by 4 spaces.
folded_style: >
    This entire block of text will be the value of 'folded_style', but this
    time, all newlines will be replaced with a single space.

    Blank lines, like above, are converted to a newline character.

        'More-indented' lines keep their newlines, too -
        this text will appear over two lines.

####################
# COLLECTION TYPES #
####################

# Nesting uses indentation. 2 space indent is preferred (but not required).
a_nested_map:
  key: value
  another_key: Another Value
  another_nested_map:
    hello: hello

# Maps don't have to have string keys.
0.25: a float key

# Keys can also be complex, like multi-line objects
# We use ? followed by a space to indicate the start of a complex key.
? |
  This is a key
  that has multiple lines
: and this is its value

# YAML also allows mapping between sequences with the complex key syntax
# Some language parsers might complain
# An example
? - Manchester United
  - Real Madrid
: [2001-01-01, 2002-02-02]

# Sequences (equivalent to lists or arrays) look like this
# (note that the '-' counts as indentation):
a_sequence:
  - Item 1
  - Item 2
  - 0.5  # sequences can contain disparate types.
  - Item 4
  - key: value
    another_key: another_value
  -
    - This is a sequence
    - inside another sequence
  - - - Nested sequence indicators
      - can be collapsed

# Since YAML is a superset of JSON, you can also write JSON-style maps and
# sequences:
json_map: {"key": "value"}
json_seq: [3, 2, 1, "takeoff"]
and quotes are optional: {key: [3, 2, 1, takeoff]}

#######################
# EXTRA YAML FEATURES #
#######################

# YAML also has a handy feature called 'anchors', which let you easily duplicate
# content across your document. Both of these keys will have the same value:
anchored_content: &anchor_name This string will appear as the value of two keys.
other_anchor: *anchor_name

# Anchors can be used to duplicate/inherit properties
base: &base
  name: Everyone has same name

# The regexp << is called Merge Key Language-Independent Type. It is used to
# indicate that all the keys of one or more specified maps should be inserted
# into the current map.

foo: &foo
  <<: *base
  age: 10

bar: &bar
  <<: *base
  age: 20

# foo and bar would also have name: Everyone has same name

# YAML also has tags, which you can use to explicitly declare types.
explicit_string: !!str 0.5
# Some parsers implement language specific tags, like this one for Python's
# complex number type.
python_complex_number: !!python/complex 1+2j

# We can also use yaml complex keys with language specific tags
? !!python/tuple [5, 7]
: Fifty Seven
# Would be {(5, 7): 'Fifty Seven'} in Python

####################
# EXTRA YAML TYPES #
####################

# Strings and numbers aren't the only scalars that YAML can understand.
# ISO-formatted date and datetime literals are also parsed.
datetime: 2001-12-15T02:59:43.1Z
datetime_with_spaces: 2001-12-14 21:59:43.10 -5
date: 2002-12-14

# The !!binary tag indicates that a string is actually a base64-encoded
# representation of a binary blob.
gif_file: !!binary |
  R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5
  OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+
  +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC
  AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=

# YAML also has a set type, which looks like this:
set:
  ? item1
  ? item2
  ? item3
or: {item1, item2, item3}

# Sets are just maps with null values; the above is equivalent to:
set2:
  item1: null
  item2: null
  item3: null

# document end
...
#+end_src
**** What are the (dash dash dash) ~---~ in yaml?
:PROPERTIES:
:CUSTOM_ID: What-are-the-dash-dash-dash-in-yaml
:END:
**** What are the (dot dot dot) ~...~ in yaml?
:PROPERTIES:
:CUSTOM_ID: What-are-the-dot-dot-dot-in-yaml
:END:
*** TODO json
:PROPERTIES:
:CUSTOM_ID: json
:END:
*** TODO xml
:PROPERTIES:
:CUSTOM_ID: xml
:END:
*** TODO protobuf
:PROPERTIES:
:CUSTOM_ID: protobuf
:END:
*** TODO ASN.1
:PROPERTIES:
:CUSTOM_ID: ASN-1
:END:
** WIP Complexity [0/2]
:PROPERTIES:
:CUSTOM_ID: Complexity-0-2
:END:
*** TODO Code complexity (big O)
:PROPERTIES:
:CUSTOM_ID: Code-complexity-big-O
:END:
*** WIP Amortized Analysis 
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Amortized_analysis
:CUSTOM_ID: Amortized-Analysis
:END:
#+call: lg-get-props-entry()
+ method for analyzing a given algorithm's complexity, or how much of a resource, especially time or memory, it takes to execute. The motivation for amortized analysis is that looking at the worst-case run time per operation, rather than per algorithm, can be too pessimistic.[1]
+ While certain operations for a given algorithm may have a significant cost in resources, other operations may not be as costly. The amortized analysis considers both the costly and less costly operations together over the whole series of operations of the algorithm. This may include accounting for different types of input, length of the input, and other factors that affect its performance.[2]
** Basic Data Structures [0/7]
:PROPERTIES:
:CUSTOM_ID: Basic-Data-Structures
:END:
*** TODO List
:PROPERTIES:
:CUSTOM_ID: List
:END:
*** TODO Set
:PROPERTIES:
:CUSTOM_ID: Set
:END:
*** TODO Map
:PROPERTIES:
:CUSTOM_ID: Map
:END:
*** TODO Queue
:PROPERTIES:
:CUSTOM_ID: DATA_STRUCTURE_QUEUE
:END:
*** TODO Tree
:PROPERTIES:
:CUSTOM_ID: Tree
:END:
*** WIP Finger Tree 
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Finger_tree
:CUSTOM_ID: Finger-Tree
:END:
#+call: lg-get-props-entry()
- is a purely functional data structure that can be used to efficiently implement other functional data structures. A finger tree gives amortized constant time access to the "fingers" (leaves) of the tree, which is where data is stored, and concatenation and splitting logarithmic time in the size of the smaller piece. It also stores in each internal node the result of applying some associative operation to its descendants. This "summary" data stored in the internal nodes can be used to provide the functionality of data structures other than trees.
*** WIP Trie
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Trie
:CUSTOM_ID: Trie
:END:
#+call: lg-get-props-entry()
- In computer science, a trie, also called digital tree or prefix tree, is a kind of search tree—an ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings. Unlike a binary search tree, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated; i.e., the value of the key is distributed across the structure. All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string. Keys tend to be associated with leaves, though some inner nodes may correspond to keys of interest. Hence, keys are not necessarily associated with every node. For the space-optimized presentation of prefix tree, see compact prefix tree.
** Algorithms [0/3]
:PROPERTIES:
:CUSTOM_ID: ALGORITHMS
:END:

*** WIP Stable vs Unstable sorting
:PROPERTIES:
:CUSTOM_ID: Stable-vs-unstable-sorting
:END:
*** WIP Cache-Oblivious Algorithm
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Cache-oblivious_algorithm
:learning_2: http://erikdemaine.org/papers/BRICS2002/paper.pdf
:learning_3: https://www.cs.ox.ac.uk/ralf.hinze/WG2.8/33/slides/Edward.pdf
:CUSTOM_ID: cache-oblivious-algorithm
:END:
#+call: lg-get-props-entry()
- In computing, a cache-oblivious algorithm (or cache-transcendent algorithm) is an algorithm designed to take advantage of a CPU cache without having the size of the cache (or the length of the cache lines, etc.) as an explicit parameter.
- An optimal cache-oblivious algorithm is a cache-oblivious algorithm that uses the cache optimally (in an asymptotic sense, ignoring constant factors).
- Thus, a cache-oblivious algorithm is designed to perform well, without modification, on multiple machines with different cache sizes, or for a memory hierarchy with different levels of cache having different sizes. Cache-oblivious algorithms are contrasted with explicit blocking, as in loop nest optimization, which explicitly breaks a problem into blocks that are optimally sized for a given cache.
- Optimal cache-oblivious algorithms are known for matrix multiplication, matrix transposition, sorting, and several other problems. Some more general algorithms, such as Cooley–Tukey FFT, are optimally cache-oblivious under certain choices of parameters. Because these algorithms are only optimal in an asymptotic sense (ignoring constant factors), further machine-specific tuning may be required to obtain nearly optimal performance in an absolute sense. The goal of cache-oblivious algorithms is to reduce the amount of such tuning that is required.
- Typically, a cache-oblivious algorithm works by a recursive divide and conquer algorithm, where the problem is divided into smaller and smaller subproblems. Eventually, one reaches a subproblem size that fits into cache, regardless of the cache size. For example, an optimal cache-oblivious matrix multiplication is obtained by recursively dividing each matrix into four sub-matrices to be multiplied, multiplying the submatrices in a depth-first fashion. In tuning for a specific machine, one may use a hybrid algorithm which uses blocking tuned for the specific cache sizes at the bottom level, but otherwise uses the cache-oblivious algorithm.
*** TODO Parsers [/]
:PROPERTIES:
:CUSTOM_ID: PARSERS
:END:

* WIP Architecture [0/15]                                            :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: ARCHITECTURE
:END:
#+call: lg-get-props-entry()
 *architecture* and *design*

** WIP DDD                                                           :TOPIC:
:PROPERTIES:
:CUSTOM_ID: DDD
:END:
*** Bounded Context                                               :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Bounded-Context
:END:
*** ubiquotous language                                           :TOPIC:
:PROPERTIES:
:CUSTOM_ID: ubiquotous-language
:END:
*** Entity and Value Object                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Entity-and-Value-Object
:END:
** WIP Messaging                                           :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Messaging
:END:
*** WIP QoS
:PROPERTIES:
:CUSTOM_ID: QoS
:END:
- Each connection to the broker can specify a quality of service measure. These are classified in increasing order of overhead:
  - *At most once* - the message is sent only once and the client and broker take no additional steps to acknowledge delivery (fire and forget).
  - *At least once* - the message is re-tried by the sender multiple times until acknowledgement is received (acknowledged delivery).
  - *Exactly once* - the sender and receiver engage in a two-level handshake to ensure only one copy of the message is received (assured delivery).

*** WIP Tools
:PROPERTIES:
:CUSTOM_ID: MESSAGING_TOOLS
:END:
**** TODO Solace Pub/Sub Plus
:PROPERTIES:
:CUSTOM_ID: Solace-Pub-Sub-Plus
:END:
**** TODO NATS
:PROPERTIES:
:CUSTOM_ID: NATS
:END:
**** TODO Google Pub/Sub                                             :GCP:
:PROPERTIES:
:CUSTOM_ID: Google-Pub-Sub
:END:
**** TODO AWS SNS                                                    :AWS:
:PROPERTIES:
:CUSTOM_ID: AWS-SNS
:END:
**** TODO AWS SNS FIFO                                               :AWS:
:PROPERTIES:
:CUSTOM_ID: AWS-SNS-FIFO
:END:
**** TODO AWS SES                                                    :AWS:
:PROPERTIES:
:CUSTOM_ID: AWS-SES
:END:
**** TODO AWS SQS                                                    :AWS:
:PROPERTIES:
:CUSTOM_ID: AWS-SQS
:END:
**** TODO AWS Kinesis                                                :AWS:
:PROPERTIES:
:CUSTOM_ID: AWS-Kinesis
:END:
**** TODO RabbbitMQ
:PROPERTIES:
:CUSTOM_ID: RabbbitMQ
:END:
**** TODO Kafka
:PROPERTIES:
:CUSTOM_ID: Kafka
:END:
**** WIP Redis
:PROPERTIES:
:learning_1: https://redis.io/topics/introduction
:CUSTOM_ID: Redis
:END:
#+call: lg-get-props-entry()

- Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.
- You can run atomic operations on these types, like appending to a string; incrementing the value in a hash; pushing an element to a list; computing set intersection, union and difference; or getting the member with highest ranking in a sorted set.
- In order to achieve its outstanding performance, Redis works with an in-memory dataset. Depending on your use case, you can persist it either by dumping the dataset to disk every once in a while, or by appending each command to a log. Persistence can be optionally disabled, if you just need a feature-rich, networked, in-memory cache.
- Redis also supports trivial-to-setup master-slave asynchronous replication, with very fast non-blocking first synchronization, auto-reconnection with partial resynchronization on net split.
- Other features include:
  - Transactions
  - Pub/Sub
  - Lua scripting
  - Keys with a limited time-to-live
  - LRU eviction of keys
  - Automatic failover
  - You can use Redis from most programming languages out there.
- Redis is written in ANSI C and works in most POSIX systems like Linux, *BSD, OS X without external dependencies. Linux and OS X are the two operating systems where Redis is developed and tested the most, and we recommend using Linux for deploying. Redis may work in Solaris-derived systems like SmartOS, but the support is best effort. There is no official support for Windows builds.
*** TODO JMS style mapping
:PROPERTIES:
:CUSTOM_ID: JMS-style-mapping
:END:
**** TODO Queue
:PROPERTIES:
:CUSTOM_ID: Queue
:END:
**** TODO Topics
:PROPERTIES:
:CUSTOM_ID: Topics
:END:
*** Protocols
:PROPERTIES:
:CUSTOM_ID: Protocols
:END:
**** WIP AMQP (Advanced Message Queuing Protocol)
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol
:CUSTOM_ID: AMQP-Advanced-Message-Queuing-Protocol
:END:
#+call: lg-get-props-entry()
- AMQP 1.0 broker implementations
  - *Apache Qpid*, an open-source project at the Apache Foundation
  - *Apache ActiveMQ*, an open-source project at the Apache Foundation
  - Azure Event Hubs
  - Azure Service Bus
  - *Solace PubSub+*, a multi-protocol broker in hardware, software, and cloud
- beware there is more incompatible protcol versions 0-8, 0-9, 0-9-1
**** WIP MQTT (Message Queuing Telemetry Transport)
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/MQTT
:CUSTOM_ID: MQTT-Message-Queuing-Telemetry-Transport
:END:
#+call: lg-get-props-entry()
- The MQTT protocol defines two types of network entities: a message broker and a number of clients. An MQTT broker is a server that receives all messages from the clients and then routes the messages to the appropriate destination clients.[13] An MQTT client is any device (from a micro controller up to a full-fledged server) that runs an MQTT library and connects to an MQTT broker over a network.[14]
- Information is organized in a hierarchy of topics. When a publisher has a new item of data to distribute, it sends a control message with the data to the connected broker. The broker then distributes the information to any clients that have subscribed to that topic. The publisher does not need to have any data on the number or locations of subscribers, and subscribers, in turn, do not have to be configured with any data about the publishers.
- If a broker receives a message on a topic for which there are no current subscribers, the broker discards the message unless the publisher of the message designated the message as a retained message. A retained message is a normal MQTT message with the retained flag set to true. The broker stores the last retained message and the corresponding QoS for the selected topic. Each client that subscribes to a topic pattern that matches the topic of the retained message receives the retained message immediately after they subscribe. The broker stores only one retained message per topic.[15] This allows new subscribers to a topic to receive the most current value rather than waiting for the next update from a publisher.
- When a publishing client first connects to the broker, it can set up a default message to be sent to subscribers if the broker detects that the publishing client has unexpectedly disconnected from the broker.
- Clients only interact with a broker, but a system may contain several broker servers that exchange data based on their current subscribers' topics.
- A minimal MQTT control message can be as little as two bytes of data. A control message can carry nearly 256 megabytes of data if needed. There are fourteen defined message types used to connect and disconnect a client from a broker, to publish data, to acknowledge receipt of data, and to supervise the connection between client and server.
- MQTT relies on the TCP protocol for data transmission. A variant, MQTT-SN, is used over other transports such as UDP or Bluetooth.
- MQTT sends connection credentials in plain text format and does not include any measures for security or authentication. This can be provided by using TLS to encrypt and protect the transferred information against interception, modification or forgery.
- The default unencrypted MQTT port is 1883. The encrypted port is 8883.[16]
** WIP REST
:PROPERTIES:
:CUSTOM_ID: REST
:END:
*** What are the HTTP methods supported by REST?                 :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-are-the-HTTP-methods-supported-by-REST
:END:
:ANSWER:
HTTP methods supported by REST are:

| GET     | It requests a resource at the request URL. It should not contain a request body as it will be discarded. Maybe it can be cached locally or on the server. |
| POST    | It submits information to the service for processing; it should typically return the modified or new resource                                             |
| PUT     | At the request URL it update the resource                                                                                                                 |
| DELETE  | At the request URL it removes the resource                                                                                                                |
| OPTIONS | It indicates which techniques are supported                                                                                                               |
| HEAD    | About the request URL it returns meta information                                                                                                         |
:END:

*** What is the purpose of HTTP Status Code?                     :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-the-purpose-of-HTTP-Status-Code
:END:
:ANSWER:
HTTP Status code are standard codes and refers to predefined status of task done at server. For example, HTTP Status 404 states that requested resource is not present on server.

Consider following status codes:
|-----+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
| 200 | OK                    | shows success.                                                                                                                                     |
| 201 | CREATED               | when a resource is successful created using POST or PUT request. Return link to newly created resource using location header.                      |
| 304 | NOT MODIFIED          | used to reduce network bandwidth usage in case of conditional GET requests. Response body should be empty. Headers should have date, location etc. |
| 400 | BAD REQUEST           | states that invalid input is provided e.g. validation error, missing data.                                                                         |
| 401 | FORBIDDEN             | states that user is not having access to method being used for example, delete access without admin rights.                                        |
| 404 | NOT FOUND             | states that method is not available.                                                                                                               |
| 409 | CONFLICT              | states conflict situation while executing the method for example, adding duplicate entry.                                                          |
| 500 | INTERNAL SERVER ERROR | states that server has thrown some exception while executing the method.                                                                           |
|-----+-----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
:END:
*** What is statelessness in RESTful WebServices?                :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-statelessness-in-RESTful-WebServices
:END:
:ANSWER:
- As per REST architecture, a RESTful web service should not keep a client state on server.
- This restriction is called statelessness.
- It is responsibility of the client to pass its context to server and then server can store this context to process client's further request.
- For example, session maintained by server is identified by session identifier passed by the client.
:END:
*** What is the difference between PUT and POST?                 :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-the-difference-between-PUT-and-POST
:END:
:ANSWER:
- PUT puts a file or resource at a particular URI and exactly at that URI. If there is already a file or resource at that URI, PUT changes that file or resource. If there is no resource or file there, PUT makes one
- POST sends data to a particular URI and expects the resource at that URI to deal with the request. The web server at this point can decide what to do with the data in the context of specified resource
- PUT is idempotent meaning, invoking it any number of times will not have an impact on resources.
- However, POST is not idempotent, meaning if you invoke POST multiple times it keeps creating more resources
:END:
*** TODO HATEOAS
:PROPERTIES:
:CUSTOM_ID: HATEOAS
:END:
** TODO GraphQL
:PROPERTIES:
:CUSTOM_ID: GraphQL
:END:
** WIP 12 Factor Apps
:PROPERTIES:
:CUSTOM_ID: 12_FACTOR_APPS
:learning_1: https://12factor.net/
:END:
#+call: lg-get-props-entry()
1. *Codebase*
   - One codebase tracked in revision control, many deploys
2. *Dependencies*
   - Explicitly declare and isolate dependencies
3. *Config*
   - Store config in the environment
4. *Backing services*
   - Treat backing services as attached resources
5. *Build, release, run*
   - Strictly separate build and run stages
6. *Processes*
   - Execute the app as one or more stateless processes
7. *Port binding*
   - Export services via port binding
8. *Concurrency*
   - Scale out via the process model
9. *Disposability*
   - Maximize robustness with fast startup and graceful shutdown
10. *Dev/prod parity*
    - Keep development, staging, and production as similar as possible
11. *Logs*
    - Treat logs as event streams
12. *Admin processes*
    - Run admin/management tasks as one-off processes
** WIP Hasura 3Factor Apps
:PROPERTIES:
:CUSTOM_ID: 3_FACTOR_APPS
:learning_1: https://3factor.app/
:END:
#+call: lg-get-props-entry()

- epizody 115 116 a 117.
- Konkrétně epizoda 116 na kterou posílám odkaz je hodná poslechu.
- 3f Apps je architektura ke které se blížíme.
- V té 116 epizodě je právě celá diskuse o messagingu,  otázky msg fall-back..
- Format diskuse je takový rozbíhavý, ale berou to že široka.
- Zajímavý je to hodně tak po prvních osmi minutách a ke konci zase kecaji jenom tak zbůhdarma.
- Pěkný je i to že to je diskuse mezi 3mi lidmi a ne všichni tomu rozumí, tak tam občas narazíš na blbosti.
- Jo a je tam slyšet o čem že je ta technická architektura. 

- https://www.codingblocks.net/episode115
- https://www.codingblocks.net/episode116
- https://www.codingblocks.net/episode117

*** Factor #1: Realtime GraphQL
:PROPERTIES:
:CUSTOM_ID: Factor-1-Realtime-GraphQL
:END:
- Apart from providing an amazing frontend developer experience, GraphQL is a crucial component in 3factor architecture as it allows flexible API access and realtime capabilities. The GraphQL API should have the following properties:
- Low-latency: An end-user should see instant feedback of an action (i.e. state manipulation) and not have to wait long on an API (<100ms ideal, upto 1 second at worst).
- Support subscriptions: Consume information “realtime” from the backend via GraphQL Subscriptions. Avoid the use of continuous polling (for scalability).

*** Factor #2: Reliable Eventing
:PROPERTIES:
:CUSTOM_ID: Factor-2-Reliable-Eventing
:END:
- In 3factor, business logic is initiated via events. This removes complex state management in your API layer and defers it to bespoke business logic functions. Events can also be persisted so that entire history of state is available for observability. Further, the event system must have the following 2 properties:
- Atomic: Mutations to the application state should atomically create event(s).
- Reliable: Events should be delivered (to any consumer) with atleast-once guarantee.

*** Factor #3: Async Serverless
:PROPERTIES:
:CUSTOM_ID: Factor-3-Async-Serverless
:END:
- Write business logic as event handling functions. Each function only cares about one event and is hence small & cohesive. The easiest way to deploy such functions is in serverless compute. Serverless minimizes backend ops and gives “infinite” scalability while being cost-efficient. The serverless functions should follow few best-practices:
- Idempotent: The code should be prepared for duplicate delivery of events.
- Out-of-order: Events may not be guaranteed to be received in any realtime order. The code should not depend on any expected sequence of events.
** WIP OpenApiSpec / Open API 3.0 / Swagger
:PROPERTIES:
:learning_1: https://app.swaggerhub.com/help/tutorials/openapi-3-tutorial
:learning_2: https://editor.swagger.io/
:CUSTOM_ID: OpenApiSpec-Open-API-3-0-Swagger
:END:
#+call: lg-get-props-entry()
*** What Is OpenAPI?
:PROPERTIES:
:CUSTOM_ID: What-Is-OpenAPI
:END:
:ANSWER:
- OpenAPI Specification (formerly known as Swagger Specification) is an open-source format for describing and documenting APIs. The Specification was originally developed in 2010 by Reverb Technologies (formerly Wordnik) as a way to keep the API design and documentation in sync. It has since become a de-facto standard for designing and describing RESTful APIs, and is used by millions of developers and organizations for developing their APIs, be it internal or client facing.
- The latest version of OpenAPI is 3.0. OpenAPI definitions can be written in JSON or YAML. We recommend YAML, because it is easier to read and write.
- A simple OpenAPI 3.0 specification looks like this:
#+begin_src yaml
  openapi: 3.0.0
  info:
    version: 1.0.0
    title: Sample API
    description: A sample API to illustrate OpenAPI concepts
  paths:
    /list:
      get:
        description: Returns a list of stuff
        responses:
          '200':
            description: Successful response
#+end_src
:END:

** WIP Enterprise Architecture Integration Patterns [0/4]
:PROPERTIES:
:CUSTOM_ID: Enterprise-Architecture-Integration-Patterns-0-4
:END:
*** WIP Integration Styles:
:PROPERTIES:
:CUSTOM_ID: Integration-Styles
:END:
**** TODO File Transfer                                          :PATTERN:
:PROPERTIES:
:CUSTOM_ID: FILE_TRANSFER
:END:
#+call: lg-get-props-entry()
**** TODO Shared Database                                        :PATTERN:
:PROPERTIES:
:CUSTOM_ID:  SHARED_DATABASE
:END:
#+call: lg-get-props-entry()
**** TODO Remote Procedure Invocation                            :PATTERN:
:PROPERTIES:
:CUSTOM_ID: REMOTE_PROCEDURE_INVOCATION
:END:
#+call: lg-get-props-entry()
**** TODO Messaging                                              :PATTERN:
:PROPERTIES:
:CUSTOM_ID: MESSAGING
:END:
#+call: lg-get-props-entry()
*** WIP Messaging Systems
:PROPERTIES:
:CUSTOM_ID: Messaging-Systems
:END:
**** Message Channel                                             :PATTERN:
:PROPERTIES:
:CUSTOM_ID: Message-Channel
:END:
**** Message                                                     :PATTERN:
:PROPERTIES:
:CUSTOM_ID: Message
:END:
**** Pipes and Filtres                                           :PATTERN:
:PROPERTIES:
:CUSTOM_ID: Pipes-and-Filtres
:END:
**** Message Router                                              :PATTERN:
:PROPERTIES:
:CUSTOM_ID: Message-Router
:END:
**** Message Translator                                          :PATTERN:
:PROPERTIES:
:CUSTOM_ID: Message-Translator
:END:
**** Message Endpoint                                            :PATTERN:
:PROPERTIES:
:CUSTOM_ID: Message-Endpoint
:END:
*** TODO Choreography
:PROPERTIES:
:CUSTOM_ID: Choreography
:END:
- distributed decision making
  - simple..
  - for primitive cases.
  - Higher connaissance
  - cyclic dependencies …
  - Overloads domain objectsviin. I minimal
*** TODO Orchestration
:PROPERTIES:
:CUSTOM_ID: Orchestration
:END:
- centralized decision making
  - orchestration objects implements state machine and invokes the participants
** WIP μ-Services design patterns classes [0/6]
:PROPERTIES:
:learning_1: https://tsh.io/blog/design-patterns-in-microservices-api-gateway-bff-and-more/
:CUSTOM_ID: μ-Services-design-patterns-classes-0-6
:END:
#+call: lg-get-props-entry()
*** WIP Communication
:PROPERTIES:
:CUSTOM_ID: Communication
:END:
- It concerns the methods of communication between microservices and client apps (the frontend layer).
*** WIP Internal communication
:PROPERTIES:
:CUSTOM_ID: Internal-communication
:END:
- These design patterns constitute various ways microservices can communicate between each other.
*** WIP Security
:PROPERTIES:
:CUSTOM_ID: Security
:END:
- A variety of security-related concerns, such as the organization of the security layer, authorization and level of access to particular microservices for different types of users, etc.
*** WIP Availability
:PROPERTIES:
:CUSTOM_ID: Availability
:END:
- Ensuring that all microservices are ready to address the needs of the system (regardless of how intense the traffic is), ensuring the lowest possible downtime. This includes activities such as making sure microservices can restart on another machine, or whether enough machines are available, microservices being able to report their current states on their own, health checks and more.
*** WIP Service discovery
:PROPERTIES:
:CUSTOM_ID: Service-discovery
:END:
- It refers to the methods microservices use to find each other and make their locations known.
*** WIP Configuration
:PROPERTIES:
:CUSTOM_ID: Configuration
:END:
- Setting parameters and monitoring the performance of the entire system to continuously optimize it as you go
** TODO μ-Services Design Patterns [0/8]
:PROPERTIES:
:learning_1: https://tsh.io/blog/design-patterns-in-microservices-api-gateway-bff-and-more/
:CUSTOM_ID: μ-Services-Design-Patterns-0-8
:END:
#+call: lg-get-props-entry()
*** TODO API Gateway                                              :PATTERN:
:PROPERTIES:
:CUSTOM_ID: API-Gateway
:END:
*** TODO Circuit Breaker                                          :PATTERN:
:PROPERTIES:
:CUSTOM_ID: Circuit-Breaker
:END:
*** WIP CQRS                                                      :PATTERN:
:PROPERTIES:
:CUSTOM_ID: CQRS
:learning_1: http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/
:END:

*** TODO Event Sourcing                                           :PATTERN:
:PROPERTIES:
:CUSTOM_ID: EVENT_SOURCING
:END:
#+call: lg-get-props-entry()

*** TODO Sidecar                                                  :PATTERN:
:PROPERTIES:
:CUSTOM_ID: SIDECAR
:END:
#+call: lg-get-props-entry()

*** TODO Backend-for-Frontend                                     :PATTERN:
:PROPERTIES:
:CUSTOM_ID: BACKEND_FOR_FRONTEND
:END:
#+call: lg-get-props-entry()

*** TODO Strangler                                        :PATTERN:
:PROPERTIES:
:CUSTOM_ID: STRANGLER
:END:
#+call: lg-get-props-entry()

*** TODO Saga                                                     :PATTERN:
:PROPERTIES:
:CUSTOM_ID: SAGA
:END:
#+call: lg-get-props-entry()

** TODO CRUD                                                       :PATTERN:
:PROPERTIES:
:CUSTOM_ID: CRUD
:END:
** WIP (Pragmatic) Design principes [0/11]
:PROPERTIES:
:CUSTOM_ID: Pragmatic-Design-principes-0-11
:END:
*** TODO DRY                                                        :TOPIC:
:PROPERTIES:
:CUSTOM_ID: DRY
:END:
*** TODO KISS                                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: KISS
:END:
*** WIP GRASP
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/GRASP_%28object-oriented_design%29
:CUSTOM_ID: GRASP
:END:
#+call: lg-get-props-entry()
- General Responsibility Assignment Software Patterns (or Principles), abbreviated GRASP, consist of guidelines for assigning responsibility to classes and objects in object-oriented design.[1] It is not related to the SOLID design principle.
- The different patterns and principles used in GRASP are controller, creator, indirection, information expert, low coupling, high cohesion, polymorphism, protected variations, and pure fabrication. All these patterns answer some software problems, and these problems are common to almost every software development project. These techniques have not been invented to create new ways of working, but to better document and standardize old, tried-and-tested programming principles in object-oriented design.
- Computer scientist Craig Larman states that "the critical design tool for software development is a mind well educated in design principles. It is not UML or any other technology."[2] Thus, GRASP are really a mental toolset, a learning aid to help in the design of object-oriented software.
*** WIP SOLID
:PROPERTIES:
:CUSTOM_ID: SOLID
:END:
#+call: lg-get-props-entry()
- *S* single responsibility
- *O* open–closed
- *L* liskov substitution
- *I* interface segregation
- *D* dependency inversion
*** TODO YAGNI                                                      :TOPIC:
:PROPERTIES:
:CUSTOM_ID: YAGNI
:END:
#+call: lg-get-props-entry()

*** TODO Open/Close principal                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Open-Close-principal
:END:
*** TODO High Cohesion                                              :TOPIC:
:PROPERTIES:
:CUSTOM_ID: High-Cohesion
:END:
*** TODO Low Coupling                                               :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Low-Coupling
:END:
**** What is temporal coupling?                                 :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-temporal-coupling
:END:
*** WIP Information Hiding                                          :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Information-Hiding
:END:
- In computer science, information hiding is the principle of segregation of the design decisions in a computer program that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable interface which protects the remainder of the program from the implementation (the details that are most likely to change).
- Written another way, information hiding is the ability to prevent certain aspects of a class or software component from being accessible to its clients, using either programming language features (like private variables) or an explicit exporting policy
*** WIP Encapsulation                                               :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Encapsulation
:END:
- The mechanism of Encapsulation in ObjectOriented Programming (OOP) is a direct application of Information Hiding
*** WIP The Law of Demeter (LoD) or principle of least knowledge
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Law_of_Demeter
:CUSTOM_ID: The-Law-of-Demeter-LoD-or-principle-of-least-knowledge
:END:
#+call: lg-get-props-entry()
- is a design guideline for developing software, particularly object-oriented programs. In its general form, the LoD is a specific case of loose coupling. The guideline was proposed by Ian Holland at Northeastern University towards the end of 1987, and can be succinctly summarized in each of the following ways:[1]
  - Each unit should have only limited knowledge about other units: only units "closely" related to the current unit.
  - Each unit should only talk to its friends; don't talk to strangers.
  - Only talk to your immediate friends.
- The fundamental notion is that a given object should assume as little as possible about the structure or properties of anything else (including its subcomponents), in accordance with the principle of "information hiding". It may be viewed as a corollary to the principle of least privilege, which dictates that a module possess only the information and resources necessary for its legitimate purpose.
- It is so named for its origin in the Demeter Project, an adaptive programming and aspect-oriented programming effort. The project was named in honor of Demeter, “distribution-mother” and the Greek goddess of agriculture, to signify a bottom-up philosophy of programming which is also embodied in the law itself.

** TODO Antifragile architecture
:PROPERTIES:
:CUSTOM_ID: Antifragile-architecture
:END:
** WIP Evolutionary database design
:PROPERTIES:
:learning_1:  https://martinfowler.com/articles/evodb.html
:CUSTOM_ID: Evolutionary-database-design
:END:
#+call: lg-get-props-entry()
* WIP Data [0/10]                                                    :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: DATA
:END:
#+call: lg-get-props-entry()
** WIP background                                                    :TOPIC:
:PROPERTIES:
:CUSTOM_ID: background
:END:
*** What does ACID mean?                                      :QUESTION:
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/ACID
:CUSTOM_ID: What-does-ACID-mean
:END:
#+call: lg-get-props-entry()
:ANSWER:
- A ::  atomicity
- C :: consistency
- I :: isolation
- D :: durability
:END:
*** WIP BASE
:PROPERTIES:
:CUSTOM_ID: BASE
:END:
:ANSWER:
- BA :: Basic Availability
- S :: Soft-state
- E :: Eventual consistency
:END:
*** ORM
:PROPERTIES:
:CUSTOM_ID: ORM
:END:
**** What ORM (object-relational-mapping ) means                :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-ORM-object-relational-mapping-means
:END:
**** What is object relation impedance mismatch                 :QUESTION:
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch
:CUSTOM_ID: What-is-object-relation-impedance-mismatch
:END:
#+call: lg-get-props-entry()
:ANSWER:
- The object-relational impedance mismatch is a set of conceptual and technical difficulties that are often encountered when a relational database management system (RDBMS) is being served by an application program (or multiple application programs) written in an object-oriented programming language or style.
- particularly because objects or class definitions must be mapped to database tables defined by a relational schema.
:END:
**** Bottom Up                                          :QUESTION:CONCEPT:
:PROPERTIES:
:CUSTOM_ID: BOTTOM_UP
:END:
#+call: lg-get-props-entry()
**** Top Down                                           :QUESTION:CONCEPT:
:PROPERTIES:
:CUSTOM_ID: TOP_DOWN
:END:
#+call: lg-get-props-entry()
**** Meet in the Middle                                 :QUESTION:CONCEPT:
:PROPERTIES:
:CUSTOM_ID: MEET_IN_THE_MIDDLE
:END:
#+call: lg-get-props-entry()
*** CAP theorem
:PROPERTIES:
:learning_1: https://towardsdatascience.com/cap-theorem-and-distributed-database-management-systems-5c2be977950e
:CUSTOM_ID: CAP-theorem
:END:
#+call: lg-get-props-entry()
:ANSWER:
- CAP Theorem is a concept that a distributed database system can only have 2 of the 3: Consistency, Availability and Partition Tolerance.
- CAP Theorem is very important in the Big Data world, especially when we need to make trade off's between the three, based on our unique use case.
:END:
**** Beyond CAP database systems
:PROPERTIES:
:learning_1: http://www.grokkingsystemdesigns.com/beyond-cap-theorem/
:CUSTOM_ID: Beyond-CAP-database-systems
:END:
#+call: lg-get-props-entry()
*** Wall: Write Ahead Logs
:PROPERTIES:
:CUSTOM_ID: WALL
:END:
#+call: lg-get-props-entry()

*** Eventual Consistency
:PROPERTIES:
:CUSTOM_ID: EVENTUAL_CONSISTENCY
:END:
#+call: lg-get-props-entry()

*** Multi master replication
:PROPERTIES:
:CUSTOM_ID: Multi-master-replication
:END:
*** OLAP
:PROPERTIES:
:CUSTOM_ID: OLAP
:END:
#+call: lg-get-props-entry()

- OnLine Analytical Processing
*** OLTP
:PROPERTIES:
:CUSTOM_ID: OLTP
:END:
#+call: lg-get-props-entry()

- OnLine Transactional Processing
*** Slowly Moving Dimensions
:PROPERTIES:
:CUSTOM_ID: Slowly-Moving-Dimensions
:END:
**** What is it?                                                :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-it
:END:
:ANSWER:
- Type 0 - The passive method
- Type 1 - Overwriting the old value
- Type 2 - Creating a new additional record
- Type 3 - Adding a new column
- Type 4 - Using historical table
- Type 6 - Combine approaches of types 1,2,3 (1+2+3=6)
:END:
**** Type 0 - The passive method.                               :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Type-0-The-passive-method
:END:
:ANSWER:
- In this method no special action is performed upon dimensional changes.
- Some dimension data can remain the same as it was first time inserted, others may be overwritten.
:END:
**** Type 1 - Overwriting the old value.                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Type-1-Overwriting-the-old-value
:END:
:ANSWER:
- In this method no history of dimension changes is kept in the database.
- The old dimension value is simply overwritten be the new one.
- This type is easy to maintain and is often use for data which changes are caused by processing corrections (e.g. removal special characters, correcting spelling errors).
:END:
**** Type 2 - Creating a new additional record.                 :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Type-2-Creating-a-new-additional-record
:END:
:ANSWER:
- In this methodology all history of dimension changes is kept in the database.
- You capture attribute change by adding a new row with a new surrogate key to the dimension table.
- Both the prior and new rows contain as attributes the natural key(or other durable identifier).
- Also 'effective date' and 'current indicator' columns are used in this method. There could be only one record with current indicator set to 'Y'. For 'effective date' columns, i.e. start_date and end_date, the end_date for current record usually is set to value 9999-12-31. Introducing changes to the dimensional model in type 2 could be very expensive database operation so it is not recommended to use it in dimensions where a new attribute could be added in the future.
:END:
**** Type 3 - Adding a new column.                              :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Type-3-Adding-a-new-column
:END:
:ANSWER:
- In this type usually only the current and previous value of dimension is kept in the database.
- The new value is loaded into 'current/new' column and the old one into 'old/previous' column.
- Generally speaking the history is limited to the number of column created for storing historical data. This is the least commonly needed technique.
:END:
**** Type 4 - Using historical table.                           :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Type-4-Using-historical-table
:END:
:ANSWER:
- In this method a separate historical table is used to track all dimension's attribute historical changes for each of the dimension.
- The 'main' dimension table keeps only the current data e.g. customer and customer_history tables.
:END:
**** Type 6 - Combine approaches of types 1,2,3 (1+2+3=6).      :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Type-6-Combine-approaches-of-types-1-2-3-1-2-3-6
:END:
:ANSWER:
- In this type we have in dimension table such additional columns as:

- current_type - for keeping current value of the attribute. All history records for given item of attribute have the same current value.
- historical_type - for keeping historical value of the attribute. All history records for given item of attribute could have different values.
- start_date - for keeping start date of 'effective date' of attribute's history.
- end_date - for keeping end date of 'effective date' of attribute's history.
- current_flag - for keeping information about the most recent record.

- In this method to capture attribute change we add a new record as in type 2. The current_type information is overwritten with the new one as in type 1. We store the history in a historical_column as in type 3.
:END:
*** Backup strategy
:PROPERTIES:
:CUSTOM_ID: Backup-strategy
:END:
**** full vs incremental backup
:PROPERTIES:
:CUSTOM_ID: full-vs-incremental-backup
:END:
**** snapshots
:PROPERTIES:
:CUSTOM_ID: snapshots
:END:
**** on-line replica
:PROPERTIES:
:CUSTOM_ID: on-line-replica
:END:
** WIP SQL
:PROPERTIES:
:CUSTOM_ID: SQL
:END:
*** partitionning
:PROPERTIES:
:CUSTOM_ID: partitionning
:END:
- co to je?  rozdělení tabulek na více částí, může být vertikální či horizontální
- proč se to používá?  např. zvýšení výkonu (nevypisuji z celé tabulky ale jen z jedné partition) / zátěž rozložena na více disků  rychlejší čtení, velké tabulky které se nevejdou na disk -> vice partiton
*** inner vs outher join
:PROPERTIES:
:CUSTOM_ID: inner-vs-outher-join
:END:
- typy spojení DB tabulek,
  - inner:  výsledek musí obsahovat průnik obou tabulek,
  - outer:  výsledek obsahuje data z jedné či druhé, případně z obou tabulek pokud klíč existuje v obou tabulkách …
- záleží na typu outer joinu - Full/left/right
*** DB Index
:PROPERTIES:
:CUSTOM_ID: DB-Index
:END:
- Druhy  primary/unique/(secondary) index …. Speciální: partial (na části dat definovaný where condition) / functional (nepoužívá atribut, ale funkci nad atributem/atributy) / spatial (prostorový index nad geografickými daty)
 k čemu slouží? K rychlejšímu vyhledávání v tabulce, v případě unique/primary zamezuje vložení duplicity
*** Constraint
:PROPERTIES:
:CUSTOM_ID: Constraint
:END:
- Omezení hodnoty vkládané do atribut, foreign key constraint  hodnota musí existovat v referenční tabulce, primary key constaint  unikátní hodnota v tabulce
*** Agregace (group by)
:PROPERTIES:
:CUSTOM_ID: Agregace-group-by
:END:
*** Co jsou window funkce?                                       :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Co-jsou-window-funkce
:END:
- kalkulace/agregace nad množinou dat, přičemž každý prvek množiny může mít výsledek agregace jiný ….
- Např funkce lead/lag/rank/row_number/first/last/
*** what is a defference between CTE and temp table?             :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-a-defference-between-CTE-and-temp-table
:END:
:ANSWER:
- A CTE is just that -- Common Table Expression, that is, only a syntax construct. The result set described by a CTE may never be materialized in the specified form.
- A temporary table, on the other hand, is a real database object that is initialized with the structure described by its DDL statement and possibly populated by actual rows.
:END:
#+call: lg-get-props-entry()
*** CTE (with)
:PROPERTIES:
:CUSTOM_ID: CTE-with
:END:
- syntaxe pro vytvoření dočasné tabulky, kterou mohu použít v následujícím sql dotazu,
- lze pomocí ní dělat rekurzivní dotazy, výsledek je jen v paměti a neukládá se na disk (pokud mám dostatek working memory 😊 )
*** DML/DDL
:PROPERTIES:
:CUSTOM_ID: DML-DDL
:END:
- manipuklace s daty v tabulce (insert/delete/update) / definuje datové struktury (db,schema, tabulka) (create / drop / alter / rename)

** WIP Distributed consensus:                                      :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Distributed-consensus
:END:
*** Paxos                                                           :TOPIC:
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Paxos_(computer_science)
:CUSTOM_ID: Paxos
:END:
#+call: lg-get-props-entry()
- Paxos is a family of protocols for solving consensus in a network of unreliable or fallible processors.
  - Consensus is the process of agreeing on one result among a group of participants.
  - This problem becomes difficult when the participants or their communications may experience failures.[1]
- Consensus protocols are the basis for the state machine replication approach to distributed computing, as suggested by Leslie Lamport[2] and surveyed by Fred Schneider.[3] State machine replication is a technique for converting an algorithm into a fault-tolerant, distributed implementation. Ad-hoc techniques may leave important cases of failures unresolved. The principled approach proposed by Lamport et al. ensures all cases are handled safely.
- The Paxos protocol was first submitted in 1989 and named after a fictional legislative consensus system used on the Paxos island in Greece, where Lamport wrote that the parliament had to function "even though legislators continually wandered in and out of the parliamentary Chamber".[4] It was later published as a journal article in 1998.[5]
- The Paxos family of protocols includes a spectrum of trade-offs between the number of processors, number of message delays before learning the agreed value, the activity level of individual participants, number of messages sent, and types of failures. Although no deterministic fault-tolerant consensus protocol can guarantee progress in an asynchronous network (a result proved in a paper by Fischer, Lynch and Paterson[6]), Paxos guarantees safety (consistency), and the conditions that could prevent it from making progress are difficult to provoke.
- Paxos is usually used where durability is required (for example, to replicate a file or a database), in which the amount of durable state could be large.
- The protocol attempts to make progress even during periods when some bounded number of replicas are unresponsive.
- There is also a mechanism to drop a permanently failed replica or to add a new replica.
*** Raft                                                            :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Raft
:END:
*** Zab                                                             :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Zab
:END:
** WIP Transactions                                                :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Transactions
:END:
*** transaction problems that are prevented by isolation:
:PROPERTIES:
:CUSTOM_ID: transaction-problems-that-are-prevented-by-isolation
:END:
**** What are they and what they mean?
:PROPERTIES:
:CUSTOM_ID: What-are-they-and-what-they-mean
:END:
:ASWER:
- Dirty reads
- non-repeatable reads
- phantom reads
:END:
*** JDBC transaction isolation levels
:PROPERTIES:
:CUSTOM_ID: JDBC-transaction-isolation-levels
:END:
**** what are they and what they prevent from?
:PROPERTIES:
:CUSTOM_ID: what-are-they-and-what-they-prevent-from
:END:
:ANSWER:
- TRANSACTION_READ_UNCOMMITTED
  - Dirty reads, non-repeatable reads and phantom reads can occur.
- TRANSACTION_READ_COMMITTED
  - Dirty reads are prevented; non-repeatable reads and phantom reads can occur.
- TRANSACTION_REPEATABLE_READ
  - Dirty reads and non-repeatable reads are prevented; phantom reads can occur.
- TRANSACTION_SERIALIZABLE
  - Dirty reads, non-repeatable reads and phantom reads are prevented.
:END:
*** ANSI/ISO levels
:PROPERTIES:
:CUSTOM_ID: ANSI-ISO-levels
:END:
**** what they are
:PROPERTIES:
:CUSTOM_ID: what-they-are
:END:
:ANSWER:
- serializable
- repeatable read
- read committed
- read uncommitted
:END:
**** define some
:PROPERTIES:
:CUSTOM_ID: define-some
:END:
:ANSWER:
- The Serializable isolation level guarantees that concurrent transactions run as they would if you would run sequentially one by one in order.
- One step weaker is the Read Repeatable isolation level that allows Phantom Reads to happen in the transaction. Contrary to transactions running in the Serializable mode, the set of rows that is returned by two consecutive select queries in a transaction can differ. This can happen if another transaction adds or removes rows from the table we are querying.
- Even weaker is the Read Commited isolation level. Two consecutive select statements in a transaction can return different data. Contrary to the Read Repeatable level, this level allows not only the set of rows to change, but also the data that those rows contain. This can happen if another transaction modifies the rows.
- The weakest isolation level is Read Uncommitted where dirty reads can occur. That means that non-committed changes from other transactions can affect a transaction.
:END:
** WIP Datawarehouse?
:PROPERTIES:
:CUSTOM_ID: Datawarehouse
:END:
- úložiště dat,
- organizovaných do určité struktury,
- pro účely analýzy dat … podpora business procesů organizace
** WIP Star schema structure
:PROPERTIES:
:CUSTOM_ID: Star-schema-structure
:END:
- tvořené faktovou tabulkou (jednotlivá měření) a dimenzemi (entity popisující fakta); dimenze mohou být denormalizovánay
** WIP Snowflake schema structure
:PROPERTIES:
:CUSTOM_ID: Snowflake-schema-structure
:END:
- faktová tabulka (jednotlivá měření) + dimenze jsou normalizovány (jedna dimenze může být  složena z více tabulek)  3NF
** WIP WAL  / transactional log?
:PROPERTIES:
:CUSTOM_ID: WAL-transactional-log
:END:
- log kde je historie všech provedených DB operací nad danou instancí/databází.
- Z logu se zapisují záznamy do datových souborů.
- Z logu se dá obnovit databáze do určitého časového okamžiku (PITR-Point In Time Recovery);
- u postgre se dá použít například i k replikaci databáze
** WIP MVCC Multiversion concurrency control
:PROPERTIES:
:CUSTOM_ID: MVCC
:learning_1: https://en.wikipedia.org/wiki/Multiversion_concurrency_control
:END:
#+call: lg-get-props-entry()
- Multiversion concurrency control (MCC or MVCC), is a concurrency control method commonly used by database management systems to provide concurrent access to the database and in programming languages to implement transactional memory.

** WIP Tools [0/24]
:PROPERTIES:
:CUSTOM_ID: DATA_TOOLS
:END:
*** WIP PostgreSQL                                                   :TOOL:
:PROPERTIES:
:learning_1: https://www.highgo.ca/blog/ 
:CUSTOM_ID: PostgreSQL
:END:
#+call: lg-get-props-entry()

**** TODO What is the current version of PostgreSQL             :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-the-current-version-of-PostgreSQL
:END:
**** TODO Explain about Multi version concurrency control?      :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Explain-about-Multi-version-concurrency-control
:END:
:ANSWER:
- Multi version concurrency control or MVCC is used to avoid unnecessary locking of the database.
- This removes the time lag for the user to log into his database.
- This feature or time lag occurs when some one else is on the content. All the transactions are kept as a record.
:END:
**** TODO psql
:PROPERTIES:
:CUSTOM_ID: psql
:END:
**** WIP B-Tree Index
:PROPERTIES:
:CUSTOM_ID: B-Tree-Index
:END:
-  is the default index type in PostgreSQL that gets created when you do a ‘CREATE INDEX’ statement without mentioning the index name.
- is index is much suitable for the data that can be sorted and can handle equality and range queries. The following command is used to create a btree index:
#+begin_src sql
CREATE INDEX name ON table (column); or
CREATE INDEX name ON table USING BTREE (column);
#+end_src
**** WIP Hash Index
:PROPERTIES:
:CUSTOM_ID: Hash-Index
:END:
- The hash index prior to PostgreSQL version 10 were almost discouraged for various reasons such as:

- Not WAL logged hence not crash safe
- Not replicated to stand-by server
- Performance is not so good and may take a long time to build the index (depending on the  table size)
- However since version 10, these problems have been resolved. They are now crash safe and are able to be replicated to standby server. They sometimes perform better than b-tree indexes and are also space efficient.
- The Hash index only works with equality operators that means that you can only look up for data that matches exactly. However it is now much optimized and does a much faster lookup which makes this index a bit of specialized index that can be used where equal comparison is more important. The following command is used to create a hash index:
#+begin_src sql
CREATE INDEX name ON table USING HASH (column);
#+end_src
**** WIP Gist Index
:PROPERTIES:
:CUSTOM_ID: Gist-Index
:END:
- Gist or Generalized Search Tree are useful when the data to be indexed is more complex than to do a simple equate or ranged comparison like finding nearest-neighbor and pattern matching. The example of such data includes geometric data, network address comparisons and full-text searches. 
- The Gist index itself provides an infrastructure to implement different strategies for indexing data such as B-trees and R-trees. The following command is used to create a hash index:
#+begin_src sql
CREATE INDEX name ON table USING gist (column);
#+end_src
**** WIP SP-Gist Index
:PROPERTIES:
:CUSTOM_ID: SP-Gist-Index
:END:
- SP-Gist or Space partitioned Gist indexes are useful when the data can be grouped into non-overlapping groupings. Like Gist index, it also provides an infrastructure for implementing different indexing strategies. However SP-Gist is non-balanced in nature and divides data in partitions, so it allows the implementation of quad-trees, k-d trees, and radix trees (tries).
**** WIP Gin Index
:PROPERTIES:
:CUSTOM_ID: Gin-Index
:END:
- Generalized Inverted indexes are useful in indexing data that consist of multiple elements in a single column such as arrays, json documents (jsonb) or text search documents (tsvector).
#+begin_src sql
CREATE INDEX name ON table USING gin (column);
#+end_src
**** WIP BRIN Index
:PROPERTIES:
:CUSTOM_ID: BRIN-Index
:END:
- Block Range Indexes are useful for large size tables that have columns with some natural sort order. The BRIN index divides the table into block ranges and keeps a summary of those blocks. This summary includes min, max values of the range. The following command is used to create a hash index:
#+begin_src sql
CREATE INDEX name ON table USING brin (column);
#+end_src
*** TODO ORACLE:                                                     :TOOL:
:PROPERTIES:
:CUSTOM_ID: ORACLE
:END:
:ANSWER:
- READ COMMITTED (the default)
- SERIALIZABLE.
  - that what Oracle call SERIALIZABLE is actually snapshot isolation.
:END:
*** TODO Big Table                                                    :GCP:
:PROPERTIES:
:CUSTOM_ID: GCP_BIG_TABLE
:END:
*** WIP Big Query                                                     :GCP:
:PROPERTIES:
:learning_1: https://cloud.google.com/files/BigQueryTechnicalWP.pdf
:learning_2: https://cloud.google.com/bigquery/streaming-data-into-bigquery
:CUSTOM_ID: GCP_BIG_QUERY
:END:
#+call: lg-get-props-entry()
*** TODO Elastic Search                                              :TOOL:
:PROPERTIES:
:CUSTOM_ID: Elastic-Search
:END:
**** Bloom Filter
:PROPERTIES:
:CUSTOM_ID: Bloom-Filter
:END:
*** TODO Atlas MongoDB                                               :TOOL:
:PROPERTIES:
:learning_1: https://www.mongodb.com/cloud/atlas
:CUSTOM_ID: Atlas-MongoDB
:END:
#+call: lg-get-props-entry()
*** TODO MongoDB                                                     :TOOL:
:PROPERTIES:
:CUSTOM_ID: MongoDB
:END:
*** TODO Apache Drill                                                :TOOL:
:PROPERTIES:
:CUSTOM_ID: Apache-Drill
:END:
*** TODO Apache Samza                                                :TOOL:
:PROPERTIES:
:CUSTOM_ID: APACHE_STAMZA
:END:
- A distributed stream processing framework
*** TODO Apache Cassandra                                            :TOOL:
:PROPERTIES:
:CUSTOM_ID: Apache-Cassandra
:END:
- *Open Source:* Modern software development organizations have overwhelmingly moved to adopt open source technologies, starting with the Linux operating system and progressing into infrastructure for managing data. Open source technologies are attractive because of their affordability and extensibility, as well as the flexibility to avoid vendor lock-in. Organizations adopting open source report higher speed of innovation and faster adoption.
- *Flexible, Familiar Interface:* The Cassandra Query Language (CQL) is similar to SQL, meaning most developers should have a fairly easy time becoming familiar with it. (Here’s an introduction to CQL if you need some help).
- *High Performance:* The majority of traditional databases feature a primary / secondary architecture. In these configurations, a single primary replica performs read and write operations, while secondary replicas are only able to perform read operations. Downsides to this architecture include increased latency, as well as higher costs and lower availability at scale. In Cassandra, no single node is in charge of replicating data across a cluster. Instead, every node is capable of performing all read and write operations. This improves performance and adds resiliency to the database.
- *Active Everywhere / Zero-Downtime:* Since every Cassandra node is capable of performing read and write operations, data is quickly replicated across hybrid cloud environments and geographies. In the event a node fails, users are automatically routed to the nearest healthy node. They won’t even notice that a node has been knocked offline because applications behave as designed even in the event of failure. As a result, applications are always available and data is always accessible and never lost. What’s more, Cassandra’s built-in repair services fix problems immediately after they occur—without any manual intervention. Productivity doesn’t even need to take a hit should nodes fail.
- *Scalability:* In traditional environments, scaling applications is a time-consuming and costly process typically accomplished by scaling vertically with more expensive machines. Cassandra enables you to scale horizontally by simply adding more nodes to the cluster. If, for example, four nodes can handle 200,000 transactions/second, eight nodes will be able to handle 400,000 transactions/second. (source)
- *Seamless Replication:* Today’s leading enterprises are increasingly moving to multi-data center, hybrid cloud and even multi-cloud deployments to take advantage of the strengths of various deployments without getting locked into any single provider’s ecosystem. Getting the most out of multi-cloud environments, however, starts with having an underlying cloud database that offers: scalability, security, performance, and availability. For these reasons, it should come as no surprise that the cloud database market is expected to grow nearly 65% each year and reach $68.9 billion by 2022.
*** WIP Apache Pig                                                   :TOOL:
:PROPERTIES:
:CUSTOM_ID: Apache-Pig
:END:
- is a high-level platform for creating programs that run on Apache Hadoop.
- The language for this platform is called Pig Latin.[1]
- Pig can execute its Hadoop jobs in MapReduce, Apache Tez, or Apache Spark.[2]
- Pig Latin abstracts the programming from the Java MapReduce idiom into a notation which makes MapReduce programming high level, similar to that of SQL for relational database management systems.
- Pig Latin can be extended using user-defined functions (UDFs) which the user can write in Java, Python, JavaScript, Ruby or Groovy[3] and then call directly from the language.
*** WIP Sparc                                                        :TOOL:
:PROPERTIES:
:learning_1: https://spark.apache.org/
:CUSTOM_ID: Sparc
:END:
#+call: lg-get-props-entry()
- Apache Spark™ is a unified analytics engine for large-scale data processing.
- Runs Everywhere:
  - Spark runs on Hadoop, Apache Mesos, Kubernetes, standalone, or in the cloud. It can access diverse data sources.
  - You can run Spark using its standalone cluster mode, on EC2, on Hadoop YARN, on Mesos, or on Kubernetes. Access data in HDFS, Alluxio, Apache Cassandra, Apache HBase, Apache Hive, and hundreds of other data sources.
*** TODO Apache Hadoop YARN                                          :TOOL:
:PROPERTIES:
:CUSTOM_ID: HADOOP_YARN
:END:
- The fundamental idea of YARN is to split up the functionalities of resource management and job scheduling/monitoring into separate daemons. The idea is to have a global ResourceManager (RM) and per-application ApplicationMaster (AM). An application is either a single job or a DAG of jobs.
- The ResourceManager and the NodeManager form the data-computation framework. The ResourceManager is the ultimate authority that arbitrates resources among all the applications in the system. The NodeManager is the per-machine framework agent who is responsible for containers, monitoring their resource usage (cpu, memory, disk, network) and reporting the same to the ResourceManager/Scheduler.
- The per-application ApplicationMaster is, in effect, a framework specific library and is tasked with negotiating resources from the ResourceManager and working with the NodeManager(s) to execute and monitor the tasks.

*** WIP Apache Oozie Workflow Scheduler for Hadoop                   :TOOL:
:PROPERTIES:
:learning_1: https://oozie.apache.org
:CUSTOM_ID: Apache-Oozie-Workflow-Scheduler-for-Hadoop
:END:
#+call: lg-get-props-entry()

- Oozie is a workflow scheduler system to manage Apache Hadoop jobs.
- Oozie Workflow jobs are Directed Acyclical Graphs (DAGs) of actions.
- Oozie Coordinator jobs are recurrent Oozie Workflow jobs triggered by time (frequency) and data availability.
- Oozie is integrated with the rest of the Hadoop stack supporting several types of Hadoop jobs out of the box (such as Java map-reduce, Streaming map-reduce, Pig, Hive, Sqoop and Distcp) as well as system specific jobs (such as Java programs and shell scripts).
- Oozie is a scalable, reliable and extensible system.

*** TODO Hadoop                                                      :TOOL:
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Apache_Hadoop
:CUSTOM_ID: Hadoop
:END:
#+call: lg-get-props-entry()
*** TODO hue                                                         :TOOL:
:PROPERTIES:
:learning_1: https://gethue.com/
:CUSTOM_ID: hue
:END:
#+call: lg-get-props-entry()
*** TODO Hive                                                        :TOOL:
:PROPERTIES:
:learning_1: https://hive.apache.org/
:CUSTOM_ID: Hive
:END:
#+call: lg-get-props-entry()
*** TODO HBase                                                       :TOOL:
:PROPERTIES:
:learning_1: https://hbase.apache.org/
:CUSTOM_ID: HBase
:END:
#+call: lg-get-props-entry()
*** TODO Nifi                                                        :TOOL:
:PROPERTIES:
:CUSTOM_ID: Nifi
:END:
#+call: lg-get-props-entry()
*** WIP Apache Parquet                                             :FORMAT:
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/Apache_Parquet
:CUSTOM_ID: Apache-Parquet
:END:
#+call: lg-get-props-entry()
- free and open-source column-oriented data storage format of the Apache Hadoop ecosystem.
- It is similar to the other columnar-storage file formats available in Hadoop namely RCFile and ORC.
- It is compatible with most of the data processing frameworks in the Hadoop environment.
- It provides efficient data compression and encoding schemes with enhanced performance to handle complex data in bulk.
*** WIP Apache Avro                                                :FORMAT:
:PROPERTIES:
:learning_1: https://avro.apache.org
:CUSTOM_ID: Apache-Avro
:END:
#+call: lg-get-props-entry()
- Avro is a row-oriented remote procedure call and data serialization framework developed within Apache's Hadoop project.
- It uses JSON for defining data types and protocols, and serializes data in a compact binary format.
- Its primary use is in Apache Hadoop, where it can provide both a serialization format for persistent data, and a wire format for communication between Hadoop nodes, and from client programs to the Hadoop services.
- Avro uses a schema to structure the data that is being encoded.
- It has two different types of schema languages; one for human editing (Avro IDL) and another which is more machine-readable based on JSON.[3]
- It is similar to Thrift and Protocol Buffers, but does not require running a code-generation program when a schema changes (unless desired for statically-typed languages).
-
*** WIP Apache ORC (Optimized Row Columnar)                        :FORMAT:
:PROPERTIES:
:CUSTOM_ID: Apache-ORC-Optimized-Row-Columnar
:END:
- is a free and open-source column-oriented data storage format of the Apache Hadoop ecosystem.
- It is similar to the other columnar-storage file formats available in the Hadoop ecosystem such as RCFile and Parquet.
- It is compatible with most of the data processing frameworks in the Hadoop environment.
- In February 2013, the Optimized Row Columnar (ORC) file format was announced by Hortonworks in collaboration with Facebook.[3]
- A month later, the Apache Parquet format was announced, developed by Cloudera and Twitter.[4]
*** WIP Protocol Buffers (Protobuf)                                :FORMAT:
:PROPERTIES:
:CUSTOM_ID: Protocol-Buffers-Protobuf
:END:
- is a method of serializing structured data.
- It is useful in developing programs to communicate with each other over a wire or for storing data.
- The method involves an interface description language that describes the structure of some data and a program that generates source code from that description for generating or parsing a stream of bytes that represents the structured data.

*** TODO Liquibase                                                   :TOOL:
:PROPERTIES:
:CUSTOM_ID: Liquibase
:END:
- open source
- tracks DB chanegs
- allows work with data as well as with the schema
- *changeset*:
  - XML, JSON, YAML, SQL
- can use context and label for filteriing chich chnages slould be applied where
* WIP Software Engineering [0/10]                                    :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: SOFTWARE_ENGINEERING
:END:
#+call: lg-get-props-entry()

** TODO Scrum [0/3]                                                  :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Scrum-0-3
:END:
*** TODO DoD
:PROPERTIES:
:CUSTOM_ID: DoD
:END:
*** TODO DoR
:PROPERTIES:
:CUSTOM_ID: DoR
:END:
*** TODO Sprint
:PROPERTIES:
:CUSTOM_ID: Sprint
:END:
** TODO Kanban                                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Kanban
:END:
** TODO XP                                                           :TOPIC:
:PROPERTIES:
:CUSTOM_ID: XP
:END:
** TODO Lean                                                         :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Lean
:END:
** TODO MOSCOW                                                       :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: MOSCOW
:END:
** TODO Uml                                                          :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Uml
:END:
** TODO C4                                                           :TOPIC:
:PROPERTIES:
:CUSTOM_ID: C4
:END:
** WIP Arc42                                                         :TOPIC:
:PROPERTIES:
:learning_1: https://arc42.org/
:learning_2: https://www.se-radio.net/2015/12/se-radio-episode-244-gernot-starke-on-architecture-documentation-using-arc42/
:CUSTOM_ID: Arc42
:END:
#+call: lg-get-props-entry()
** WIP Kaizen (Continuous Improvement)                               :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Kaizen-Continuous-Improvement
:END:
- is a strategy where employees at all levels of a company work together proactively to achieve regular, incremental improvements to the manufacturing process.
- In a sense, it combines the collective talents within a company to create a powerful engine for improvement.
** TODO Tools
:PROPERTIES:
:CUSTOM_ID: SOFTWARE_ENGINEERING_TOOLS
:END:
*** TODO Jira                                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Jira
:END:
*** TODO Confluence                                                 :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Confluence
:END:
* WIP Cloud  [0/12]                                                  :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: CLOUD
:END:
#+call: lg-get-props-entry()
** TODO Cloud native architecture
:PROPERTIES:
:CUSTOM_ID: Cloud-native-architecture
:END:
** WIP Open Policy Agent
:PROPERTIES:
:learning_1: https://www.openpolicyagent.org/docs/latest/
:learning_2: https://www.se-radio.net/2020/04/episode-406-torin-sandall-on-distributed-policy-enforcement/
:CUSTOM_ID: Open-Policy-Agent
:END:
#+call: lg-get-props-entry()

** TODO IaaS
:PROPERTIES:
:CUSTOM_ID: IaaS
:END:
** TODO PaaS
:PROPERTIES:
:CUSTOM_ID: PaaS
:END:
** TODO SaaS
:PROPERTIES:
:CUSTOM_ID: SaaS
:END:
** WIP AWS Concepts                                                  :TOPIC:
:PROPERTIES:
:CUSTOM_ID: AWS-Concepts
:END:
*** Regions
:PROPERTIES:
:CUSTOM_ID: Regions
:END:
- Each Amazon EC2 Region is designed to be isolated from the other Amazon EC2 Regions. This achieves the greatest possible fault tolerance and stability.
- When you view your resources, you see only the resources that are tied to the Region that you specified. This is because Regions are isolated from each other, and we don't automatically replicate resources across Regions.
- When you launch an instance, you must select an AMI that's in the same Region. If the AMI is in another Region, you can copy the AMI to the Region you're using. For more information, see Copying an AMI.

| Code           | Name                       | Opt-in Status | Local Zone        |
| us-east-2      | US East (Ohio)             | Not required  | Not available     |
| us-east-1      | US East (N. Virginia)      | Not required  | Not available     |
| us-west-1      | US West (N. California)    | Not required  | Not available     |
| us-west-2      | US West (Oregon)           | Not required  | us-west-2-lax-1a  |
| us-west-2      | US West (Oregon)           | Not required  | aus-west-2-lax-1b |
| af-south-1     | Africa (Cape Town)         | Required      | Not available     |
| ap-east-1      | Asia Pacific (Hong Kong)   | Required      | Not available     |
| ap-south-1     | Asia Pacific (Mumbai)      | Not required  | Not available     |
| ap-northeast-3 | Asia Pacific (Osaka-Local) | Not required  | Not available     |
| ap-northeast-2 | Asia Pacific (Seoul)       | Not required  | Not available     |
| ap-southeast-1 | Asia Pacific (Singapore)   | Not required  | Not available     |
| ap-southeast-2 | Asia Pacific (Sydney)      | Not required  | Not available     |
| ap-northeast-1 | Asia Pacific (Tokyo)       | Not required  | Not available     |
| ca-central-1   | Canada (Central)           | Not required  | Not available     |
| eu-central-1   | Europe (Frankfurt)         | Not required  | Not available     |
| eu-west-1      | Europe (Ireland)           | Not required  | Not available     |
| eu-west-2      | Europe (London)            | Not required  | Not available     |
| eu-south-1     | Europe (Milan)             | Required      | Not available     |
| eu-west-3      | Europe (Paris)             | Not required  | Not available     |
| eu-north-1     | Europe (Stockholm)         | Not required  | Not available     |
| me-south-1     | Middle East (Bahrain)      | Required      | Not available     |
| sa-east-1      | South America (São Paulo)  | Not required  | Not available     |

*** Availability Zones
:PROPERTIES:
:CUSTOM_ID: Availability-Zones
:END:
- Each Region has multiple, isolated locations known as Availability Zones.
- When you launch an instance, you can select an Availability Zone or let us choose one for you.
- If you distribute your instances across multiple Availability Zones and one instance fails, you can design your application so that an instance in another Availability Zone can handle requests.
** WIP AWS Services                                                  :TOPIC:
:PROPERTIES:
:CUSTOM_ID: AWS-Services
:END:
*** EC2 (Amazon Elastic Compute Cloud)                        :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: EC2-Amazon-Elastic-Compute-Cloud
:END:
**** AMI                                                             :AWS:
:PROPERTIES:
:CUSTOM_ID: AMI
:END:
*** ELB CLB ALB                                               :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: ELB-CLB-ALB
:END:
*** Route 53                                                  :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: Route-53
:END:
*** Beanstalk                                                 :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: AWS_BEANSTALK
:END:
#+call: lg-get-props-entry()
*** WIP ECS                                                   :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: AWS_ECS
:END:
#+call: lg-get-props-entry()
- Amazon Elastic Container Service (Amazon ECS) allows you to easily run, scale, and secure Docker container applications on AWS. Applications packaged as containers locally will deploy and run in the same way as containers managed by Amazon ECS. Amazon ECS eliminates the need to install, operate, and scale your own container orchestration and cluster management infrastructure, and allows you to focus on the resource needs and availability requirements of your containerized application.
- Amazon ECS enables you to grow from a single container to thousands of containers across hundreds of instances without creating additional complexity in how you run your application. You can run anything: applications, batch jobs, or microservices. Amazon ECS abstracts away all the complexity of the infrastructure so you can focus on designing, building, and running containerized applications.
- With Amazon ECS, you can use AWS Fargate to fully manage your infrastructure and just focus on deploying containers Or, you can choose to have complete visibility and control of your underlying server cluster from creating and terminating Docker containers to viewing detailed cluster state information. You can integrate and use your own container scheduler or connect Amazon ECS into your existing software delivery process, such as continuous integration and delivery systems.
*** RDS                                                       :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: RDS
:END:
*** API Gateway                                               :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: AMAZON_API_GATEWAY
:learning_1: https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html
:END:
#+call: lg-get-props-entry()
- is an AWS service for creating, publishing, maintaining, monitoring, and securing REST, HTTP, and WebSocket APIs at any scale. API developers can create APIs that access AWS or other web services, as well as data stored in the AWS Cloud. As an API Gateway API developer, you can create APIs for use in your own client applications. Or you can make your APIs available to third-party app developers. For more information, see Who uses API Gateway?.
- API Gateway creates RESTful APIs that:
  - Are HTTP-based.
  - Enable stateless client-server communication.
  - Implement standard HTTP methods such as GET, POST, PUT, PATCH, and DELETE.
- For more information about API Gateway REST APIs and HTTP APIs, see Choosing between HTTP APIs and REST APIs, Working with HTTP APIs, Use API Gateway to create REST APIs, and Creating a REST API in Amazon API Gateway.
- API Gateway creates WebSocket APIs that:
  - Adhere to the WebSocket protocol, which enables stateful, full-duplex communication between client and server.
  - Route incoming messages based on message content.
- For more information about API Gateway WebSocket APIs, see Use API Gateway to create WebSocket APIs and About WebSocket APIs in API Gateway.
*** AWS Lambda                                                :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: AWS_LAMBDA
:END:
#+call: lg-get-props-entry()
*** DynamoDB                                                  :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: DynamoDB
:END:
*** Kinesis                                                   :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: Kinesis
:END:
*** EFS                                                       :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: EFS
:END:
*** SNS                                                       :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: SNS
:END:
*** S3                                                        :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: S3
:END:
*** EBS                                                       :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: AWS_EBS
:END:
#+call: lg-get-props-entry()
*** CloudWatch                                                :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: CloudWatch
:END:
*** CloudFormation                                            :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: CloudFormation
:END:
*** CloudFront                                                :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: CloudFront
:END:
*** Secrets Manager                                           :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: Secrets-Manager
:END:
*** VPC                                                               :AWS:
:PROPERTIES:
:CUSTOM_ID: AWS_VPC
:END:

*** Wavelength                                                        :AWS:
:PROPERTIES:
:CUSTOM_ID: Wavelength
:END:
- AWS Wavelength allows developers to build applications that deliver ultra-low latencies to mobile devices and end users. Wavelength deploys standard AWS compute and storage services to the edge of telecommunication carriers' 5G networks. Developers can extend an Amazon Virtual Private Cloud (VPC) to one or more Wavelength Zones, and then use AWS resources like Amazon Elastic Compute Cloud (EC2) instances to run applications that require ultra-low latency and a connection to AWS services in the Region.
*** Elasticsearch
:PROPERTIES:
:CUSTOM_ID: Elasticsearch
:END:
** TODO AWS Tools and Frameworks
:PROPERTIES:
:CUSTOM_ID: AWS-Tools-and-Frameworks
:END:
*** TODO boto3                                                        :AWS:
:PROPERTIES:
:CUSTOM_ID: boto3
:END:
*** TODO aws-cli                                                      :AWS:
:PROPERTIES:
:CUSTOM_ID: aws-shell
:END:
*** TODO SAM                                                          :AWS:
:PROPERTIES:
:CUSTOM_ID: SAM
:END:

** TODO GCP Services                                                 :TOPIC:
:PROPERTIES:
:CUSTOM_ID: GCP-Services
:END:
*** TODO BigQuery                                             :GCP:SERVICE:
:PROPERTIES:
:CUSTOM_ID: BigQuery
:END:
*** TODO PubSub                                               :GCP:SERVICE:
:PROPERTIES:
:CUSTOM_ID: PubSub
:END:
*** TODO composer
:PROPERTIES:
:CUSTOM_ID: composer
:END:
*** TODO dataflow
:PROPERTIES:
:CUSTOM_ID: dataflow
:END:
*** TODO automl
:PROPERTIES:
:CUSTOM_ID: automl
:END:
*** TODO dataproc
:PROPERTIES:
:CUSTOM_ID: dataproc
:END:
*** TODO secretmanager
:PROPERTIES:
:CUSTOM_ID: secretmanager
:END:
*** TODO iam
:PROPERTIES:
:CUSTOM_ID: iam
:END:
*** WIP aim:service accounts
:PROPERTIES:
:learning_1: https://cloud.google.com/iam/docs/understanding-service-accounts
:CUSTOM_ID: aim-service-accounts
:END:
#+call: lg-get-props-entry()
- A service account is a special type of Google account intended to represent a non-human user that needs to authenticate and be authorized to access data in Google APIs.
- Typically, service accounts are used in scenarios such as:
  - Running workloads on virtual machines (VMs).
  - Running workloads on on-premises workstations or data centers that call Google APIs.
  - Running workloads which are not tied to the lifecycle of a human user.
- Your application assumes the identity of the service account to call Google APIs, so that the users aren't directly involved.

*** WIP Firebase
:PROPERTIES:
:CUSTOM_ID: Firebase
:END:
- is a platform developed by Google for creating mobile and web applications.
- It was originally an independent company founded in 2011[1].
- In 2014, Google acquired the platform[2] and it is now their flagship offering for app development.
- Firebase is a toolset to “build, improve, and grow your app”, and the tools it gives you cover a large portion of the services that developers would normally have to build themselves, but don’t really want to build, because they’d rather be focusing on the app experience itself.
- This includes things like analytics, authentication, databases, configuration, file storage, push messaging, and the list goes on.
- The services are hosted in the cloud, and scale with little to no effort on the part of the developer.
**** What sort of apps is Firebase good for?
:PROPERTIES:
:CUSTOM_ID: What-sort-of-apps-is-Firebase-good-for
:END:
- There’s really no limit to the types of apps that can be helped by Firebase products. There are only limits to the platforms it can be used on. iOS and Android are the primary targets for the Firebase SDKs, and there’s increasing support for web, Flutter, Unity, and C++. You should also know there’s an Admin SDK available for a variety of languages, to be used with any backend components you might require.
- On top of those SDKs, there’s a library called FirebaseUI (Android, iOS, web) that provides a bunch of helpful utilities to make development with Firebase even easier. And there are also projects such as AngularFire that wrap the web SDKs for use with Angular. These are open source. Firebase likes open source.
** TODO GCP CLI                                                      :TOPIC:
:PROPERTIES:
:CUSTOM_ID: GCP-CLI
:END:
- gcloud

** TODO FINOPS                                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: FINOPS
:END:
*** GCP Cost Model
:PROPERTIES:
:CUSTOM_ID: GCP-Cost-Model
:END:
*** AWS Cost Model
:PROPERTIES:
:CUSTOM_ID: AWS-Cost-Model
:END:
*** data at rest cost
:PROPERTIES:
:CUSTOM_ID: data-at-rest-cost
:END:
*** transfer cost
:PROPERTIES:
:CUSTOM_ID: transfer-cost
:END:
*** CPU cost
:PROPERTIES:
:CUSTOM_ID: CPU-cost
:END:
** WIP Storage:
:PROPERTIES:
:CUSTOM_ID: Storage
:END:
*** AWS S3                                                    :AWS:SERVICE:
:PROPERTIES:
:CUSTOM_ID: AWS-S3
:END:
*** GCS bucket                                                        :GCP:
:PROPERTIES:
:CUSTOM_ID: GCS-bucket
:END:
**** api
:PROPERTIES:
:CUSTOM_ID: api
:END:
**** what it is good for
:PROPERTIES:
:CUSTOM_ID: what-it-is-good-for
:END:
*** WIP MinIO Object Storage
:PROPERTIES:
:learning_1: https://min.io/product/overview
:CUSTOM_ID: MinIO-Object-Storage
:END:
#+call: lg-get-props-entry()
* WIP DEVOPS / SRE   [0/6]                                           :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: DEVOPS
:END:
#+call: lg-get-props-entry()
** WIP Culture
:PROPERTIES:
:learning_1:  https://blog.sonatype.com/principle-based-devops-frameworks-three-ways
:CUSTOM_ID: Culture
:END:
#+call: lg-get-props-entry()
*** TODO The Three Ways
:PROPERTIES:
:learning_1:  https://blog.sonatype.com/principle-based-devops-frameworks-three-ways
:CUSTOM_ID: The-Three-Ways
:END:
#+call: lg-get-props-entry()

The Phoenix Project/DevOps Handbook’s Three Ways
If you’ve read either The Phoenix Project or The DevOps Handbook, you’ve been introduced to The Three Ways framework for DevOps:

- The First Way: Principles of Flow
- The Second Way: Principles of Feedback
- The Third Way: Principles of Continuous Learning

**** The First Way: Principles of Flow
:PROPERTIES:
:CUSTOM_ID: The-First-Way-Principles-of-Flow
:END:
The First Way is mostly concerned with accelerating the “flow” of work throughout a process. Gene Kim also refers to the First Way as Systems Thinking in his article The Three Ways: Principles Underpinning DevOps. Whether you’re calling it Flow or Systems Thinking, the principles underpinning the First Way are working toward the same end: viewing the flow of work as one continuous system (unsiloed) that can be continually refined and optimized.

Some of the key principles of the First Way are:
- *Making work “visible”.* Unlike manufacturing processes, which are easily observable on a plant floor, the flow of software through its development lifecycle is not easily seen. Using methods such as Kanban boards can surface the activities going on behind the scenes, by showing the left-to-right movement of a user story through the development phases.
- *Limiting work-in-progress (WIP).* Keeping work-in-progress to a minimum has also been shown to accelerate work flow, because it minimizes multi-tasking and context-switching.
- *Reducing batch sizes*. “Chunking” work into smaller pieces like a two-week sprint can also help deliver features (albeit smaller ones) and bug fixes to the customer faster. Issues are often caught earlier when those updates and additions are released sooner.
- *Reducing hand-offs between teams.* The risk of “dropping the baton” increases as the hand-offs do. Although hand-offs can’t be completely minimized, the key is to keep the teams in tight communication with one another so that the hand-off itself is almost a non-event rather than a large ordeal with the potential for communication missteps along the way.
- *Identifying and removing constraints and waste.* Constraints might be bottlenecks in the process, such as environments, test setup, and overly tight architecture, while waste includes things like manual work, heroics, and context-switching.
**** The Second Way: Principles of Feedback
:PROPERTIES:
:CUSTOM_ID: The-Second-Way-Principles-of-Feedback
:END:
The Second Way works to enable fast and constant feedback cycles throughout all stages of a development cycle.

Some of the key principles of the Second Way are:
- *Swarming and solving problems to build new knowledge.* This principle fits into the “fail fast” mentality, so that teams can find issues with an implementation as soon as possible and address them early and often as iterations continue.
- *Pushing quality closer to source.* This principle is at the core of the DevSecOps movement, which is concerned with addressing security concerns during the development cycle, instead of at the end, when rework to remediate is more difficult and costly.
- *Optimizing for downstream work centers.*  This principle works against the “throw it over the wall” mentality, by underscoring that development should be just as invested in their application being deployable, working with operations to bridge that gap (and vice versa).
**** The Third Way: Principles of Continuous Learning
:PROPERTIES:
:CUSTOM_ID: The-Third-Way-Principles-of-Continuous-Learning
:END:
The Third Way seeks to create a culture of continual learning and experimentation within the development organization.

Some of the key principles of the Third Way are:
- *Enabling organizational learning and a safety culture.* Leaders must help “set the tone” for the organization, making it okay to learn, make mistakes, and try again.
- *Institutionalizing the improvement of daily work.* Improving what you do and how you accomplish it should be part of everyone’s daily thinking and call to action.
- *Transforming local discoveries to global improvements.* Surfacing and sharing improvements at all levels will help enable a “bubble up” culture of continuous improvement.
- *Injecting resilience patterns into daily work.* Some examples might include rehearsing failures, and working toward improving key metrics for deployment.
- *Leaders enforcing a learning culture.* Organization-wide learning is unlikely to take hold and become pervasive unless it is sanctioned and exemplified by its leaders. So being intentional about communicating the value of learning and problem-solving is crucial to building that culture.
*** ACCELERATE
:PROPERTIES:
:CUSTOM_ID: ACCELERATE
:END:
*** CALMS (Culture, Automation, Lean, Measurement, Sharing)
:PROPERTIES:
:learning_1:  https://blog.sonatype.com/principle-based-devops-frameworks-calms
:CUSTOM_ID: CALMS-Culture-Automation-Lean-Measurement-Sharing
:END:
#+call: lg-get-props-entry()
- Created by Jez Humble, co-author of The DevOps Handbook and Accelerate, the CALMS framework is used as a means of assessing whether an organization is ready to adopt DevOps processes, or how an organization is progressing in their DevOps transformation. It is based on the following five pillars:

- *Culture.* Before silos can be torn down, there needs to be a culture of shared responsibility, or at least a group of people devoted to establishing that culture in a grassroots type of way, with management approval and support.
- *Automation.* Similar to the technical practices centered around continuous delivery mentioned above, teams undertaking a DevOps transformation should be devoted to automating as many manual tasks as possible, especially with respect to continuous integration and test automation.
- *Lean.* Development teams are making use of lean principles to eliminate waste and optimize the value stream, such as minimizing WIP, making work visible, and reducing hand-off complexity and wait times.
- *Measurement.* The organization is devoted to collecting data on their processes, deployments, etc., in order to understand their current capabilities and where improvements could be achieved.
- *Sharing.* A culture of openness and sharing within and between teams (and enabled with the proper tools) keeps everyone working toward the same goals and eases friction with hand-offs when issues arise.
** WIP TCP/IP
:PROPERTIES:
:CUSTOM_ID: TCP-IP
:END:
*** IPv4 address / netmask / CIDR
:PROPERTIES:
:CUSTOM_ID: IPv4-address-netmask-CIDR
:END:
**** Special IPv4 Ranges
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/IPv4#Special-use_addresses
:CUSTOM_ID: Special-IPv4-Ranges
:END:
#+call: lg-get-props-entry()

|--------------------+-----------------------------+---------------------+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Address block      | Address range               | Number of addresses | Scope           | Description                                                                                                                                                                   |
|                    |                             |                 <r> |                 |                                                                                                                                                                               |
|--------------------+-----------------------------+---------------------+-----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 0.0.0.0/8          | 0.0.0.0–0.255.255.255       |          16 777 216 | Software        | Current network[3] (only valid as source address).                                                                                                                            |
| 10.0.0.0/8         | 10.0.0.0–10.255.255.255     |          16 777 216 | Private network | Used for local communications within a private network.[4]                                                                                                                    |
| 100.64.0.0/10      | 100.64.0.0–100.127.255.255  |           4 194 304 | Private network | Shared address space[5] for communications between a service provider and its subscribers when using a carrier-grade NAT.                                                     |
| 127.0.0.0/8        | 127.0.0.0–127.255.255.255   |          16 777 216 | Host            | Used for loopback addresses to the local host.[3]                                                                                                                             |
| 169.254.0.0/16     | 169.254.0.0–169.254.255.255 |              65 536 | Subnet          | Used for link-local addresses[6] between two hosts on a single link when no IP address is otherwise specified, such as would have normally been retrieved from a DHCP server. |
| 172.16.0.0/12      | 172.16.0.0–172.31.255.255   |           1 048 576 | Private network | Used for local communications within a private network.[4]                                                                                                                    |
| 192.0.0.0/24       | 192.0.0.0–192.0.0.255       |                 256 | Private network | IETF Protocol Assignments.[3]                                                                                                                                                 |
| 192.0.2.0/24       | 192.0.2.0–192.0.2.255       |                 256 | Documentation   | Assigned as TEST-NET-1, documentation and examples.[7]                                                                                                                        |
| 192.88.99.0/24     | 192.88.99.0–192.88.99.255   |                 256 | Internet        | Reserved.[8] Formerly used for IPv6 to IPv4 relay[9] (included IPv6 address block 2002::/16).                                                                                 |
| 192.168.0.0/16     | 192.168.0.0–192.168.255.255 |              65 536 | Private network | Used for local communications within a private network.[4]                                                                                                                    |
| 198.18.0.0/15      | 198.18.0.0–198.19.255.255   |             131 072 | Private network | Used for benchmark testing of inter-network communications between two separate subnets.[10]                                                                                  |
| 198.51.100.0/24    | 198.51.100.0–198.51.100.255 |                 256 | Documentation   | Assigned as TEST-NET-2, documentation and examples.[7]                                                                                                                        |
| 203.0.113.0/24     | 203.0.113.0–203.0.113.255   |                 256 | Documentation   | Assigned as TEST-NET-3, documentation and examples.[7]                                                                                                                        |
| 224.0.0.0/4        | 224.0.0.0–239.255.255.255   |         268 435 456 | Internet        | In use for IP multicast.[11] (Former Class D network).                                                                                                                        |
| 240.0.0.0/4        | 240.0.0.0–255.255.255.254   |         268 435 455 | Internet        | Reserved for future use.[12] (Former Class E network).                                                                                                                        |
| 255.255.255.255/32 | 255.255.255.255             |                   1 | Subnet          | Reserved for the "limited broadcast" destination address.[3][13]                                                                                                              |
** TODO Linux [0/36]
:PROPERTIES:
:CUSTOM_ID: Linux-0-36
:END:
*** TODO cron
:PROPERTIES:
:CUSTOM_ID: cron
:END:
*** TODO runlevel / init / inittab
:PROPERTIES:
:CUSTOM_ID: runlevel-init-inittab
:END:
*** TODO systemd
:PROPERTIES:
:CUSTOM_ID: systemd
:END:
*** TODO snap
:PROPERTIES:
:CUSTOM_ID: snap
:END:
*** TODO apt
:PROPERTIES:
:CUSTOM_ID: apt
:END:
*** TODO ssh
:PROPERTIES:
:CUSTOM_ID: ssh
:END:
**** TODO how to create trust between computers
:PROPERTIES:
:CUSTOM_ID: how-to-create-trust-between-computers
:END:
*** TODO tarpit
:PROPERTIES:
:CUSTOM_ID: tarpit
:END:
*** TODO awk
:PROPERTIES:
:learning_1: https://www.digitalocean.com/community/tutorials/how-to-use-the-awk-language-to-manipulate-text-in-linux
:learning_1: https://linuxhint.com/20_awk_examples/
:CUSTOM_ID: awk
:END:
#+call: lg-get-props-entry()
*** TODO sed
:PROPERTIES:
:CUSTOM_ID: sed
:END:
*** TODO grep
:PROPERTIES:
:CUSTOM_ID: grep
:END:
*** TODO tail
:PROPERTIES:
:CUSTOM_ID: tail
:END:
*** TODO head
:PROPERTIES:
:CUSTOM_ID: head
:END:
*** TODO rsync
:PROPERTIES:
:CUSTOM_ID: rsync
:END:
*** TODO mount
:PROPERTIES:
:CUSTOM_ID: mount
:END:
*** TODO ls / ps / htop
:PROPERTIES:
:CUSTOM_ID: ls-ps-htop
:END:
*** TODO bash                                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: bash
:END:
**** here doc?                                         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: here-doc
:END:
**** bracket expansion?                                         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: bracket-expansion
:END:
**** input/output redirection                                   :QUESTION:
:PROPERTIES:
:CUSTOM_ID: input-output-redirection
:END:
*** TODO regexp
:PROPERTIES:
:CUSTOM_ID: regexp
:END:
*** TODO stdin stdout stderr
:PROPERTIES:
:CUSTOM_ID: stdin-stdout-stderr
:END:
*** TODO list open ports
:PROPERTIES:
:CUSTOM_ID: list-open-ports
:END:
*** TODO iptables
:PROPERTIES:
:CUSTOM_ID: iptables
:END:
*** TODO BPF
:PROPERTIES:
:CUSTOM_ID: BPF
:END:
*** TODO list open files
:PROPERTIES:
:CUSTOM_ID: list-open-files
:END:
*** TODO NFS
:PROPERTIES:
:CUSTOM_ID: NFS
:END:
*** TODO file types:
:PROPERTIES:
:CUSTOM_ID: file-types
:END:
**** block device
:PROPERTIES:
:CUSTOM_ID: block-device
:END:
**** character device
:PROPERTIES:
:CUSTOM_ID: character-device
:END:
**** named pipe
:PROPERTIES:
:CUSTOM_ID: named-pipe
:END:
**** symlink
:PROPERTIES:
:CUSTOM_ID: symlink
:END:
*** TODO etc/nsswitch./conf
:PROPERTIES:
:CUSTOM_ID: etc-nsswitch-conf
:END:
*** TODO etc/resolv.conf
:PROPERTIES:
:CUSTOM_ID: etc-resolv-conf
:END:
*** TODO ip
:PROPERTIES:
:CUSTOM_ID: ip
:END:
#+begin_src bash
ip addr sh
ip route sh
#+end_src
*** TODO nmap
:PROPERTIES:
:CUSTOM_ID: nmap
:END:
*** TODO nc
:PROPERTIES:
:CUSTOM_ID: nc
:END:
*** TODO socat
:PROPERTIES:
:CUSTOM_ID: socat
:END:
*** TODO chmod
:PROPERTIES:
:CUSTOM_ID: chmod
:END:
*** TODO dd
:PROPERTIES:
:CUSTOM_ID: dd
:END:
*** TODO tar
:PROPERTIES:
:CUSTOM_ID: tar
:END:
*** TODO apt-get /  apt / dpkg
:PROPERTIES:
:CUSTOM_ID: apt-get-apt-dpkg
:END:
*** TODO wget
:PROPERTIES:
:CUSTOM_ID: wget
:END:
*** TODO curl
:PROPERTIES:
:CUSTOM_ID: LINUX-CURL
:END:
*** TODO find
:PROPERTIES:
:CUSTOM_ID: find
:END:

** TODO Tools
:PROPERTIES:
:CUSTOM_ID: DEVOPS-TOOLS
:END:
*** Git                                                             :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Git
:END:
**** What is the use of Staging area or Indexing in Git?        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-the-use-of-Staging-area-or-Indexing-in-Git
:END:
:ANSWER:
- From Git’s perspective, there are three areas where the file changes can be kept i.e.:
  - working directory,
  - staging area, and 
  - repository.

- First, you make changes in your project’s working directory stored on your computer file system.
- All the changes remain here until you add them to an intermediate area called staging area.

- You can stage the changes by executing ~git add .~
- This staging area gives you a preview of your next commit and basically lets you fine-tune your commits.
- You can add or remove changes in the staging area until you are satisfied with the version you are going to commit.

- Once you verify your changes and sign off the stage changed, then you can finally commit the changes.
- Upon commit, they go the local repository i.e. into ~.git/objects~ directory.

- If you use Git GUI, then you will see the option to stage your changes.

- In the below screenshot, the file sample.txt is under unstaged changes area which means that it’s in your working directory.

- Staging is also referred to as indexing because git maintains an index file to keep track of your file changes across these three areas.
- The files which are staged are currently in your index.
- When you add changes to the staging area, then the information in the index gets updated.
- When you do a commit, its actually what’s in the index that gets committed, and not what’s in the working directory.
- You can use the git status command to see what’s in the index.
:END:
**** TODO squash? Waht it is? whan to use it awht it is good for?
:PROPERTIES:
:CUSTOM_ID: squash-Waht-it-is-whan-to-use-it-awht-it-is-good-for
:END:
**** TODO Pull request
:PROPERTIES:
:CUSTOM_ID: Pull-request
:END:
**** TODO Cherry pick
:PROPERTIES:
:CUSTOM_ID: Cherry-pick
:END:
**** TODO Flow
:PROPERTIES:
:CUSTOM_ID: Flow
:END:
**** TODO Push
:PROPERTIES:
:CUSTOM_ID: Push
:END:
**** TODO Rebase vs Merge - semantical and syntactical diff
:PROPERTIES:
:CUSTOM_ID: Rebase-vs-Merge-semantical-and-syntactical-diff
:END:
**** TODO Stash
:PROPERTIES:
:CUSTOM_ID: Stash
:END:
*** WIP DNS                                                         :TOPIC:
:PROPERTIES:
:learning_1: https://www.freshersemploy.com/dns-interview-questions-answers/
:CUSTOM_ID: DNS
:END:
#+call: lg-get-props-entry()
**** What is DNS?
:PROPERTIES:
:CUSTOM_ID: What-is-DNS
:END:
- Domain Name Systems(DNS) maps domain names with Internet Protocol(IP) address, thus helping computer for translating human-readable(domain name) to machine-readable language(IP address).
**** What is Nameserver?
:PROPERTIES:
:CUSTOM_ID: What-is-Nameserver
:END:
- It is used for storing the information for the domain name to IP and IP to the domain name. In other words, the name server is used for storing records of the domain names, Name servers help for convert domain name to IP address.
**** What is DNS Spoofing?
:PROPERTIES:
:CUSTOM_ID: What-is-DNS-Spoofing
:END:
- DNS Spoofing occurs when a hacker is redirecting website traffic maliciously to spread the malware or to compromise the user's data through forged DNS record.
- When a user visits a website(like freshersemploy.com) in a browser, it needs to be resolved from human-readable to machine-readable(i.e. IP addresses) using DNS resolver. To decrease the time and resolve faster, DNS resolvers cache the data and store for a specific time(until it expires). An attacker can inject forged DNS entry, thus causing DNS Cache Poisoning and instead of freshersemploy.com, the attacker will redirect it to the wrong domain or fake website.
**** How can we prevent DNS Spoofing?
:PROPERTIES:
:CUSTOM_ID: How-can-we-prevent-DNS-Spoofing
:END:
- DNS Spoofing or DNS Cache Poisoning can be avoided by following guidelines:
  - From a users point of view, it is almost impossible for users to detect whether the DNS records are compromised, but users should be alerted when accessing the sites like banking, payment website where credit card details are used by checking the domain name in the browser and does it have a valid SSL certificate.
  - Domain owner and DNS provider cannot avoid DNS Spoofing but surely can take protective measures to avoid the compromise of DNS records.
    - Using Domain Name System Security Extensions(DNSSEC) which helps in determining the DNS records authenticity by signing each request with certified signature and this is recommended by ICANN. Still this in process of implementation.
**** What is Round Robin DNS? What is the purpose of it?
:PROPERTIES:
:CUSTOM_ID: What-is-Round-Robin-DNS-What-is-the-purpose-of-it
:END:
- Round Robin DNS is a technique for load distribution, load balancing, fault-tolerance service such as mail server, FTP server etc. which enables istribution of load evenly among multiple servers using various DNS A addresses.
- Suppose a domain abc.com is configured with Round robin DNS which has 3 potential IP mapping to the same domain(i.e. freshersemploy.com) as follows:
#+begin_example
freshersemploy.com -- 104.28.26.01
freshersemploy.com -- 104.28.26.02
freshersemploy.com -- 104.28.26.03
#+end_example
- Then the first request will go to ~104.28.26.01~, the second request will go to ~104.28.26.02~ and the third request will go to ~104.28.26.03~, thus DNS queries are responded by returning IP addresses in a rotation.
**** What is primary and secondary name server?
:PROPERTIES:
:CUSTOM_ID: What-is-primary-and-secondary-name-server
:END:
- Primary name server reads the data from the domain zone, it has DNS records of domain names and it replicates the data with the secondary name server.
- A secondary name server is the back up of primary name server which is used for high reliability, in case the primary name server is having an issue or not reachable.
**** What is DNS resolver?
:PROPERTIES:
:CUSTOM_ID: What-is-DNS-resolver
:END:
- DNS resolvers are being used by ISP (Internet service provider) for the user request to resolve the domain name. If a user request for google.com, DNS resolver needs to contact TLD(Top Level Domain) i.e. .com, for translation of domain name to IP address and it caches the data if the user again queries for the same domain, thus reducing the loads on the server and response time.
**** What is the difference between URL and Domain?
:PROPERTIES:
:CUSTOM_ID: What-is-the-difference-between-URL-and-Domain
:END:
- URL stands for Uniform Resource Locator. URL specifies the full address of a webpage. It consists of three components: protocol(like HTTP, mailto, ftp), domain name(like freshersemploy.com) and file name(eg. homepage.html)
- e.g.:
  - [[https://www.freshersemploy.com/]]
  - [[https://www.freshersemploy.com/html-interview-questions-answers/]]
  - [[mailto:admin@freshersemploy.com]]

- A domain is the name of a website with the top-level domain(like .com, .org etc.). A domain is a part of URL.
- e.g.:
  - [[https://www.freshersemploy.com/]]
  - [[mailto:admin@freshersemploy.com][admin@freshersemploy.com]]

**** What is DNS server?                                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-DNS-server
:END:
- DNS servers resolve IP address to respective hostnames and it maintains directory or database to store the information.
- When we try to access the website (like /*freshersemploy.com)*/, DNS servers help to translate to machine-readable language i.e. IP address (like /*104.28.27.67*/).
**** What are the different types of records in DNS?            :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-are-the-different-types-of-records-in-DNS
:END:
- Some of commonly used of DNS records are A, CNAME, NS, MX, PTR, SOA etc.
**** Explain SOA record?                                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Explain-SOA-record
:END:
- Start of Authority(SOA) records stores essential information(like refresh rate, expiry, TTL etc) in domain name system(DNS) in a zone file.

; name TTL class rr Nameserver email-address freshersemploy.com. 12000 IN SOA ns.nameserver.com. root.ns.nameserver.com. ( 2098163206 ; Serial number
12000 ; Refresh rate in seconds 3600 ; Update Retry in seconds 5788864; Expiry in seconds 100 ; minimum in seconds )

#+begin_src dns
; name TTL class rr Nameserver email-address
freshersemploy.com. 12000 IN SOA
ns.nameserver.com. root.ns.nameserver.com.
(
    2098163206 ; Serial number
    12000 ; Refresh rate in seconds
    3600 ; Update Retry in seconds
    5788864; Expiry in seconds
    100 ; minimum in seconds )
#+end_src


- *Serial Number:* It has the serial number, which gets increments whenever there is a change in the DNS records.
- *Refresh interval:* It gets refresh at the specific interval and if there any changes in the records, data is replicated.
- *Retry:* If the propagation gets failed, it will retry after specific time which is defined in the zone file.
- *Expire:* It is set to have an expiry date, as specified in the zone file. Also used for secondary server how long it should be active in case the primary DNS server is down.
- *TTL:* It has the default time-to-live(TTL),

A zone file should have only one SOA record and it must be at the top of it.

**** What is the use of PTR in DNS?                             :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-the-use-of-PTR-in-DNS
:END:

PTR(Pointer) records are used for mapping IP addresses which are associated with hostname name. It is also called has reverse DNS lookup as it
resolves IP address to domain or hostname. There must be A record for every PTR record. PTR is mainly used for the mail server.

**** Explain CNAME record?                                      :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Explain-CNAME-record
:END:
- CNAME record stands for Canonical Name record. It used as the alias for domain or the Canonical name(another name) for a domain.
- For example, suppose someone incorrectly types(or misspelled the website name) like fresher*s*employ.com as fresheremploy.com(we should also own this domain), then using CNAME record, we can redirect to fresher*s*employ.com
- It is a type of resource record in DNS which is specified in the zone file. CNAME records should always point to another domain and never directly points to IP address.

**** Explain Dynamic DNS                                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Explain-Dynamic-DNS
:END:
- Dynamic DNS helps for automatically updating the name servers whenever there is a change in the IP address in the Domain Name System(DNS).

**** What is Resource Record?                                   :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-Resource-Record
:END:
- Resource Record(RR) defines the elements or attributes of a domain name in DNS zone file like Address(A) record, Mail Exchange(MX) record etc. which helps in name resolutions.
- Some of the most common Resource Records are:

- A -- IPv4 Address record
- AAAA -- IPv6 Address record
- CNAME -- Canonical Name
- MX -- Mail Exchange
- PTR -- Pointer
- SOA -- Start of Authority
- NS -- Name Server

**** What is DNS Zone?                                          :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-DNS-Zone
:END:
- A DNS zone file contains the mapping between a domain name, IP address, recourse records etc. in text representative format. Also, DNS zone refers to the administrative responsibility in the DNS.

**** Define TTL
:PROPERTIES:
:CUSTOM_ID: Define-TTL
:END:
- Time-to-live caches the DNS records for a specific period of time(when TTL expires, it has to query new record). It helps in queries the records faster, eventually reducing the load on the DNS server.

**** Explain MX record?
:PROPERTIES:
:CUSTOM_ID: Explain-MX-record
:END:
- Mail Exchange(MX) record is a type of resource record which is used for email sending and delivery. It must be specified in the DNS zone files mails for the domain.

**** What is Forward Lookup
:PROPERTIES:
:CUSTOM_ID: What-is-Forward-Lookup
:END:
- Forward Lookup is used to find the IP address through the domain name.

**** What is Reverse Lookup
:PROPERTIES:
:CUSTOM_ID: What-is-Reverse-Lookup
:END:
- Reverse Lookup is used for finding the domain name through it IP.


**** TODO What is  DKIM
:PROPERTIES:
:CUSTOM_ID: What-is-DKIM
:END:

*** JFrog: Artifactory
:PROPERTIES:
:CUSTOM_ID: JFrog-Artifactory
:END:
*** Nexus ... sunset
:PROPERTIES:
:CUSTOM_ID: Nexus-sunset
:END:
*** Docker                                                          :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Docker
:END:
**** TODO dockerhub :-)
:PROPERTIES:
:CUSTOM_ID: dockerhub
:END:
**** TODO docker file
:PROPERTIES:
:CUSTOM_ID: docker-file
:END:
**** TODO docker image
:PROPERTIES:
:CUSTOM_ID: docker-image
:END:
**** TODO docker compose
:PROPERTIES:
:CUSTOM_ID: docker-compose
:END:
**** TODO docker swarm
:PROPERTIES:
:CUSTOM_ID: docker-swarm
:END:
**** TODO linux namespaces
:PROPERTIES:
:CUSTOM_ID: linux-namespaces
:END:
**** TODO cgroups
:PROPERTIES:
:CUSTOM_ID: cgroups
:END:
**** TODO OCI
:PROPERTIES:
:CUSTOM_ID: OCI
:END:
**** TODO volumes
:PROPERTIES:
:CUSTOM_ID: volumes
:END:
**** TODO networks
:PROPERTIES:
:CUSTOM_ID: networks
:END:
**** TODO BuildKit
:PROPERTIES:
:CUSTOM_ID: BuildKit
:END:
**** TODO DTR - docker trusted registry
:PROPERTIES:
:CUSTOM_ID: DTR-docker-trusted-registry
:END:

*** Terraform                                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Terraform
:END:
**** resource
:PROPERTIES:
:CUSTOM_ID: resource
:END:
**** module
:PROPERTIES:
:CUSTOM_ID: module
:END:
**** state
:PROPERTIES:
:CUSTOM_ID: state
:END:
**** backend
:PROPERTIES:
:CUSTOM_ID: backend
:END:
*** Chef                                                            :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Chef
:END:
*** Puppet                                                          :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Puppet
:END:
*** Ansible                                                         :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Ansible
:END:
*** Cloud Formation                                                 :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Cloud-Formation
:END:
*** Hashicorp: Consul                                               :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Hashicorp-Consul
:END:
*** Hashicorp: Vault                                                :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Hashicorp-Vault
:END:
*** TODO Zookeeper                                                  :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Zookeeper
:END:
*** WIP Kibana                                                      :TOPIC:
:PROPERTIES:
:learning_1: https://logz.io/blog/grafana-vs-kibana/
:CUSTOM_ID: Kibana
:END:
#+call: lg-get-props-entry()
- Kibana is the ‘K’ in the ELK Stack, the world’s most popular open source log analysis platform, and provides users with a tool for exploring, visualizing, and building dashboards on top of the log data stored in Elasticsearch clusters.
- Kibana’s core feature is data querying and analysis. Using various methods, users can search the data indexed in Elasticsearch for specific events or strings within their data for root cause analysis and diagnostics. Based on these queries, users can use Kibana’s visualization features which allow users to visualize data in a variety of different ways, using charts, tables, geographical maps and other types of visualizations.
*** WIP Graphana                                                    :TOPIC:
:PROPERTIES:
:learning_1: https://logz.io/blog/grafana-vs-kibana/
:CUSTOM_ID: Graphana
:END:
#+call: lg-get-props-entry()
- Grafana is an open source visualization tool that can be used on top of a variety of different data stores but is most commonly used together with Graphite, InfluxDB, Prometheus, Elasticsearch and Logz.io. As it so happens, Grafana began as a fork of Kibana, trying to supply support for metrics (a.k.a. monitoring) that Kibana (at the time) did not provide much if any such support for.
- Essentially, Grafana is a feature-rich replacement for Graphite-web, which helps users to easily create and edit dashboards. It contains a unique Graphite target parser that enables easy metric and function editing. Users can create comprehensive charts with smart axis formats (such as lines and points) as a result of Grafana’s fast, client-side rendering — even over long ranges of time — that uses Flot as a default option.
*** TODO ELK                                                        :TOPIC:
:PROPERTIES:
:CUSTOM_ID: ELK
:END:
*** TODO DynaTrace                                                  :TOPIC:
:PROPERTIES:
:CUSTOM_ID: DynaTrace
:END:
*** TODO Piwik                                                      :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Piwik
:END:
*** TODO argocd                                                     :TOPIC:
:PROPERTIES:
:CUSTOM_ID: argocd
:END:
*** TODO fluxcd                                                     :TOPIC:
:PROPERTIES:
:CUSTOM_ID: fluxcd
:END:
*** TODO Prometheus                                                 :TOPIC:
** TODO Observability
:PROPERTIES:
:CUSTOM_ID: Observability
:END:
*** 3 pillars
:PROPERTIES:
:CUSTOM_ID: 3-pillars
:END:
**** logs
:PROPERTIES:
:CUSTOM_ID: logs
:END:
**** metrics
:PROPERTIES:
:CUSTOM_ID: metrics
:END:
**** traces
:PROPERTIES:
:CUSTOM_ID: traces
:END:
** WIP Concepts [0/6]
:PROPERTIES:
:CUSTOM_ID: Concepts
:END:
#+call: lg-get-props-entry()
*** TODO ChatOps                                                  :CONCEPT:
:PROPERTIES:
:learning_1: https://www.pagerduty.com/blog/what-is-chatops/
:CUSTOM_ID: ChatOps
:END:
#+call: lg-get-props-entry()
- ChatOps, a term widely credited to GitHub, is all about conversation-driven development.While in a chat room, team members type commands that the chatbot is configured to execute through custom scripts and plugins. These can range from code deployments, to security event responses, to team member notifications. By bringing your tools into your conversations and using a chatbot modified to work with key plugins and scripts, teams can automate tasks and collaborate, working better, cheaper and faster—allowing the entire team to collaborate in real time as commands are executed.

*** TODO Rugged DevOps                                            :CONCEPT:
:PROPERTIES:
:learning_1: https://ruggedsoftware.org/
:CUSTOM_ID: Rugged-DevOps
:END:
#+call: lg-get-props-entry()
- The Rugged Manifesto:
  - I am rugged and, more importantly, my code is rugged.
  - I recognize that software has become a foundation of our modern world.
  - I recognize the awesome responsibility that comes with this foundational role.
  - I recognize that my code will be used in ways I cannot anticipate, in ways it was not designed, and for longer than it was ever intended.
  - I recognize that my code will be attacked by talented and persistent adversaries who threaten our physical, economic, and national security.
  - I recognize these things - and I choose to be rugged.
  - I am rugged because I refuse to be a source of vulnerability or weakness.
  - I am rugged because I assure my code will support its mission.
  - I am rugged because my code can face these challenges and persist in spite of them.
  - I am rugged, not because it is easy, but because it is necessary and I am up for the challenge.
*** TODO Tail Latency                                             :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Tail-Latency
:END:
*** TODO SLI                                                      :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: SLI
:END:
*** TODO SLO                                                      :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: SLO
:END:
*** TODO SLA                                                      :CONCEPT: 
:PROPERTIES:
:CUSTOM_ID: SLA
:END:

** TODO CNCF                                                         :TOPIC:
:PROPERTIES:
:CUSTOM_ID: CNCF
:END:
** WIP K8S / Kubernetes: [0/27]                                      :TOPIC:
:PROPERTIES:
:learning_1: https://classpert.com/kubernetes
:CUSTOM_ID: K8S-Kubernetes-0-27
:END:
#+call: lg-get-props-entry()
*** TODO What is a service                                       :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-a-service
:END:
*** WIP What are network policies?                               :QUESTION:
:PROPERTIES:
:learning_1: https://github.com/ahmetb/kubernetes-network-policy-recipes
:learning_1: https://www.infoq.com/news/2019/12/network-isolation-kubernetes/
:CUSTOM_ID: What-are-network-policies
:END:
#+call: lg-get-props-entry()
:ANSWER:
- firewall on the  pod level
:END:
*** WIP what are labels?
:PROPERTIES:
:CUSTOM_ID: what-are-labels
:END:
:ANSWER:
- key value pairs that can be assigned to majority of Kubernetes objects
:END:
*** WIP What are network policies rules?                         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-are-network-policies-rules
:END:
:ANSWER:
1) traffic is allowed unless there is a network policy that blocks it
2) rules apply as soon as pod is selected and it is deny by default unless stated differently
3) you then only write rules that allow (whitelist)
4) rules are aditive "ored" i.e. or is applied and single allow rule is enough to open the flow
5) network policies are scoped to a namespace they are deployed to
6) ports in rules are ports on pods not ports of services
:END:
*** WIP what are podSelectors?                                   :QUESTION:
:PROPERTIES:
:learning_1:  https://medium.com/@zwhitchcox/matchlabels-labels-and-selectors-explained-in-detail-for-beginners-d421bdd05362
:CUSTOM_ID: what-are-podSelectors
:END:
#+call: lg-get-props-entry()
:ANSWER:
matchLabels:
:END:
*** WIP what is namespaceSelector?                               :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-namespaceSelector
:END:
:ANSWER:
:END:
*** WIP what is empty selector:                                  :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-empty-selector
:END:
:ANSWER:
example: matchLabels:{}
:END:
*** WIP what ipBlock and hwhat are they good for?
:PROPERTIES:
:CUSTOM_ID: what-ipBlock-and-hwhat-are-they-good-for
:END:
*** WIP what is a network policy plugin and how you enable that?
:PROPERTIES:
:CUSTOM_ID: what-is-a-network-policy-plugin-and-how-you-enable-that
:END:
:answer:
- Calico,  for example
- iptables vs overlay network (calico is iptables based)
:end:
*** WIP what is a RBAC
:PROPERTIES:
:learning_1: https://www.cncf.io/blog/2018/08/01/demystifying-rbac-in-kubernetes/
:CUSTOM_ID: what-is-a-RBAC
:END:
#+call: lg-get-props-entry()
*** WIP network policy API
:PROPERTIES:
:CUSTOM_ID: network-policy-API
:END:
*** TODO whats is kube-dns
:PROPERTIES:
:CUSTOM_ID: whats-is-kube-dns
:END:
*** TODO helm
:PROPERTIES:
:CUSTOM_ID: helm
:END:
*** TODO chart
:PROPERTIES:
:CUSTOM_ID: chart
:END:
*** TODO template
:PROPERTIES:
:CUSTOM_ID: template
:END:
*** TODO cluster
:PROPERTIES:
:CUSTOM_ID: cluster
:END:
*** TODO pod
:PROPERTIES:
:CUSTOM_ID: pod
:END:
*** TODO node
:PROPERTIES:
:CUSTOM_ID: node
:END:
*** TODO service mesh
:PROPERTIES:
:CUSTOM_ID: service-mesh
:END:
*** TODO ingress controller
:PROPERTIES:
:CUSTOM_ID: ingress-controller
:END:
*** TODO ingress and exgress?
:PROPERTIES:
:CUSTOM_ID: ingress-and-exgress
:END:
*** TODO etcd
:PROPERTIES:
:CUSTOM_ID: etcd
:END:
*** TODO secret
:PROPERTIES:
:CUSTOM_ID: secret
:END:
*** TODO operator
:PROPERTIES:
:CUSTOM_ID: operator
:END:
*** WIP CRD / Custom Resources
:PROPERTIES:
:CUSTOM_ID: CRD-Custom-Resources
:END:
:answer:
- A resource is an endpoint in the Kubernetes API that stores a collection of API objects of a certain kind; for example, the built-in pods resource contains a collection of Pod objects.
- A custom resource is an extension of the Kubernetes API that is not necessarily available in a default Kubernetes installation. It represents a customization of a particular Kubernetes installation. However, many core Kubernetes functions are now built using custom resources, making Kubernetes more modular.
- Custom resources can appear and disappear in a running cluster through dynamic registration, and cluster admins can update custom resources independently of the cluster itself. Once a custom resource is installed, users can create and access its objects using kubectl, just as they do for built-in resources like Pods.
:end:
*** TODO liveness/readines probes
:PROPERTIES:
:CUSTOM_ID: liveness-readines-probes
:END:
*** TODO kubectl
:PROPERTIES:
:CUSTOM_ID: kubectl
:END:

** TODO gitops
:PROPERTIES:
:CUSTOM_ID: gitops
:END:
* WIP Web Front End [0/9]                                            :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: WEB
:END:
#+call: lg-get-props-entry()
** WIP React Family
:PROPERTIES:
:CUSTOM_ID: React-Family
:END:
*** TODO React
:PROPERTIES:
:CUSTOM_ID: React
:END:
*** TODO React Native
:PROPERTIES:
:CUSTOM_ID: React-Native
:END:
*** TODO react-hooks
:PROPERTIES:
:CUSTOM_ID: react-hooks
:END:
*** TODO react-styled-components
:PROPERTIES:
:CUSTOM_ID: react-styled-components
:END:
*** Redux toolkit
:PROPERTIES:
:CUSTOM_ID: REDUX_TOOLKIT
:learning_1: https://redux.js.org/redux-toolkit/overview
:END:
- What is Redux Toolkit?
- Redux Toolkit is our official, opinionated, batteries-included toolset for efficient Redux development. It is intended to be the standard way to write Redux logic, and we strongly recommend that you use it.
- It includes several utility functions that simplify the most common Redux use cases, including store setup, defining reducers, immutable update logic, and even creating entire "slices" of state at once without writing any action creators or action types by hand. It also includes the most widely used Redux addons, like Redux Thunk for async logic and Reselect for writing selector functions, so that you can use them right away.

** TODO Relay
:PROPERTIES:
:CUSTOM_ID: Relay
:END:
** TODO Apollo
:PROPERTIES:
:CUSTOM_ID: Apollo
:END:
** TODO Next.js
:PROPERTIES:
:CUSTOM_ID: Next-js
:END:
** TODO Angular
:PROPERTIES:
:CUSTOM_ID: Angular
:END:
** WIP PWA
:PROPERTIES:
:CUSTOM_ID: PWA
:END:
*** app-shell model
:PROPERTIES:
:CUSTOM_ID: app-shell-model
:END:

** WIP HTTP
:PROPERTIES:
:CUSTOM_ID: HTTP
:END:
*** What is the use of Accept and Content-Type Headers in HTTP Request? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-the-use-of-Accept-and-Content-Type-Headers-in-HTTP-Request
:END:
:ANSWER:
- Accept headers:
  - tells web service what kind of response client is accepting, so if a web service is capable of sending response in XML and JSON format and client sends Accept header as application/xml then XML response will be sent. For Accept header application/json, server will send the JSON response.
- Content-Type header:
  - is used to tell server what is the format of data being sent in the request. If Content-Type header is application/xml then server will try to parse it as XML data. This header is useful in HTTP Post and Put requests.
:END:
*** WIP What is Server-Sent Events  (SSE)                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-Server-Sent-Events-SSE
:END:
:ANSWER:
- is a standard describing how servers can initiate data transmission towards clients once an initial client connection has been established.
- They are commonly used to send message updates or continuous data streams to a browser client
  - designed to enhance native, cross-browser streaming through a JavaScript API called EventSource,
    - through which a client requests a particular URL in order to receive an event stream.
:END:
*** WIP What are WebSockets                                      :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-are-WebSockets
:END:
*** WIP EventSource
:PROPERTIES:
:learning_1: https://developer.mozilla.org/en-US/docs/Web/API/EventSource
:CUSTOM_ID: EventSource
:END:
#+call: lg-get-props-entry()
- The EventSource interface is web content's interface to server-sent events.
- An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format.
- The connection remains open until closed by calling EventSource.close().
- Once the connection is opened, incoming messages from the server are delivered to your code in the form of events.
- If there is an event field in the incoming message, the triggered event is the same as the event field value. If no event field is present, then a generic message event is fired.
- Unlike WebSockets, server-sent events are unidirectional; that is, data messages are delivered in one direction, from the server to the client (such as a user's web browser).
- That makes them an excellent choice when there's no need to send data from the client to the server in message form.
- For example, EventSource is a useful approach for handling things like social media status updates, news feeds, or delivering data into a client-side storage mechanism like IndexedDB or web storage.
*** TODO XMLHttpRequest (XHR)
:PROPERTIES:
:CUSTOM_ID: XMLHttpRequest-XHR
:END:
- objects are used to interact with servers.
- You can retrieve data from a URL without having to do a full page refresh.
- This enables a Web page to update just part of a page without disrupting what the user is doing.
- XMLHttpRequest is used heavily in AJAX programming.
- Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML.
*** WIP Fetch
:PROPERTIES:
:CUSTOM_ID: Fetch
:END:
- Fetch is a fairly recent addition to the JavaScript world (introduced in 2015) utilizing a modern syntax for making requests from the browser.
- Like most modern JS written today, Fetch is based on Promises rather than callbacks.
- In our project, the Fetch example can be seen here and the code is shown below:

#+begin_src js
<!DOCTYPE html>
<head>
  <title>FETCH Example</title>
</head>

<body>
  <div>
    <h1>Select Reddit Sub</h1>
    <div id="list"></div>

  </div>

  <script>
    (function(){
      fetch('/api/endpoint')
        .then(payload => payload.json())
        .then(resp => {
          var data = resp.data // array of Reddit subs returned from "endpoint.js"
          console.log(JSON.stringify(data))
          var html = '<ol>'
          data.forEach(function(sub){
            html += '<a href="/axios/'+sub.path+'">'+sub.name+'</a><br />'
          })
          html += '</ol>'
          document.getElementById('list').innerHTML = html
        })
        .catch(err => {
          console.log('ERROR. Something went wrong.')
        })
    })()
  </script>
</body>
</html>
#+end_src

- The actual Fetch request takes place in the <script> tag between lines 16 and 33. On line 16, we make a request to the url "/api/endpoint" which returns a list of Reddit subs available to view. The initial response is on line 17 ("payload") which we then convert into JSON and parse starting on line 19. The "data" object is an array of Reddit subs with "name" and "path" keys. In lines 22 through 28, we populate a <div> tag with id "list" using the objects in the data array and connect each element to a link to view the sub content.
*** WIP axios
:PROPERTIES:
:CUSTOM_ID: axios
:END:
Axios: Axios is a Javascript library used to make HTTP requests from node.js or XMLHttpRequests from the browser and it supports the Promise API that is native to JS ES6. It can be used intercept HTTP requests and responses and enables client-side protection against XSRF. It also has the ability to cancel requests.

#+begin_src js
axios.get('url')
  .then((response) => {

    // Code for handling the response
  })
  .catch((error) => {

    // Code for handling the error
  })
#+end_src

** WIP Web API
:PROPERTIES:
:CUSTOM_ID: Web-API
:END:
*** Server-send events
:PROPERTIES:
:CUSTOM_ID: Server-send-events
:END:
- Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server.
- With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page.
- These incoming messages can be treated as Events + data inside the web page.
*** Tools
:PROPERTIES:
:CUSTOM_ID: WEB-TOOLS
:END:
**** SoapUI
:PROPERTIES:
:CUSTOM_ID: SoapUI
:END:
**** curl
:PROPERTIES:
:CUSTOM_ID: curl
:END:

** WIP HTML + CSS [/]
:PROPERTIES:
:CUSTOM_ID: HTML-CSS
:END:
*** Chrome Development Tools
:PROPERTIES:
:CUSTOM_ID: Chrome-Development-Tools
:END:
*** HTML5 Layout tags
:PROPERTIES:
:CUSTOM_ID: HTML5-Layout-tags
:END:
:ANSWER:
#+begin_src html
<header> It is used to define a header for a document or a section.
<nav> It is used to define a container for navigation links
<section> It is used to define a section in a document
<article> It is used to define an independent, self-contained article
<aside> It is used to define content aside from the content (like a sidebar)
<footer> It is used to define a footer for a document or a section
#+end_src
:END:
*** What is iframe good for?                                     :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-iframe-good-for
:END:
:ANSWER:
An iframe is used to display a web page within a web page.
Syntax:
#+begin_src html
<iframe src="URL"></iframe>
#+end_src
Example:
#+begin_src html
<iframe src="demo_iframe.html" width="200px" height="200px"></iframe>
#+end_src
Target to a link:
#+begin_src html
<iframe src="http://www.javatpoint.com" name="iframe_a"></iframe>
#+end_src
:END:
*** TODO Google Fonts API
:PROPERTIES:
:learning_1: https://developers.google.com/fonts
:CUSTOM_ID: Google-Fonts-API
:END:
#+call: lg-get-props-entry()
*** WIP Cookies
:PROPERTIES:
:learning_1:  https://tools.ietf.org/id/draft-ietf-httpbis-rfc6265bis-03.html
:CUSTOM_ID: Cookies
:END:
#+call: lg-get-props-entry()
**** COMPETE Cookie Types
:PROPERTIES:
:CUSTOM_ID: Cookie-Types
:END:
:ANSWER:
- Two Types of Cookies
- *Session cookies*
  - do not contain an expiration date. Instead, they are stored only as long as the browser or tab is open. As soon as the browser is closed, they are permanently lost.
  - This type of cookie might be used to store a banking user’s credentials while they are navigating within their bank’s website since their information would be forgotten as soon as the tab is closed.
- *Persistent cookies*
  - do have an expiration date.
  - These cookies are stored on the user’s disk until the expiration date and then permanently deleted.
  - They can be used for other activities such as recording a user’s habits while on a particular website in order to customize their experience every time they visit.
:END:

*** TODO Local Storage                                              :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Local-Storage
:END:
*** WIP Cookies / SameSite                                          :TOPIC:
:PROPERTIES:
:learning_1:  https://web.dev/samesite-cookies-explained/
:CUSTOM_ID: Cookies-SameSite
:END:
#+call: lg-get-props-entry()
*** TODO CSS preprocessors: LESS Sass
:PROPERTIES:
:learning_1:  https://www.lambdatest.com/blog/css-preprocessors-sass-vs-less-vs-stylus-with-examples/
:CUSTOM_ID: CSS-preprocessors-LESS-Sass
:END:
#+call: lg-get-props-entry()
- What Is A CSS Preprocessor?
  - CSS in itself is devoid of complex logic and functionality which is required to write reusable and organized code. As a result, a developer is bound by limitations and would face extreme difficulty in code maintenance and scalability, especially when working on large projects involving extensive code and multiple CSS stylesheets. This is where CSS Preprocessors come to the rescue.
  - A CSS Preprocessor is a tool used to extend the basic functionality of default vanilla CSS through its own scripting language. It helps us to use complex logical syntax like – variables, functions, mixins, code nesting, and inheritance to name a few, supercharging your vanilla CSS. By using CSS Preprocessors, you can seamlessly automate menial tasks, build reusable code snippets, avoid code repetition and bloating and write nested code blocks that are well organized and easy to read.
  - However, browsers can only understand native vanilla CSS code and will be unable to interpret the CSS Preprocessor syntax. Therefore, the complex and advanced Preprocessor syntax needs to be first compiled into native CSS syntax which can then be interpreted by the browsers to avoid cross browser compatibility issues. While different Preprocessors have their own unique syntaxes, eventually all of them are compiled to the same native CSS code.
  - Moving forward in the article, we will take a look at the 3 most popular CSS Preprocessors currently being used by developers around the world i.e Sass, LESS, and Stylus.
*** TODO Sass
:PROPERTIES:
:learning_1: https://sass-lang.com/guide
:CUSTOM_ID: Sass
:END:
#+call: lg-get-props-entry()
*** TODO Less
:PROPERTIES:
:CUSTOM_ID: Less
:END:
*** WIP CORS [0/5]
:PROPERTIES:
:learning_1: https://www.codecademy.com/articles/what-is-cors
:learning_2: https://dev.to/ahmedatefae/web-security-knowledge-you-must-understand-it-part-i-https-tls-ssl-cors-csp-298l
:CUSTOM_ID: CORS-0-5
:END:
#+call: lg-get-props-entry()
**** WIP what is CORS                                           :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-CORS
:END:
:ANSWER:
- Cross-Origin Resource Sharing (CORS) is a mechanism that uses HTTP headers to specify:
  - which outer origin have access to the local assets and
  - how can access it
  - that is mean we can make a white list for the allowed Cross-Origins that has access to our assets.
:END:
**** WIP How CORS works?                                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: How-CORS-works
:END:
:ANSWER:
- when the site makes a get request to get resource from the out server, the browser adds a header that contains the origin like the example Origin: http://www.example.com.
- The server receives the preflight request and searches in its white-list for Access-Control-Allow-Origins about the giving origin and sends to the browser option call, then the browser will determine if the actual request is safe to send or not, example Access-Control-Allow-Origin: http://www.example.com or this header Access-Control-Allow-Origin: * will allow any request to take the resource.
- if the server specifies the Methods it will compare the request method with its example Access-Control-Allow-Methods: PUT, DELETE.
:END:
**** TODO Why is CORS necessary?                                :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Why-is-CORS-necessary
:END:
**** TODO How Does CORS Manage Requests From External Resources? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: How-Does-CORS-Manage-Requests-From-External-Resources
:END:
**** WIP What http headers were added by CORS?                  :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-http-headers-were-added-by-CORS
:END:
:ANSWER:
#+begin_src html
Access-Control-Allow-Origin
Access-Control-Allow-Credentials
Access-Control-Allow-Headers
Access-Control-Allow-Methods
Access-Control-Expose-Headers
Access-Control-Max-Age
Access-Control-Request-Headers
Access-Control-Request-Method
Origin
#+end_src
:END:
*** WIP Content Security Policy (CSP)
:PROPERTIES:
:learning_1: https://dev.to/ahmedatefae/web-security-knowledge-you-must-understand-it-part-i-https-tls-ssl-cors-csp-298l
:CUSTOM_ID: Content-Security-Policy-CSP
:END:
#+call: lg-get-props-entry()
- Content Security Policy is more security layer that helps in detect and mitigate different sort of militias attacks like (Cross-Site Scripting (XSS), data injection attacks, ClickJacking, ETC...).
  - *Cross-Site Scripting (XSS)*: it a vulnerability that allows the hacker to inject a militias code in the base website and it is for making the client execute it to take sensitive data like cookies, session’s info and site-specific information, That happens because web app does not use enough validation or encoding, The user’s browser cannot detect the malicious script is untrustworthy.
  - *data injection attacks*: is a malicious code injected in the network which fetched all the information from the database to the attacker and the number one type of it is the SQL injection.
  - *Click Jacking*: or “*UI redress attack*” is when an attacker tricks a user into clicking on a button or link on another page that uses multiple transparent or opaque layers when he intended to click on the top-level.
**** How CSP works?
:PROPERTIES:
:CUSTOM_ID: How-CSP-works
:END:
- it use Directives concept that’s every Directive have to specify where resources can load from, preventing browsers from loading data from any other locations.
- Most used Directives are:
  - default-src: the default policy for loading (JavaScript, images, CSS, AJAX requests, ETC...) example ~default-src ‘self’ cdn.example.com;~
  - img-src: defines sources for images example ~img-src ‘self’ img.example.com;~
  - style-src: defines sources for CSS files example ~style-src ‘self’ css.example.com;~
  - script-src: defines sources for JavaScript files example ~script-src ‘self’ js.example.com;~
  - connect-src: defines valid targets for to XMLHttpRequest (AJAX), WebSockets or EventSource, If it makes any connections to a host, that’s not allowed here, the browser will respond with a 400 error example ~connect-src ‘self’;~
  - Multi-label directives defines: ~default-src ‘none’; script-src ‘self’; connect-src ‘self’; img-src ‘self’; style-src ‘self’;~

*** WIP Bundlers
:PROPERTIES:
:learning_1: https://bundlers.tooling.report/
:CUSTOM_ID: Bundlers
:END:
#+call: lg-get-props-entry()
*** WIP Webpack
:PROPERTIES:
:learning_1: https://webpack.js.org/concepts/
:CUSTOM_ID: Webpack
:END:
#+call: lg-get-props-entry()
- At its core, webpack is a static module bundler for modern JavaScript applications.
- When webpack processes your application, it internally builds a dependency graph which maps every module your project needs and generates one or more bundles.
** TODO The Elm Architecture (TEA)
:PROPERTIES:
:CUSTOM_ID: The-Elm-Architecture-TEA
:END:
- http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html

* WIP Security [0/14]                                                :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: SECURITY
:END:
#+call: lg-get-props-entry()
** WIP Crypto [0/5]
:PROPERTIES:
:CUSTOM_ID: Crypto-0-5
:END:
*** WIP Block Ciphers
:PROPERTIES:
:CUSTOM_ID: Block-Ciphers
:END:
**** ECB, CBC, OFB, CFB, CTR  - what they are
:PROPERTIES:
:learning_1:    https:/www.highgo.ca/2019/08/08/the-difference-in-five-modes-in-the-aes-encryption-algorithm//
:CUSTOM_ID: ECB-CBC-OFB-CFB-CTR-what-they-are
:END:
#+call: lg-get-props-entry()
**** RSA
:PROPERTIES:
:CUSTOM_ID: RSA
:END:
**** AES
:PROPERTIES:
:CUSTOM_ID: AES
:END:
**** DES
:PROPERTIES:
:CUSTOM_ID: DES
:END:
*** WIP Hash
:PROPERTIES:
:CUSTOM_ID: Hash
:END:
***** base64
:PROPERTIES:
:CUSTOM_ID: base64
:END:
*** TODO Symetric Encryption
:PROPERTIES:
:CUSTOM_ID: Symetric-Encryption
:END:
*** TODO Asymetric Encryption
:PROPERTIES:
:CUSTOM_ID: Asymetric-Encryption
:END:
*** WIP HMAC
:PROPERTIES:
:learning_1: https://en.wikipedia.org/wiki/HMAC
:CUSTOM_ID: HMAC
:END:
#+call: lg-get-props-entry()
:ANSWER:
- In cryptography, an HMAC (sometimes expanded as either keyed-hash message authentication code or hash-based message authentication code) is a specific type of message authentication code (MAC) involving a cryptographic hash function and a secret cryptographic key.
- As with any MAC, it may be used to simultaneously verify both the data integrity and the authenticity of a message.
:END:

** WIP SPIFFE                                                        :TOPIC:
:PROPERTIES:
:CUSTOM_ID: SPIFFE
:END:
*** what is spiffe
:PROPERTIES:
:learning_1:  https://spiffe.io/docs/latest/spiffe/overview/
:CUSTOM_ID: what-is-spiffe
:END:
#+call: lg-get-props-entry()
:ANSWER:
- SPIFFE, the Secure Production Identity Framework for Everyone, is a set of open-source standards for securely identifying software systems in dynamic and heterogeneous environments. Systems that adopt SPIFFE can easily and reliably mutually authenticate wherever they are running.
- Distributed design patterns and practices such as micro-services, container orchestrators, and cloud computing have led to production environments that are increasingly dynamic and heterogeneous. Conventional security practices (such as network policies that only allow traffic between particular IP addresses) struggle to scale under this complexity. A first-class identity framework for workloads in an organization becomes necessary.
- Further, modern developers are expected to understand and play a role in how applications are deployed and managed in production environments. Operations teams require deeper visibility into the applications they are managing. As we move to a more evolved security stance, we must offer better tools to both teams so they can play an active role in building secure, distributed applications.
- SPIFFE is a set of open-source specifications for a framework capable of bootstrapping and issuing identity to services across heterogeneous environments and organizational boundaries. The heart of these specifications is the one that defines short lived cryptographic identity documents – called SVIDs via a simple API. Workloads can then use these identity documents when authenticating to other workloads, for example by establishing a TLS connection or by signing and verifying a JWT token.
:END:
** WIP Oauth2/OIDC                                                   :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Oauth2-OIDC
:END:
*** grant (flow) types [/]
:PROPERTIES:
:CUSTOM_ID: grant-flow-types
:END:
**** TODO Authorization Code Flow
:PROPERTIES:
:CUSTOM_ID: Authorization-Code-Flow
:END:
**** TODO Client Credentials Flow
:PROPERTIES:
:CUSTOM_ID: Client-Credentials-Flow
:END:
**** TODO Device Code
:PROPERTIES:
:CUSTOM_ID: Device-Code
:END:
**** TODO Refresh Token
:PROPERTIES:
:CUSTOM_ID: Refresh-Token
:END:
**** TODO PKCE
:PROPERTIES:
:CUSTOM_ID: PKCE
:END:
**** TODO (Implicit Flow)
:PROPERTIES:
:CUSTOM_ID: Implicit-Flow
:END:
**** TODO (Password Grant)
:PROPERTIES:
:CUSTOM_ID: Password-Grant
:END:
**** WIP Resource Owner Password Credential Grant
:PROPERTIES:
:learning_1: https://www.netiq.com/documentation/access-manager-45-developer-documentation/pdfdoc/oauth-application-developer-guide/oauth-application-developer-guide.pdf
:CUSTOM_ID: Resource-Owner-Password-Credential-Grant
:END:
- from soapUI template
- requested attributes:
  - Resource Owner Name
  - Resource Owner Password
  - Client identification
  - Client Secret
  - Access Token URI:
  - scope
- example for netIq
#+begin_src bash
curl --request POST \
 --url https://<idphost:port>/nidp/oauth/nam/token \
 --header 'content-type: application/x-www-form-urlencoded' \
 --data 'grant_type=password&client_id=bb775b12-bbd4-423b-83d9-647aeb98608d&client_secret=bBbE4mNO_kWWAnEeOL1CLTyuPhNLhHkTThArEckyrdLmRLn3GhnxjsKI2mEijCSlPjftxHod05dpuGs6wA&username=user1&password=pass@123&scope=email%20profile'
#+end_src

*** Scope
:PROPERTIES:
:CUSTOM_ID: Scope
:END:
:answer:
A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf.
Often, applications will want to make use of the information that has already been created in an online resource.
To do so, the application must ask for authorization to access this information on a user’s behalf.
When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs,
and the authorization server uses the Scope parameter to respond with the access that was actually granted.
:end:
*** What is acr_values
:PROPERTIES:
:learning_1:  https://ldapwiki.com/wiki/Acr_values
:CUSTOM_ID: What-is-acr-values
:END:
#+call: lg-get-props-entry()
:ANSWER:
- Acr_values is an OPTIONAL parameter that is a Space-separated string that specifies the Authentication Context Class Values within the Authentication Request that the Authorization Server is being requested to use for processing requests from this Client, with the values appearing in order of preference.
- Acr_values was originally specified within the JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants (RFC 7523)

- The Authentication Context Class Reference values actually utilized by the Authorization Server is returned within the Identity Token in the acr parameter.
:END:
** WIP JWT                                                           :TOPIC:
:PROPERTIES:
:learning_1:    https://tools.ietf.org/html/rfc7519
:CUSTOM_ID: JWT
:END:
#+call: lg-get-props-entry()
*** What are the registered claim names?                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-are-the-registered-claim-names
:END:
*** What is registered claim name "iss" (Issuer) Claim?          :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-registered-claim-name-iss-Issuer-Claim
:END:
:ANSWER:
- The "iss" (issuer) claim identifies the principal that issued the JWT.
- The processing of this claim is generally application specific.
- The "iss" value is a case-sensitive string containing a StringOrURI value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "sub" (Subject) Claim          :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-registered-claim-name-sub-Subject-Claim
:END:
:ANSWER:
- The "sub" (subject) claim identifies the principal that is the subject of the JWT.
- The claims in a JWT are normally statements about the subject.
- The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique.
- The processing of this claim is generally application specific.
- The "sub" value is a case-sensitive string containing a StringOrURI value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "aud" (Audience) Claim         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-registered-claim-name-aud-Audience-Claim
:END:
:ANSWER:
- The "aud" (audience) claim identifies the recipients that the JWT is intended for.
- Each principal intended to process the JWT MUST identify itself with a value in the audience claim.
- If the principal processing the claim does not identify itself with a value in the "aud" claim when this claim is present, then the JWT MUST be rejected.
- In the general case, the "aud" value is an array of case-sensitive strings, each containing a StringOrURI value.
- In the special case when the JWT has one audience, the "aud" value MAY be a single case-sensitive string containing a StringOrURI value.
- The interpretation of audience values is generally application specific.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "exp" (Expiration Time) Claim  :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-registered-claim-name-exp-Expiration-Time-Claim
:END:
:ANSWER:
- The "exp" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.
- The processing of the "exp" claim requires that the current date/time MUST be before the expiration date/time listed in the "exp" claim.
- Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.
- Its value MUST be a number containing a NumericDate value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "nbf" (Not Before) Claim       :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-registered-claim-name-nbf-Not-Before-Claim
:END:
:ANSWER:
- The "nbf" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing.
- The processing of the "nbf" claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the "nbf" claim.
- Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.
- Its value MUST be a number containing a NumericDate value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "iat" (Issued At) Claim        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-registered-claim-name-iat-Issued-At-Claim
:END:
- The "iat" (issued at) claim identifies the time at which the JWT was issued.
- This claim can be used to determine the age of the JWT.
- Its value MUST be a number containing a NumericDate value.
- Use of this claim is OPTIONAL.
:END:
*** What is registered claim name "jti" (JWT ID) Claim           :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-registered-claim-name-jti-JWT-ID-Claim
:END:
:ANSWER:
- The "jti" (JWT ID) claim provides a unique identifier for the JWT.
- The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object;
- if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well.
- The "jti" claim can be used to prevent the JWT from being replayed.
- The "jti" value is a case-sensitive string.
- Use of this claim is OPTIONAL.
:END:
*** What are Public Claim Names                                  :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-are-Public-Claim-Names
:END:
:ANSWER:
- Claim Names can be defined at will by those using JWTs.
- However, in order to prevent collisions, any new Claim Name should either be registered in the IANA "JSON Web Token Claims" registry established by Section 10.1 or be a Public Name:
  - a value that contains a Collision-Resistant Name.
- In each case, the definer of the name or value needs to take reasonable precautions to make sure they are in control of the part of the namespace they use to define the Claim Name.
:END:
*** RS256 vs HS256: What's the difference?
:PROPERTIES:
:learning_1: https://stackoverflow.com/questions/39239051/rs256-vs-hs256-whats-the-difference
:CUSTOM_ID: RS256_VS_HS256
:END:
#+call: lg-get-props-entry()
:ANSWER:
- Both choices refer to what algorithm the identity provider uses to sign the JWT. Signing is a cryptographic operation that generates a "signature" (part of the JWT) that the recipient of the token can validate to ensure that the token has not been tampered with.
  - *RS256 (RSA Signature with SHA-256)* is an asymmetric algorithm, and it uses a public/private key pair: the identity provider has a private (secret) key used to generate the signature, and the consumer of the JWT gets a public key to validate the signature. Since the public key, as opposed to the private key, doesn't need to be kept secured, most identity providers make it easily available for consumers to obtain and use (usually through a metadata URL).
  - *HS256 (HMAC with SHA-256)*, on the other hand, involves a combination of a hashing function and one (secret) key that is shared between the two parties used to generate the hash that will serve as the signature. Since the same key is used both to generate the signature and to validate it, care must be taken to ensure that the key is not compromised.
- If you will be developing the application consuming the JWTs, you can safely use HS256, because you will have control on who uses the secret keys. If, on the other hand, you don't have control over the client, or you have no way of securing a secret key, RS256 will be a better fit, since the consumer only needs to know the public (shared) key.
- Since the public key is usually made available from metadata endpoints, clients can be programmed to retrieve the public key automatically. If this is the case (as it is with the .Net Core libraries), you will have less work to do on configuration (the libraries will fetch the public key from the server). Symmetric keys, on the other hand, need to be exchanged out of band (ensuring a secure communication channel), and manually updated if there is a signing key rollover.
- Auth0 provides metadata endpoints for the OIDC, SAML and WS-Fed protocols, where the public keys can be retrieved. You can see those endpoints under the "Advanced Settings" of a client.
- The OIDC metadata endpoint, for example, takes the form of ~https://{account domain}/.well-known/openid-configuration~.
  - If you browse to that URL, you will see a JSON object with a reference to ~https://{account domain}/.well-known/jwks.json~, which contains the public key (or keys) of the account.
- If you look at the RS256 samples, you will see that you don't need to configure the public key anywhere: it's retrieved automatically by the framework.
:END:

** WIP JWKS
:PROPERTIES:
:learning_1:  https://auth0.com/docs/tokens/json-web-tokens/json-web-key-sets
:CUSTOM_ID: JWKS
:END:
#+call: lg-get-props-entry()
- JSON Web Key Sets:
  - The JSON Web Key Set (JWKS) is a set of keys containing the public keys used to verify any JSON Web Token (JWT) issued by the authorization server and signed using the RS256 signing algorithm.
  - When creating applications and APIs in Auth0, two algorithms are supported for signing JWTs: RS256 and HS256.
    - RS256 generates an asymmetric signature, which means a private key must be used to sign the JWT and a different public key must be used to verify the signature.
  - Auth0 uses the JSON Web Key (JWK) specification to represent the cryptographic keys used for signing RS256 tokens. This specification defines two high-level data structures: JSON Web Key (JWK) and JSON Web Key Set (JWKS). Here are the definitions from the specification:

| Item                    | Description                                                                                                                        |
| JSON Web Key (JWK)      | A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value. |
| JSON Web Key Set (JWKS) | A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.                   |

Auth0 exposes a JWKS endpoint for each tenant, which is found at https://YOUR_DOMAIN/.well-known/jwks.json. This endpoint will contain the JWK used to sign all Auth0-issued JWTs for this tenant.

** WIP LDAP
:PROPERTIES:
:CUSTOM_ID: LDAP
:END:
*** object class
:PROPERTIES:
:CUSTOM_ID: object-class
:END:
**** inetOrgPerson
:PROPERTIES:
:CUSTOM_ID: inetOrgPerson
:END:
*** OID
:PROPERTIES:
:CUSTOM_ID: OID
:END:
*** CN, DN, SN,
:PROPERTIES:
:CUSTOM_ID: CN-DN-SN
:END:
** WIP OWASP top 10 2017
:PROPERTIES:
:learning_1: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/
:CUSTOM_ID: OWASP-top-10-2017
:END:
#+call: lg-get-props-entry()
*** A1:2017-Injection
:PROPERTIES:
:CUSTOM_ID: A1-2017-Injection
:END:
*** A2:2017-Broken Authentication
:PROPERTIES:
:CUSTOM_ID: A2-2017-Broken-Authentication
:END:
*** A3:2017-Sensitive Data Exposure
:PROPERTIES:
:CUSTOM_ID: A3-2017-Sensitive-Data-Exposure
:END:
*** A4:2017-XML External Entities (XXE)
:PROPERTIES:
:CUSTOM_ID: A4-2017-XML-External-Entities-XXE
:END:
*** A5:2017-Broken Access Control
:PROPERTIES:
:CUSTOM_ID: A5-2017-Broken-Access-Control
:END:
*** A6:2017-Security Misconfiguration
:PROPERTIES:
:CUSTOM_ID: A6-2017-Security-Misconfiguration
:END:
*** A7:2017-Cross-Site Scripting (XSS)
:PROPERTIES:
:CUSTOM_ID: A7-2017-Cross-Site-Scripting-XSS
:END:
*** A8:2017-Insecure Deserialization
:PROPERTIES:
:CUSTOM_ID: A8-2017-Insecure-Deserialization
:END:
*** A9:2017-Using Components with Known Vulnerabilities
:PROPERTIES:
:CUSTOM_ID: A9-2017-Using-Components-with-Known-Vulnerabilities
:END:
*** A10:2017-Insufficient Logging & Monitoring
:PROPERTIES:
:CUSTOM_ID: A10-2017-Insufficient-Logging-Monitoring
:END:
** TODO (OWASP) attacks
:PROPERTIES:
:CUSTOM_ID: OWASP-attacks
:END:
*** WIP CSRF / XSRF
:PROPERTIES:
:learning_1: https://owasp.org/www-community/attacks/csrf
:learning_2: https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
:learning_3: http://www.adambarth.com/papers/2008/barth-jackson-mitchell-b.pdf
:learning_4: https://devnet.kentico.com/articles/protection-against-cross-site-request-forgery-%28csrf-xsrf%29
:CUSTOM_ID: CSRF-XSRF
:END:
#+call: lg-get-props-entry()

** TODO bastillion.io
:PROPERTIES:
:CUSTOM_ID: bastillion-io
:END:
** TODO PKI
:PROPERTIES:
:CUSTOM_ID: PKI
:END:
** WIP X509
:PROPERTIES:
:CUSTOM_ID: X509
:END:
*** Why does GoDaddy have four different certificate chain, G2, G3, G4? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Why-does-GoDaddy-have-four-different-certificate-chain-G2-G3-G4
:END:
:ANSWER:
- "G" stands for Root certificates generation.
- Basically, it identifies the generation (version) of a Root certificate that signs the Chain of trust.
- When CA needs to get a new chain (for example, because of upgrade from SHA-1 to SHA-256), they just increment the generation number.
- This is good because obsolete certificates can be better identified.
:END:
** WIP Concepts [0/2]
:PROPERTIES:
:CUSTOM_ID: Concepts-0-2
:END:
*** WIP DevSecOps                                                 :CONCEPT:
:PROPERTIES:
:learning_1: https://snyk.io/devsecops/
:learning_2: https://snyk.io/devsecops/
:CUSTOM_ID: DevSecOps
:END:
#+call: lg-get-props-entry()
- DevSecOps manifesto:

- Through Security as Code, we have and will learn that there is simply a better way for security practitioners, like us, to operate and contribute value with less friction. We know we must adapt our ways quickly and foster innovation to ensure data security and privacy issues are not left behind because we were too slow to change.
- By developing security as code, we will strive to create awesome products and services, provide insights directly to developers, and generally favor iteration over trying to always come up with the best answer before a deployment. We will operate like developers to make security and compliance available to be consumed as services. We will unlock and unblock new paths to help others see their ideas become a reality.
- We won't simply rely on scanners and reports to make code better. We will attack products and services like an outsider to help you defend what you've created. We will learn the loopholes, look for weaknesses, and we will work with you to provide remediation actions instead of long lists of problems for you to solve on your own.
- We will not wait for our organizations to fall victim to mistakes and attackers. We will not settle for finding what is already known; instead, we will look for anomalies yet to be detected. We will strive to be a better partner by valuing what you value:

- Manifesto:
| Leaning in                             | over | Always Saying “No”                             |
| Data & Security Science                | over | Fear, Uncertainty and Doubt                    |
| Open Contribution & Collaboration      | over | Security-Only Requirements                     |
| Consumable Security Services with APIs | over | Mandated Security Controls & Paperwork         |
| Business Driven Security Scores        | over | Rubber Stamp Security                          |
| Red & Blue Team Exploit Testing        | over | Relying on Scans & Theoretical Vulnerabilities |
| 24x7 Proactive Security Monitoring     | over | Reacting after being Informed of an Incident   |
| Shared Threat Intelligence             | over | Keeping Info to Ourselves                      |
| Compliance Operations                  | over | Clipboards & Checklists                        |

- What Is DevSecOps?
  + DevSecOps refers to the integration of security practices into a DevOps software delivery model.
  + Its foundation is a culture where development and operations are enabled through process and tooling to take part in a shared responsibility for delivering secure software.
  + The definition of DevSecOps, at a high-functioning level, is to integrate security objectives as early as possible in the lifecycle of software development.
  + While security is “everyone’s responsibility,” DevOps teams are uniquely positioned at the intersection of development and operations, empowered to apply security in both breadth and depth.
*** TODO Zero Trust Network                                       :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Zero-Trust-Network
:END:


** WIP Software Composition Analysis (SCA) [0/2]
:PROPERTIES:
:learning_1: https://sudonull.com/post/27911-Forrester-Research-A-Comparison-of-Ten-Top-Software-Composition-Analysis-Vendors
:CUSTOM_ID: Software-Composition-Analysis-SCA-0-2
:END:
#+call: lg-get-props-entry()
*** TODO Snyk
:PROPERTIES:
:CUSTOM_ID: Snyk
:END:
*** TODO Jfrog Xray
:PROPERTIES:
:CUSTOM_ID: Jfrog-Xray
:END:

** WIP Tools & Solutions [0/9]
:PROPERTIES:
:CUSTOM_ID: Tools-Solutions
:END:
*** TODO Illumio Security
:PROPERTIES:
:CUSTOM_ID: Illumio-Security
:END:
*** TODO Burp Suite
:PROPERTIES:
:CUSTOM_ID: Burp-Suite
:END:
*** TODO Metasploit
:PROPERTIES:
:CUSTOM_ID: Metasploit
:END:
*** TODO wireshark
:PROPERTIES:
:CUSTOM_ID: wireshark
:END:
*** TODO hydra
:PROPERTIES:
:CUSTOM_ID: hydra
:END:
*** TODO nmap
:PROPERTIES:
:CUSTOM_ID: PENTESTING-NMAP
:END:
*** TODO nessus
:PROPERTIES:
:CUSTOM_ID: nessus
:END:
* WIP Programming Languages [0/13]                                   :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: LANGUAGES
:END:
#+call: lg-get-props-entry()
** WIP Functional Paradigm  [0/8]                                    :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Functional-Paradigm-0-8
:END:
*** WIP Lambda Calculus                                             :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Lambda-Calculus
:END:
**** α-conversion
:PROPERTIES:
:CUSTOM_ID: α-conversion
:END:
- changing bound variables
**** β-reduction
:PROPERTIES:
:CUSTOM_ID: β-reduction
:END:
- applying functions to their arguments;
**** η-reduction
:PROPERTIES:
:CUSTOM_ID: η-reduction
:END:
- which captures a notion of extensionality.
*** TODO Immutability                                               :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Immutability
:END:
*** TODO Idempotency
:PROPERTIES:
:CUSTOM_ID: Idempotency
:END:
*** TODO Continuation Passing Style
:PROPERTIES:
:CUSTOM_ID: Continuation-Passing-Style
:END:
*** TODO Persistent data structure (Chris Okasaki)
:PROPERTIES:
:CUSTOM_ID: Persistent-data-structure-Chris-Okasaki
:END:
*** TODO Algebraic Data Types
:PROPERTIES:
:CUSTOM_ID: Algebraic-Data-Types
:END:
*** WIP Patterns
:PROPERTIES:
:CUSTOM_ID: Patterns
:END:
**** TODO Monoid
:PROPERTIES:
:CUSTOM_ID: MONOID
:END:
#+call: lg-get-props-entry()
**** TODO Functor
:PROPERTIES:
:CUSTOM_ID: FUNCTOR
:END:
#+call: lg-get-props-entry()
**** TODO Pro Functor
:PROPERTIES:
:CUSTOM_ID: PRO_FUNCTOR
:END:
#+call: lg-get-props-entry()
**** TODO Applicative
:PROPERTIES:
:CUSTOM_ID: APPLICATIVE
:END:
#+call: lg-get-props-entry()
**** TODO Monad
:PROPERTIES:
:CUSTOM_ID: MONAD
:END:
#+call: lg-get-props-entry()
**** TODO Kleisli Arrow
:PROPERTIES:
:CUSTOM_ID: KLEISLI_ARROW
:END:
#+call: lg-get-props-entry()
**** TODO Free Monad
:PROPERTIES:
:CUSTOM_ID: FREE_MONAD
:END:
#+call: lg-get-props-entry()
**** TODO Fix
:PROPERTIES:
:learning_1: https://www.parsonsmatt.org/2016/10/26/grokking_fix.html
:CUSTOM_ID: Fix
:END:
#+call: lg-get-props-entry()
**** Lenses
:PROPERTIES:
:CUSTOM_ID: Lenses
:END:
**** Prisms
:PROPERTIES:
:CUSTOM_ID: Prisms
:END:
*** TODO Recursion Schemes
:PROPERTIES:
:CUSTOM_ID: Recursion-Schemes
:END:
**** catamorphisms
:PROPERTIES:
:CUSTOM_ID: catamorphisms
:END:
**** anamorphisms
:PROPERTIES:
:CUSTOM_ID: anamorphisms
:END:
**** hylomorphisms
:PROPERTIES:
:CUSTOM_ID: hylomorphisms
:END:
**** paramorphisms
:PROPERTIES:
:CUSTOM_ID: paramorphisms
:END:

** WIP Object Oriented Paradigm                           :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Object-Oriented-Paradigm
:END:
*** Polymorphism
:PROPERTIES:
:CUSTOM_ID: Polymorphism
:END:
*** Gof Patterns
:PROPERTIES:
:CUSTOM_ID: GOF_PATTERNS
:END:
**** Creational Patterns
:PROPERTIES:
:CUSTOM_ID: CREATIONAL_PATTERNS
:END:
|------------------+-----------------------------------------------------------------------------------------------------------------------------|
| Pattern Name     | Description                                                                                                                 |
|------------------+-----------------------------------------------------------------------------------------------------------------------------|
| Singleton        | The singleton pattern restricts the initialization of a class to ensure that only one instance of the class can be created. |
| Factory          | The factory pattern takes out the responsibility of instantiating a object from the class to a Factory class.               |
| Abstract Factory | Allows us to create a Factory for factory classes.                                                                          |
| Builder          | Creating an object step by step and a method to finally get the object instance.                                            |
| Prototype        | Creating a new object instance from another similar instance and then modify according to our requirements.                 |
|------------------+-----------------------------------------------------------------------------------------------------------------------------|

**** Structural Patterns
:PROPERTIES:
:CUSTOM_ID: STRUCTURAL_PATTERNS
:END:
- There are 7 structural design patterns defined in the Gangs of Four design patterns book.
|--------------+-------------------------------------------------------------------------------------------------------------------------------------------------|
| Pattern Name | Description                                                                                                                                     |
|--------------+-------------------------------------------------------------------------------------------------------------------------------------------------|
| Adapter      | Provides an interface between two unrelated entities so that they can work together.                                                            |
| Composite    | Used when we have to implement a part-whole hierarchy. For example, a diagram made of other pieces such as circle, square, triangle, etc.       |
| Proxy        | Provide a surrogate or placeholder for another object to control access to it.                                                                  |
| Flyweight    | Caching and reusing object instances, used with immutable objects. For example, string pool.                                                    |
| Facade       | Creating a wrapper interfaces on top of existing interfaces to help client applications.                                                        |
| Bridge       | The bridge design pattern is used to decouple the interfaces from implementation and hiding the implementation details from the client program. |
| Decorator    | The decorator design pattern is used to modify the functionality of an object at runtime.                                                       |
|--------------+-------------------------------------------------------------------------------------------------------------------------------------------------|

**** Behavioral Patterns
:PROPERTIES:
:CUSTOM_ID: BEHAVIORAL_PATTERNS
:END:
- There are 11 behavioral design patterns defined in the GoF design patterns.
|-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| Pattern Name            | Description                                                                                                                                      |
|-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| Template Method         | used to create a template method stub and defer some of the steps of implementation to the subclasses.                                           |
| Mediator                | used to provide a centralized communication medium between different objects in a system.                                                        |
| Chain of Responsibility | used to achieve loose coupling in software design where a request from the client is passed to a chain of objects to process them.               |
| Observer                | useful when you are interested in the state of an object and want to get notified whenever there is any change.                                  |
| Strategy                | Strategy pattern is used when we have multiple algorithm for a specific task and client decides the actual implementation to be used at runtime. |
| Command                 | Command Pattern is used to implement lose coupling in a request-response model.                                                                  |
| State                   | State design pattern is used when an Object change it’s behavior based on it’s internal state.                                                   |
| Visitor                 | Visitor pattern is used when we have to perform an operation on a group of similar kind of Objects.                                              |
| Interpreter             | defines a grammatical representation for a language and provides an interpreter to deal with this grammar.                                       |
| Iterator                | used to provide a standard way to traverse through a group of Objects.                                                                           |
| Memento                 | The memento design pattern is used when we want to save the state of an object so that we can restore later on.                                  |
|-------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|

** WIP Java                                                          :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Java
:END:
*** hashCode()
:PROPERTIES:
:CUSTOM_ID: hashCode
:END:
**** is this code wrong? yes / no / why                         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: is-this-code-wrong-yes-no-why
:END:
Imagine you replace all haskCode implementation by this - what will happen
#+begin_src java
@Override
public final int hashCode() {
    int result = 17;
    return result;
}
#+end_src
*** hashCode vs equals()                                         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: hashCode-vs-equals
:END:
*** what is a contract?                                          :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-a-contract
:END:
*** Java Collections Framework:
:PROPERTIES:
:CUSTOM_ID: Java-Collections-Framework
:END:
**** what is a difference between List vs Set vs Map            :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-a-difference-between-List-vs-Set-vs-Map
:END:
**** what is the difference ArrayList vs LinkedList             :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-the-difference-ArrayList-vs-LinkedList
:END:
*** StringBuilder vs StringBuffer vs String
:PROPERTIES:
:CUSTOM_ID: StringBuilder-vs-StringBuffer-vs-String
:END:
*** Can we have static method in the interface?                  :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Can-we-have-static-method-in-the-interface
:END:
:ANSWER:
- Yes, we can have static method in the interface from Java 8.
:END:
*** You have a list of Custom objects? How can you sort them?    :QUESTION:
:PROPERTIES:
:CUSTOM_ID: You-have-a-list-of-Custom-objects-How-can-you-sort-them
:END:
:ANSWER:
You need to use Comparable or Comparator interface to sort list of custom objects.
:END:
*** How to create thread safe Singleton in Java                  :QUESTION:
:PROPERTIES:
:learning_1: https://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html
:CUSTOM_ID: How-to-create-thread-safe-Singleton-in-Java
:END:
#+call: lg-get-props-entry()
:ANSWER:
- use double checked locking
- use class loader
- use enum
- Read more: https://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html#ixzz6Y1Y1v8C1
:END:
*** Difference between List and Set in Java?                     :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Difference-between-List-and-Set-in-Java
:END:
:ANSWER:
- hint: List is ordered and allows duplicate. Set is unordered and doesn't allow duplicate elements.
:END:
*** How do you prevent a class from being sub-classed in Java?   :QUESTION:
:PROPERTIES:
:CUSTOM_ID: How-do-you-prevent-a-class-from-being-sub-classed-in-Java
:END:
:ANSWER:
- just make its constructor private
:END:
*** Difference between throw and throws keyword in Java?         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Difference-between-throw-and-throws-keyword-in-Java
:END:
:ANSWER:
- throws declare what exception a method can throw in case of error but throw keyword actually throws an exception.
- See Java Fundamentals: Exception Handling to learn more about Exception handling in Java.
:END:
*** Difference between Iterator and Enumeration in Java?         :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Difference-between-Iterator-and-Enumeration-in-Java
:END:
:ANSWER:
- Iterator also gives you the ability to remove an element while iterating while Enumeration doesn't allow that.
:END:
*** What is IdentityHashMap in Java?                             :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-IdentityHashMap-in-Java
:END:
:ANSWER:
- A Map, which uses  the == equality operator to check equality instead of the equals() method.
:END:
*** What is String pool in Java?                                 :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-String-pool-in-Java
:END:
:ANSWER:
- A pool of String literals. Remember it's moved to heap from perm gen space in JDK 7.
:END:
*** Can a Serializable class contain a non-serializable field in Java? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Can-a-Serializable-class-contain-a-non-serializable-field-in-Java
:END:
:ANSWER:
- Yes, but you need to make it either static or transient.
:END:
*** Difference between this and super in Java?                   :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Difference-between-this-and-super-in-Java
:END:
:ANSWER:
- this refers to the current instance while super refers to an instance of the superclass.
:END:
*** Difference between Comparator and Comparable in Java?        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Difference-between-Comparator-and-Comparable-in-Java
:END:
:ANSWER:
- Comparator defines custom ordering while Comparable defines the natural order of objects, e.g. the alphabetic order for String. See The Complete Java MasterClass to learn more about sorting in Java.
:END:
*** BigDecimal vs float                                          :QUESTION:
:PROPERTIES:
:CUSTOM_ID: BigDecimal-vs-float
:END:
*** what is the difference betwen checked and unchecked exception? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-the-difference-betwen-checked-and-unchecked-exception
:END:
*** Co všechno je špatně na tomto kusu kódu                      :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Co-všechno-je-špatně-na-tomto-kusu-kódu
:END:
#+begin_src java
try {
  // ...
} catch (Exception e) {
  log.error("Oh no!", e.getMessage());
}
#+end_src
:ANSWER:
- Zdaleka největší průšvih je, že jsme přišli o stack trace!
  - Musíme nechat zalogovat celý objekt "e" a nebo aspoň přímo jeho ST.
- Chytáme příliš obecný typ, takže nemůžeme nijak rozlišit mezi jednotlivými typy chyb.
- Kombinace chytání příliš obecné chyby a neudělání re-throw, je velmi nebezpečná.
  - Pokud nechceme dělat re-throw, měli bychom chytat jen ten typ, kterého se to týká.
- A další věci, jako stupidní message "Oh no!", atd.
:END:
*** Explain Java 7 ARM (Automatic Resource Managemet) Feature and multi-catch block? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Explain-Java-7-ARM-Automatic-Resource-Managemet-Feature-and-multi-catch-block
:END:
- If you are catching a lot of exceptions in a single try block, you will notice that catch block code looks very ugly and mostly consists of redundant code to log the error,
- keeping this in mind Java 7 one of the feature was multi-catch block where we can catch multiple exceptions in a single catch block.
- The catch block with this feature looks like below:

#+begin_src java
  catch(IOException | SQLException | Exception ex){
      logger.error(ex);
      throw new MyException(ex.getMessage());
  }
#+end_src
- Most of the time, we use finally block just to close the resources and sometimes we forget to close them and get runtime exceptions when the resources are exhausted.
- These exceptions are hard to debug and we might need to look into each place where we are using that type of resource to make sure we are closing it.
- So java 7 one of the improvement was try-with-resources where we can create a resource in the try statement itself and use it inside the try-catch block.
- When the execution comes out of try-catch block, runtime environment automatically close these resources.
- Sample of try-catch block with this improvement is:

#+begin_src java
  try (MyResource mr = new MyResource()) {
      System.out.println("MyResource created in try-with-resources");
  } catch (Exception e) {
      e.printStackTrace();
  }
#+end_src
*** TODO Generics
:PROPERTIES:
:CUSTOM_ID: Generics
:END:
*** TODO Java 9 - project jigsaw
:PROPERTIES:
:CUSTOM_ID: Java-9-project-jigsaw
:END:
*** TODO JPA
:PROPERTIES:
:CUSTOM_ID: JPA
:END:
*** TODO QueryDSL
:PROPERTIES:
:CUSTOM_ID: QueryDSL
:END:
*** WIP Maven
:PROPERTIES:
:CUSTOM_ID: Maven
:END:
***** Jaký je rozdíl mezi <dependencies> a <dependencyManagement>? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Jaký-je-rozdíl-mezi-dependencies-a-dependencyManagement
:END:
:ANSWER:
- dependencyManagement má smysl je v multi-module projektu, konkrétně v otcovském pomu.
- Používá se pro deklarování dependencí a jejich scopů a verzí a každý sub-modul si pak jen řekne, které z nich chce používat (a už nemusí deklarovat scope a verzi).
- dependencies v otcovském pomu znamenají, že každý sub-modul všechny takové dependence automaticky dostane.
- Používá se to např. pro testovací balíky nebo nějaké velmi obecně použitelné commons balíky a jiné pomocné tooly jako Lombok.
:END:
***** K čemu se používá scope provided?                        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: K-čemu-se-používá-scope-provided
:END:
:ANSWER:
- Jde o dependence, které chceme při kompilaci, ale nechceme na runtimu
- Většinou jde o dependence, které nám v JavaEE poskytne aplikační server
- Nebo o tooly jako Lombok, které potřebujeme při kompilaci a nepotřebujeme na runtimu
:END:
*** TODO Gradle
:PROPERTIES:
:CUSTOM_ID: Gradle
:END:
*** JavaEE / JakartaEE
:PROPERTIES:
:CUSTOM_ID: JavaEE-JakartaEE
:END:
**** access intent
:PROPERTIES:
:CUSTOM_ID: access-intent
:END:
***** optimistic vs pessimistic
:PROPERTIES:
:CUSTOM_ID: optimistic-vs-pessimistic
:END:
**** Jaký je rozdíl mezi Java SE a JavaEE                       :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Jaký-je-rozdíl-mezi-Java-SE-a-JavaEE
:END:
- Java SE se používá hlavně pro nějaké procesy, které se nastartují, provedou nějakou činost a skončí
- JavaEE se používá hlavně pro aplikace, které jsou nasazené na nějakém trvale běžícím serveru a vystavují buď nějaké služby nebo přímo front end.
**** Co je to aplikační server a nějaký příklad                 :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Co-je-to-aplikační-server-a-nějaký-příklad
:END:
*** Implemetations
:PROPERTIES:
:CUSTOM_ID: Implemetations
:END:
**** GraalVM
:PROPERTIES:
:CUSTOM_ID: GraalVM
:END:
**** Quarcus
:PROPERTIES:
:CUSTOM_ID: Quarcus
:END:
**** AdoptOpenJDK
:PROPERTIES:
:CUSTOM_ID: AdoptOpenJDK
:END:
*** JDBC
:PROPERTIES:
:CUSTOM_ID: JDBC
:END:
*** JMS
:PROPERTIES:
:CUSTOM_ID: JMS
:END:
** WIP JavaScript                                                    :TOPIC:
:PROPERTIES:
:CUSTOM_ID: JavaScript
:END:
*** what is IIFE?                                                :QUESTION:
:PROPERTIES:
:CUSTOM_ID: what-is-IIFE
:END:
- An Immediately Invoked Function Expression is a good way at protecting the scope of your function and the variables within it.
*** inheritance model of JS
:PROPERTIES:
:CUSTOM_ID: inheritance-model-of-JS
:END:
**** What is template based inheritance
:PROPERTIES:
:CUSTOM_ID: What-is-template-based-inheritance
:END:
*** hoisting
:PROPERTIES:
:CUSTOM_ID: hoisting
:END:
*** event loop
:PROPERTIES:
:CUSTOM_ID: event-loop
:END:
*** promisses
:PROPERTIES:
:CUSTOM_ID: promisses
:END:
*** observables
:PROPERTIES:
:CUSTOM_ID: observables
:END:
*** RxJS
:PROPERTIES:
:CUSTOM_ID: RxJS
:END:
*** JS modular system
:PROPERTIES:
:CUSTOM_ID: JS-modular-system
:END:
*** The Mostly Adequate Guide to Functional Programming
:PROPERTIES:
:learning_1: https://github.com/MostlyAdequate/mostly-adequate-guide
:CUSTOM_ID: The-Mostly-Adequate-Guide-to-Functional-Programming
:END:
#+call: lg-get-props-entry()
** WIP TypeScript                                                    :TOPIC:
:PROPERTIES:
:CUSTOM_ID: TypeScript
:END:
** WIP ReasonML                                                      :TOPIC:
:PROPERTIES:
:CUSTOM_ID: ReasonML
:END:
** TODO Python
:PROPERTIES:
:CUSTOM_ID: Python
:END:
** TODO OCaml
:PROPERTIES:
:CUSTOM_ID: OCaml
:END:
** TODO Haskell
:PROPERTIES:
:CUSTOM_ID: Haskell
:END:
** TODO Scala
:PROPERTIES:
:CUSTOM_ID: Scala
:END:
** TODO JS on backend
:PROPERTIES:
:CUSTOM_ID: JS-on-backend
:END:
** TODO JS environment
:PROPERTIES:
:CUSTOM_ID: JS-environment
:END:
*** npm
:PROPERTIES:
:CUSTOM_ID: npm
:END:
**** Scoped Packages
:PROPERTIES:
:learning_1: https://docs.npmjs.com/about-scopes
:CUSTOM_ID: Scoped-Packages
:END:
#+call: lg-get-props-entry()
About scopes
- Note: You must be using npm version 2 or greater to use scopes. To upgrade to the latest version of npm, on the command line, run npm install npm@latest -g
- When you sign up for an npm user account or create an Org, you are granted a scope that matches your user or Org name. You can use this scope as a namespace for related packages.
- A scope allows you to create a package with the same name as a package created by another user or Org without conflict.
- When listed as a dependent in a package.json file, scoped packages are preceded by their scope name. The scope name is everything between the @ and the slash:

- “npm” scope:
#+begin_example
@npm/package-name
#+end_example
- “npmcorp” scope:
#+begin_example
@npmcorp/package-name
#+end_example
- To create and publish public scoped packages, see “Creating and publishing scoped public packages”.
- To create and publish private scoped packages, see “Creating and publishing private packages”.
- Scopes and package visibility§
  - Unscoped packages are always public.
  - Private packages are always scoped.
  - Scoped packages are private by default; you must pass a command-line flag when publishing to make them public.
- For more information on package scope and visibility, see “Package scope, access level, and visibility”.
*** yarn
:PROPERTIES:
:CUSTOM_ID: yarn
:END:
*** nvm
:PROPERTIES:
:CUSTOM_ID: nvm
:END:
*** WIP Babel
:PROPERTIES:
:learning_1: https://babeljs.io/
:CUSTOM_ID: Babel
:END:
#+call: lg-get-props-entry()
** WIP Language theory                                               :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Language-theory
:END:
*** Garbage Collector
:PROPERTIES:
:CUSTOM_ID: Garbage-Collector
:END:
*** Type systems
:PROPERTIES:
:CUSTOM_ID: Type-systems
:END:
**** strongly typed
:PROPERTIES:
:CUSTOM_ID: strongly-typed
:END:
**** weakly typed
:PROPERTIES:
:CUSTOM_ID: weakly-typed
:END:
*** Parameter passing
:PROPERTIES:
:CUSTOM_ID: Parameter-passing
:END:
**** Pass by Reference
:PROPERTIES:
:CUSTOM_ID: Pass-by-Reference
:END:
**** Pass By Name
:PROPERTIES:
:CUSTOM_ID: Pass-By-Name
:END:
**** Pass By Value
:PROPERTIES:
:CUSTOM_ID: Pass-By-Value
:END:
*** Recursion
:PROPERTIES:
:CUSTOM_ID: Recursion
:END:
**** Tail call Optimization
:PROPERTIES:
:CUSTOM_ID: Tail-call-Optimization
:END:
*** Evaluation type
:PROPERTIES:
:CUSTOM_ID: Evaluation-type
:END:
**** Lazy Evaluation
:PROPERTIES:
:CUSTOM_ID: Lazy-Evaluation
:END:
**** Strict Evaluation
:PROPERTIES:
:CUSTOM_ID: Strict-Evaluation
:END:
* WIP Libraries and Frameworks                                       :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: LIBRARIES_AND_RAMEWORKS
:END:
** WIP Spring & Spring Boot
:PROPERTIES:
:learning_1:  https://www.baeldung.com/spring-interview-questions
:CUSTOM_ID: Spring-Spring-Boot
:END:
#+call: lg-get-props-entry()
*** Jaký je rozdíl mezi JavaEE a Springem?                       :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Jaký-je-rozdíl-mezi-JavaEE-a-Springem
:END:
- JavaEE je standard, který potřebuje aplikační server (JBoss, WebSphere, etc.) jakožto implementaci a runtime prostředí.
- Spring je framework, který roztáčí vlastní Spring Context, což je taková obdoba kontejneru v JavaEE a v něm všechno běží.
*** Difference between spring and spting boot                    :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Difference-between-spring-and-spting-boot
:END:
*** Co přinesl Spring Boot do Spring ekosystému?                 :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Co-přinesl-Spring-Boot-do-Spring-ekosystému
:END:
:ANSWER:
- Strašně zjednodušený start aplikace.
- Vše je velmi opinionated a není potřeba napsat ani jednu řádku konfigurace, protože všechno má nějaký "rozumný default".
- Aplikace může být standalone JAR proces, WAR nebo JAR s embedded Tomcatem.
- V každém případě je to one liner.
- Plus mnoho "starter" dependencí, kterými jde snadno přidat další moduly a tooly tímto opinionated stylem.
:END:
*** Jaký je hlavní rozdíl v transaction handlingu mezi JavaEE (od verze 3) a Springem? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Jaký-je-hlavní-rozdíl-v-transaction-handlingu-mezi-JavaEE-od-verze-3-a-Springem
:END:
:ANSWER:
- JavaEE to má implicitní a Spring explicitní
- V JavaEE deklarujeme EJB a ta má všechny své public metody automaticky v transakci v nějakém defaultním módu
- Ve Springu deklarujeme beanu nějakého typu a automaticky nikdy žádné transakce nemá.
- Zapínáme si je explicitně pomocí anotace.
:END:
*** How Would You Enable Transactions in Spring and What Are Their Benefits? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: How-Would-You-Enable-Transactions-in-Spring-and-What-Are-Their-Benefits
:END:
:ANSWER:
There are two distinct ways to configure Transactions:
- with *annotations* or
- by using *Aspect Oriented Programming* (AOP)  each with their advantages.

The benefits of using Spring Transactions, according to the official docs, are:

- Provide a consistent programming model across different transaction APIs such as JTA, JDBC, Hibernate, JPA, and JDO
- Support declarative transaction management
- Provide a simpler API for programmatic transaction management than some complex transaction APIs such as JTA
- Integrate very well with Spring's various data access abstractions
:END:
*** What is the difference betweek JPA and Hibernate?            :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-is-the-difference-betweek-JPA-and-Hibernate
:END:
:ANSWER:
- JPA is a Data Access Abstraction used to reduce the amount of boilerplate code
- Hibernate is an implementation of Java Persistence API and offers benefits of loose coupling
:END:
*** Can use jetty instead of tomcat in spring-boot-starter-web?  :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Can-use-jetty-instead-of-tomcat-in-spring-boot-starter-web
:END:
:ANSWER:
- Yes, we can use jetty instead of tomcat in spring-boot-starter-web, by removing the existing dependency and including the following:
#+begin_src xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>
#+end_src
:END:
*** What Is Reactive Programming?                                :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-Is-Reactive-Programming
:END:
:ANSWER:
- Reactive programming is about:
  - non-blocking,
  - event-driven applications that
  - scale with a small number of threads, with
  - back pressure being a key ingredient that aims to ensure producers don't overwhelm consumers.

- The primary benefits of reactive programming are:

- increased utilization of computing resources on multicore and multi-CPU hardware
- and increased performance by reducing serialization
- Reactive programming is generally event-driven, in contrast to reactive systems, which are message-driven.
- Thus, using reactive programming does not mean we're building a reactive system, which is an architectural style.

However, reactive programming may be used as a means to implement reactive systems if we follow the Reactive Manifesto, which is quite vital to understand.

- Based on this, reactive systems have four important characteristics:
  - Responsive: the system should respond in a timely manner
  - Resilient: in case the system faces any failure, it should stay responsive
  - Elastic: reactive systems can react to changes and stay responsive under varying workload
  - Message-driven: reactive systems need to establish a boundary between components by relying on asynchronous message passing
:END:
*** What Is Spring Webflux?                                      :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-Is-Spring-Webflux
:END:
:ANSWER:
- Spring WebFlux is Spring's reactive-stack web framework, and it's an alternative to Spring MVC.

- In order to achieve this reactive model and be highly scalable, the entire stack is non-blocking. Check out our tutorial on Spring 5 WebFlux for additional details.
:END:
*** What Are the Mono and Flux Types?                            :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-Are-the-Mono-and-Flux-Types
:END:
:ANSWER:
- The WebFlux framework in Spring Framework 5 uses Reactor as its async foundation.
- This project provides two core types: Mono to represent a single async value, and Flux to represent a stream of async values.
- They both implement the ~Publisher~ interface defined in the Reactive Streams specification.
- Mono implements ~Publisher~ and returns 0 or 1 elements:
#+begin_src java
public abstract class Mono<T> implements Publisher<T> {...}
#+end_src

Also, Flux implements ~Publisher~ and returns N elements:
#+begin_src java
public abstract class Flux<T> implements Publisher<T> {...}
#+end_src
- By definition, the two types represent streams,
  - hence they're both lazy, which means nothing is executed until we consume the stream using the subscribe() method.
  - Both types are immutable, therefore calling any method will return a new instance of Flux or Mono.
:END:
*** What Is the Use of Webclient and Webtestclient?              :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-Is-the-Use-of-Webclient-and-Webtestclient
:END:
:ANSWER:
- *WebClient* is a component in the new Web Reactive framework that can act as a reactive client for performing non-blocking HTTP requests.
  - Being a reactive client, it can handle reactive streams with back pressure, and it can take full advantage of Java 8 lambdas.
  - It can also handle both sync and async scenarios.

- On the other hand, the *WebTestClient* is a similar class that we can use in tests.
  - Basically, it's a thin shell around the WebClient. It can connect to any server over an HTTP connection. It can also bind directly to WebFlux applications using mock request and response objects, without the need for an HTTP server.
:END:
*** What Are the Disadvantages of Using Reactive Streams?        :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-Are-the-Disadvantages-of-Using-Reactive-Streams
:END:
:ANSWER:
The major disadvantages of using reactive streams are:

- Troubleshooting a Reactive application is a bit difficult; be sure to check out our tutorial on debugging reactive streams for some handy debugging tips
- There is limited support for reactive data stores, as traditional relational data stores have yet to embrace the reactive paradigm
- There's an extra learning curve when implementing
:END:
*** Is Spring 5 Compatible With Older Versions of Java?          :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Is-Spring-5-Compatible-With-Older-Versions-of-Java
:END:
:ANSWER:
In order to take advantage of Java 8 features, the Spring codebase has been revamped. This means older versions of Java cannot be used. Hence, the framework requires a minimum of Java 8.
:END:
*** Can We Use Both Web Mvc and Webflux in the Same Application? :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Can-We-Use-Both-Web-Mvc-and-Webflux-in-the-Same-Application
:END:
:ANSWER:
- As of now, Spring Boot will only allow either Spring MVC or Spring WebFlux, as Spring Boot tries to auto-configure the context depending on the dependencies that exist in its classpath.
- Also, Spring MVC cannot run on Netty.
-  Moreover, MVC is a blocking paradigm and WebFlux is a non-blocking style, therefore we shouldn't be mixing both together, as they serve different purposes.
:END:
*** What Is the Role of the @Autowired Annotation?               :QUESTION:
:PROPERTIES:
:CUSTOM_ID: What-Is-the-Role-of-the-Autowired-Annotation
:END:
- The @Autowired annotation can be used with fields or methods for injecting a bean by type.
- This annotation allows Spring to resolve and inject collaborating beans into your bean.
*** "Spring 4.3 přinesl constructor-based dependency injection i bez nutnosti anotace Autowired. Jaké jsou výhody a nevýhody takového DI?" :QUESTION:
:PROPERTIES:
:CUSTOM_ID: Spring-4-3-přinesl-constructor-based-dependency-injection-i-bez-nutnosti-anotace-Autowired-Jaké-jsou-výhody-a-nevýhody-takového-DI
:END:
:ANSWER:
- "Lépe se to testuje - máme větší kontrolu nad dependencemi a můžeme je mockovat dle libosti a velmi snadno.
- Současně tím v testech vynucujeme nějakou inicializaci těchto dependencí. Jinak by klidně mohly být null.
- Je to takový mnohem přirozenější a intuitivnější způsob inicializace v OOP světě.
- Asi jediná nevýhoda: pokud bude dependencí hodně, začne to být trochu nepřehledné."
:END:

** TODO NodeJS                                                       :TOPIC:
:PROPERTIES:
:CUSTOM_ID: NodeJS
:END:

* WIP Quality and Testing   [0/7]                                    :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: QUALITY
:END:
#+call: lg-get-props-entry()
** TODO Blue green deployment                                      :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Blue-green-deployment
:END:
** TODO AB testing                                                 :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: AB-testing
:END:
** TODO Code coverage                                              :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Code-coverage
:END:
** TODO Cyclomatic complexity                                      :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Cyclomatic-complexity
:END:
** TODO Code quality                                                 :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Code-quality
:END:
** TODO Unit testing
:PROPERTIES:
:CUSTOM_ID: Unit-testing
:END:
** WIP Tools [1/2]
:PROPERTIES:
:CUSTOM_ID: Tools-1-2
:END:
*** WIP Jest                                                         :TOOL:
:PROPERTIES:
:learning_1: https://jestjs.io/
:CUSTOM_ID: Jest
:END:
#+call: lg-get-props-entry()
:DESCRIPTION:
- Jest is a delightful JavaScript Testing Framework with a focus on simplicity.
- It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!
:END:
- universal
- lambdas can be tested
- all in one:
  - orchestrator
  - assertion library (expect)
  - report generator
  - react-test-libraries
- contains Istambul as a JS coverage tool

*** Enzyme                                                  :OUTDATED:TOOL:
:PROPERTIES:
:learning_1: https://enzymejs.github.io/enzyme/
:CUSTOM_ID: Enzyme
:END:
#+call: lg-get-props-entry()
:DESCRIPTION:
- Enzyme is a JavaScript Testing utility for React that makes it easier to test your React Components' output.
- You can also manipulate, traverse, and in some ways simulate runtime given the output.
- Enzyme's API is meant to be intuitive and flexible by mimicking jQuery's API for DOM manipulation and traversal.
:END:
*** COMPETE Enzyme vs react-testing-library
:PROPERTIES:
:CUSTOM_ID: Enzyme-vs-react-testing-library
:learning_1: https://blog.logrocket.com/enzyme-vs-react-testing-library-a-mindset-shift/
:END:
#+call: lg-get-props-entry()
- With react-testing-library, you’re able to easily write tests that represent well enough how the application is experienced by users.
- Let’s say that when you write your tests with react-testing-library, you’re testing your application as if you were the user interacting with the application’s interface.
- On the other hand, when you’re writing your tests with Enzyme, even though you are also able to achieve the same level of confidence that you might get with react-testing-library, it is a bit more cumbersome to build your test structure in a way that resembles a real user.
- In general, what you might see in codebases when looking at tests with Enzyme is that you’re actually testing the props and state of your components, meaning you are testing the internal behavior of components to confirm that the correct view is being presented to users.

*** Jasmine                                                 :OUTDATED:TOOL:
:PROPERTIES:
:CUSTOM_ID: Jasmine
:END:
*** Istambul                                                :OUTDATED:TOOL:
:PROPERTIES:
:learning_1: https://istanbul.js.org/
:CUSTOM_ID: Istambul
:END:
#+call: lg-get-props-entry()
:DESCRIPTION:
- Istanbul instruments your ES5 and ES2015+ JavaScript code with line counters, so that you can track how well your unit-tests exercise your codebase.
- The nyc command-line-client for Istanbul works well with most JavaScript testing frameworks: tap, mocha, AVA, etc.
:END:

*** Karma (Orchestrator)                                         :OUTDATED:
:PROPERTIES:
:CUSTOM_ID: Karma-Orchestrator
:END:
*** Mocha                                                        :OUTDATED:
:PROPERTIES:
:CUSTOM_ID: Mocha
:END:
*** FantomJS                                                :OUTDATED:TOOL:
:PROPERTIES:
:CUSTOM_ID: FantomJS
:END:
*** Protractor                                              :OUTDATED:TOOL:
:PROPERTIES:
:CUSTOM_ID: Protractor
:END:
*** Cucumber                                                         :TOOL:
:PROPERTIES:
:CUSTOM_ID: Cucumber
:END:
* WIP Learning Channels [0/6]                                        :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: LEARNING_CHANNELS
:END:
#+call: lg-get-props-entry()
- where to learn, what to read and follow
** TODO YouTube
:PROPERTIES:
:CUSTOM_ID: YouTube
:END:
** TODO quicklabs
:PROPERTIES:
:CUSTOM_ID: quicklabs
:END:
** TODO Udemy
:PROPERTIES:
:CUSTOM_ID: Udemy
:END:
** TODO Podcasts
:PROPERTIES:
:CUSTOM_ID: Podcasts
:END:
*** TODO InfoQ
:PROPERTIES:
:CUSTOM_ID: InfoQ
:END:
*** TODO Coding Blocks
:PROPERTIES:
:CUSTOM_ID: Coding-Blocks
:END:
*** TODO SE-Radio
:PROPERTIES:
:CUSTOM_ID: SE-Radio
:END:
** WIP Conferences
:PROPERTIES:
:CUSTOM_ID: Conferences
:END:
*** StrangeLoop
:PROPERTIES:
:learning_1: https://www.thestrangeloop.com/
:CUSTOM_ID: StrangeLoop
:END:
#+call: lg-get-props-entry()
*** DEVOXX
:PROPERTIES:
:CUSTOM_ID: DEVOXX
:END:
*** GOTO
:PROPERTIES:
:CUSTOM_ID: GOTO
:END:
*** NDC
:PROPERTIES:
:CUSTOM_ID: NDC
:END:
*** QCon
:PROPERTIES:
:CUSTOM_ID: QCon
:END:
*** Beauty in Code
:PROPERTIES:
:CUSTOM_ID: Beauty-in-Code
:END:
*** Bifrost 2018
:PROPERTIES:
:CUSTOM_ID: Bifrost-2018
:END:
- [[#YT:TbZ57raC1TE][Re Imagine The Hiring Process]]
*** DevOneConf 2018
:PROPERTIES:
:CUSTOM_ID: DevOneConf-2018
:END:
- [[#YT:8NzkYsY7TOk][Making Security an integrated part of the SW Dev Lifecycle]]

** WIP Books
:PROPERTIES:
:CUSTOM_ID: BOOKS
:END:
#+call: lg-get-props-entry()
*** Gene Kim, Patrick Debois, John Willis, Jez Humble: The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Gene-Kim-Patrick-Debois-John-Willis-Jez-Humble-The-DevOps-Handbook-How-to-Create-World-Class-Agility-Reliability-and-Security-in-Technology-Organizations
:END:
- Increase profitability, elevate work culture, and exceed productivity goals through DevOps practices....

*** Daniel Kahneman: Thinking, Fast and Slow                 :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Thinking, Fast and Slow
:END:
- The guru to the gurus at last shares his knowledge with the rest of us....
*** Nassim Nicholas Taleb: The Black Swan, Second Edition: The Impact of the Highly Improbable: :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Nassim-Nicholas-Taleb-The-Black-Swan-Second-Edition-The-Impact-of-the-Highly-Improbable
:END:
- (With a new section: "On Robustness and Fragility": Incerto, Book 2)
  - A black swan is a highly improbable event with three principal characteristics: It is unpredictable;
  - it carries a massive impact; and, after the fact, we concoct an explanation that makes it appear less random, and more predictable, than it was....
*** Nassim Nicholas Taleb: Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Nassim-Nicholas-Taleb-Fooled-by-Randomness-The-Hidden-Role-of-Chance-in-Life-and-in-the-Markets
:END:
- Series: Incerto
  - This audiobook is about luck, or more precisely, how we perceive and deal with luck in life and business....
*** Nassim Nicholas Taleb: Antifragile: Things That Gain from Disorder :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Nassim-Nicholas-Taleb-Antifragile-Things-That-Gain-from-Disorder
:END:
- Series: Incerto
  - From the best-selling author of The Black Swan and one of the foremost thinkers of our time, a book on how some things actually benefit from disorder. Taleb’s message is revolutionary: What is not antifragile will surely perish....
*** Nassim Nicholas Taleb: Skin in the Game: Hidden Asymmetries in Daily Life :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Nassim-Nicholas-Taleb-Skin-in-the-Game-Hidden-Asymmetries-in-Daily-Life
:END:
- Series: Incerto
  - From the New York Times best-selling author of The Black Swan, a bold new work that challenges many of our long-held beliefs about risk and reward, politics and religion....
*** Barry O'Reilly: Unlearn: Let Go of Past Success to Achieve Extraordinary Results :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: O_REILLY:UNLEARN
:END:
- By intentionally and routinely applying the system of unlearning, you’ll be able to adapt your mindset, adopt new behaviors, acquire new skills, and explore new options that will totally transform your performance and the business you lead....
*** Stuart Firestein: Failure: Why Science Is so Successful  :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Stuart-Firestein-Failure-Why-Science-Is-so-Successful
:END:
- Stuart Firestein shows us that the scientific enterprise is riddled with mistakes and errors - and that this is a good thing!...
*** Nate Silver: The Signal and the Noise: Why So Many Predictions Fail - but Some Don't :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: SILVER:SIGNAL_AND_NOISE
:END:
- Drawing on his own groundbreaking work, Silver examines the world of prediction, investigating how we can distinguish a true signal from a universe of noisy data....
*** Philip Tetlock , Dan Gardner: Superforecasting: The Art and Science of Prediction :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Philip-Tetlock-Dan-Gardner-Superforecasting-The-Art-and-Science-of-Prediction
:END:
From one of the world's most highly regarded social scientists, a transformative book on the habits of mind that lead to the best predictions....
*** Daniel Coyle: The Culture Code: The Secrets of Highly Successful Groups :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Daniel-Coyle-The-Culture-Code-The-Secrets-of-Highly-Successful-Groups
:END:
- In The Culture Code, Daniel Coyle goes inside some of the world's most successful organizations - including
- Pixar, and the US Navy's SEAL Team Six - and reveals what makes them tick....
*** Andy Greenberg: Sandworm: A New Era of Cyberwar and the Hunt for the Kremlin's Most Dangerous Hackers :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: GREENBERG:SANDWORM
:END:
- From Wired senior writer Andy Greenberg comes the true story of the most devastating cyberattack in history and the desperate hunt to identify and track the elite Russian agents behind it....
*** Philip E. Tetlock: Expert Political Judgment: How Good is it? How can We Know? :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Philip-E-Tetlock-Expert-Political-Judgment-How-Good-is-it-How-can-We-Know
:END:
- The intelligence failures surrounding the invasion of Iraq dramatically illustrate the necessity of developing standards for evaluating expert opinion....
*** Steven Pinker: The Stuff of Thought: Language as a Window into Human Nature :AUDIBLE:BOOK:
:PROPERTIES:
:CUSTOM_ID: Steven-Pinker-The-Stuff-of-Thought-Language-as-a-Window-into-Human-Nature
:END:
- In The Stuff of Thought, Steven Pinker marries two of the subjects he knows best: language and human nature. The result is a fascinating look at how our words explain our nature....
*** Simon Conway Morris (Editor): The Deep Structure of Biology: Is Convergence Sufficiently Ubiquitous to Give a Directional Signal :AUDIBLE:NO_EXPORT:BOOK:
:PROPERTIES:
:CUSTOM_ID: Simon-Conway-Morris-Editor-The-Deep-Structure-of-Biology-Is-Convergence-Sufficiently-Ubiquitous-to-Give-a-Directional-Signal
:END:
- Twelve renowned scientists and theologians offer penetrating insights into the evolution dialogue in The Deep Structure of Biology....
*** Robert M. Sapolsky: Behave: The Biology of Humans at Our Best and Worst :AUDIBLE:NO_EXPORT:BOOK:
:PROPERTIES:
:CUSTOM_ID: Robert-M-Sapolsky-Behave-The-Biology-of-Humans-at-Our-Best-and-Worst
:NO_INDEX: t
:END:
- More than a decade in the making, this game-changing book is Robert Sapolsky's genre-shattering attempt to answer the question of why we do what we do....
*** Irvin D. Yalom: The Schopenhauer Cure: A Novel :AUDIBLE:BOOK:NO_EXPORT:
:PROPERTIES:
:CUSTOM_ID: YALOM_THE_SCHOPENHAUER_CURE
:NO_INDEX: t
:END:
- Suddenly confronted with his own mortality after a routine checkup, eminent psychotherapist Julius Hertzfeld is forced to reexamine his life and work....

*** Michael A Britt: Psych Experiments: From Pavlov's dogs to Rorschach's inkblots, put psychology's most fascinating studies to the test :DEAD_TREE:BOOK:
:PROPERTIES:
:CUSTOM_ID: BRITT:PSYCH_EXPERIMENTS
:END:
- Forget the labs and lecture halls. You can conduct your very own psych experiments at home!
- Famous psychological experiments--from Freud's ego to the Skinner box--have changed the way science views human behavior. But how do these tests really work? In Psych Experiments, you'll learn how to test out these theories and experiments for yourself...no psychology degree required!
- Guided by Michael A. Britt, creator of popular podcast The Psych Files, you can conduct your own experiments when browsing your favorite websites (to test the "curiosity effect"), in restaurants (learning how to increase your tips), when presented with advertisements (you'd be surprised how much you're influenced by the color red), and even right on your smartphone (and why you panic when you can't find it). You'll even figure out how contagious yawning works!
- With this compulsively readable little book, you won't just read about the history of psychology--you'll live it!
* WIP Psychology                                                     :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: Psychology
:END:
** Cognitive Biases [0/6]                                            :TOPIC:
:PROPERTIES:
:CUSTOM_ID: COGNITIVE_BIASES
:END:
*** WIP The Backfire Effect                                       :CONCEPT:
:PROPERTIES:
:learning_1: https://youarenotsosmart.com/2011/06/10/the-backfire-effect/
:CUSTOM_ID: The-Backfire-Effect
:END:
- The Misconception: When your beliefs are challenged with facts, you alter your opinions and incorporate the new information into your thinking.
- The Truth: When your deepest convictions are challenged by contradictory evidence, your beliefs get stronger.
*** TODO Confirmation bias                                        :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Confirmation-bias
:END:
*** TODO Loss aversion                                            :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Loss-aversion
:END:
*** TODO Parkinson's law of triviality                            :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: LAW_OF_TRIVIALITY
:END:
- The tendency to give disproportionate weight to trivial issues. Also known as bikeshedding, this bias explains why an organization may avoid specialized or complex subjects, such as the design of a nuclear reactor, and instead focus on something easy to grasp or rewarding to the average participant, such as the design of an adjacent bike shed.
*** TODO Pygmalion effect                                         :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: PYGMALION_EFFECT
:END:
*** TODO Selection Bias / Survivor Bias                           :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: SURVIVOR_BIAS
:END:
** Famous experiments [0/5]                                          :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Famous-experiments-0-5
:END:
*** TODO Milgram experiment
:PROPERTIES:
:CUSTOM_ID: Milgram-experiment
:END:
*** TODO Robbers Cave Experiment
:PROPERTIES:
:CUSTOM_ID: Robbers-Cave-Experiment
:END:
*** TODO Little Albert Experiment
:PROPERTIES:
:CUSTOM_ID: Little-Albert-Experiment
:END:
*** TODO Stanford Prison Study
:PROPERTIES:
:CUSTOM_ID: Stanford-Prison-Study
:END:
*** TODO The Marshmallow Test
:PROPERTIES:
:CUSTOM_ID: The-Marshmallow-Test
:END:
** Glossary                                                          :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Glossary
:END:
*** WIP Knowledge
:PROPERTIES:
:CUSTOM_ID: Knowledge
:END:
- definition
  - practical and/or theoretical understanding of a topic
- obtained throughput
  - learning training experience
*** WIP Skill
:PROPERTIES:
:CUSTOM_ID: Skill
:END:
- definition
  - things that one learns through training and/or through experience
- obtained throughput
  - practicing, learning
*** WIP Ability
:PROPERTIES:
:CUSTOM_ID: Ability
:END:
- definition
  - level of being able to perform or deliver a task
- obtained throughput
  - natural capability

* WIP Big Names        [0/27]                                        :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: BIG_NAMES
:END:
#+call: lg-get-props-entry()
- Important people, people that are worth to follow
** TODO Bartosz MILEWSKI [0/1]
:PROPERTIES:
:CUSTOM_ID: Bartosz-MILEWSKI-0-1
:END:
*** TODO Opening keynote - Fun with categories - Bartosz Milewski
:PROPERTIES:
:lg-source: YouTube
:lg-authors: Bartosz%20MILEWSKI
:lg-categoty: Category Theory
:lg-subject: Opening keynote - Fun with categories - Bartosz Milewski
:CUSTOM_ID: Opening-keynote-Fun-with-categories-Bartosz-Milewski
:END:
#+call: lg-get-props-entry()

https://youtu.be/MXbJPe30ONQ

*** TODO Category Theory II 8.1: F-Algebras, Lambek's lemma
:PROPERTIES:
:lg-source: YouTube
:lg-authors: Bartosz%20MILEWSKI
:lg-categoty: Category Theory
:lg-subject: Category Theory II 8.1: F-Algebras, Lambek's lemma
:CUSTOM_ID: CATEGORY_THEORY_II_8_1:F_ALGEBRA_LAMBEK_S_LEMMA
:END:
#+call: lg-get-props-entry()

https://youtu.be/zkDVCQiveEo
** TODO Venkat SUBRAMANIAM
:PROPERTIES:
:CUSTOM_ID: Venkat-SUBRAMANIAM
:END:
** TODO Hannah FRY
:PROPERTIES:
:CUSTOM_ID: Hannah-FRY
:END:
*** Hello World
:PROPERTIES:
:CUSTOM_ID: Hello-World
:END:
** TODO Trisha GEE
:PROPERTIES:
:CUSTOM_ID: Trisha-GEE
:END:
** WIP Kevlin HENNEY
:PROPERTIES:
:CUSTOM_ID: Kevlin-HENNEY
:END:
- interresting and usually funny conference talks
- [[#YT:AbgsfeGvg3E][GOTO 2018 • Old Is the New New • Kevlin Henney]]
- [[#YT:v-RkKohsF78][Kevlin Henney - 1968]]
** WIP Michael PLÖD [0/2]
:PROPERTIES:
:CUSTOM_ID: Michael-PLÖD-0-2
:END:
*** TODO Webinar: Overview and Core Values of Domain-Driven Design - Part 1/5
:PROPERTIES:
:lg-categoty: DDD
:lg-authors: Michael%20PLÖD
:lg-subject: Webinar: Overview and Core Values of Domain-Driven Design - Part 1/5
:CUSTOM_ID: Webinar-Overview-and-Core-Values-of-Domain-Driven-Design-Part-1-5
:END:
#+call: lg-get-props-entry()

https://youtu.be/Z0zpSB85XGs
*** TODO Webinar: Internal Building Blocks: Aggregates, Entities, Value Objects Part 3/5
:PROPERTIES:
:lg-categoty: DDD
:lg-authors: Michael%20PLÖD
:lg-source: YouTube
:lg-yt-url: https://youtu.be/RHg53wMflCc
:lg-url-1: https://github.com/mploed/ddd-with-spring﻿
:lg-subject: Webinar: Internal Building Blocks: Aggregates, Entities, Value Objects Part 3/5
:CUSTOM_ID: Webinar-Internal-Building-Blocks-Aggregates-Entities-Value-Objects-Part-3-5
:END:
#+call: lg-get-props-entry()
** TODO Mark REINHOLD
:PROPERTIES:
:CUSTOM_ID: Mark-REINHOLD
:END:
- [[#YT:SyVLioZmbOM][Modern Java: Change is the Only Constant by Mark Reinhold]]
- Java Lead architect
** TODO Brian GOETZ
:PROPERTIES:
:CUSTOM_ID: Brian-GOETZ
:END:
** TODO Troy HUNT
:PROPERTIES:
:CUSTOM_ID: Troy-HUNT
:END:
** TODO Scott MEYERS
:PROPERTIES:
:CUSTOM_ID: Scott-MEYERS
:END:
** TODO Erik MEIJER
:PROPERTIES:
:CUSTOM_ID: Erik-MEIJER
:END:
** TODO Edward KMETT [0/1]
:PROPERTIES:
:CUSTOM_ID: Edward-KMETT-0-1
:END:
*** TODO Stop Treading Water:  Learning to Learn by Edward Kmett
:PROPERTIES:
:CREATED:  [2018-03-17 Sat 09:11]
:lg-categoty: Haskell
:lg-source: YouTube
:lg-authors: Edward%20KMETT
:lg-subject: Stop Treading Water:  Learning to Learn by Edward Kmett
:CUSTOM_ID: Stop-Treading-Water-Learning-to-Learn-by-Edward-Kmett
:END:
#+call: lg-get-props-entry()

https://youtu.be/j0XmixCsWjs
** TODO Chris ALLEN
:PROPERTIES:
:CUSTOM_ID: Chris-ALLEN
:END:
** TODO Martin FOWLLER
:PROPERTIES:
:CUSTOM_ID: Martin-FOWLLER
:END:
** TODO Martin KLEPPMANN
:PROPERTIES:
:book:     https://dataintensive.net/
:CUSTOM_ID: Martin-KLEPPMANN
:END:
#+call: lg-get-props-entry()
- Book: Designing data intensive applications
** TODO Kent BECK
:PROPERTIES:
:CUSTOM_ID: Kent-BECK
:END:
** TODO Zuzana SOCHOVA
:PROPERTIES:
:CUSTOM_ID: Zuzana-SOCHOVA
:END:
** TODO Brian LONSDORF (dr Boolean)
:PROPERTIES:
:CUSTOM_ID: Brian-LONSDORF-dr-Boolean
:END:
- https://twitter.com/drboolean
- https://github.com/DrBoolean
- https://egghead.io/instructors/brian-lonsdorf
** TODO Chris RICHARDSON [0/3]
:PROPERTIES:
:CUSTOM_ID: Chris-RICHARDSON-0-3
:END:
- [[#yt:fhZwzm-d9ys][YOW! Conference 2018 - Chris Richardson - Events and Commands]]
- [[#YT:gR_EGN86fvg][Developing Microservices with Aggregates by Chris Richardson]]
*** TODO There is No Such Thing as a Microservice! - Chris Richardson January 2018
:PROPERTIES:
:lg-subject: There is No Such Thing as a Microservice! - Chris Richardson January 2018
:CUSTOM_ID: There-is-No-Such-Thing-as-a-Microservice-Chris-Richardson-January-2018
:END:
#+call: lg-get-props-entry()

** TODO Elizabeth STOKOE
:PROPERTIES:
:CUSTOM_ID: Elizabeth-STOKOE
:END:
** WIP Linda RISING
:PROPERTIES:
:CUSTOM_ID: Linda-RISING
:END:
- Linda Rising is an independent consultant who lives near Nashville, Tennessee. Linda has a Ph.D. from Arizona State University in object-based design metrics. Her background includes university teaching as well as work in industry in telecommunications, avionics, and tactical weapons systems. She is an internationally known presenter on topics related to agile development, patterns, retrospectives, the change process, and the connection between the latest neuroscience and software development. Linda is the author of numerous articles and five books. The latest, More Fearless Change, co-authored with Mary Lynn Manns. Her web site is: www.lindarising.org
- [[#vimeo:325143661][Meeting resistance and moving forward — Linda Rising]]
- [[#se-radio:238][SE-Radio 238: Linda Rising on the Agile Brain]]
** WIP Siren Hofvander
:PROPERTIES:
:CUSTOM_ID: Siren-Hofvander
:END:
- twitter: @securitypony
- [[#YT:8NzkYsY7TOk][Making Security an integrated part of the SW Dev Lifecycle]]
** TODO Eugenia CHENG
:PROPERTIES:
:CUSTOM_ID: Eugenia-CHENG
:END:
** TODO David SPIVAK
:PROPERTIES:
:CUSTOM_ID: David-SPIVAK
:END:
** TODO Steven PINKER [0/0]
:PROPERTIES:
:CUSTOM_ID: Steven-PINKER-0-0
:END:
** TODO Nassim TALEB
:PROPERTIES:
:CUSTOM_ID: Nassim-TALEB
:END:
** TODO Marek Orko VÁCHA
:PROPERTIES:
:CUSTOM_ID: Marek-Orko-VÁCHA
:END:

* WIP Core Values [0/3]                                              :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: CORE_VALUES
:END:
#+call: lg-get-props-entry()
The moral aspects
** TODO Code of Conduct                                                :TOPIC:
:PROPERTIES:
:CUSTOM_ID: Code-of-Conduct
:END:
** WIP SW developer responsibility                                   :TOPIC:
:PROPERTIES:
:CUSTOM_ID: SW-developer-responsibility
:END:
- finally the code that was driving the engine in diesel gate was written by someone
  - -> those developer(s) must have known what they were doing
** WIP ACM ethics Code
:PROPERTIES:
:learning_1: https://ethics.acm.org/
:CUSTOM_ID: ACM-ethics-Code
:END:
* WIP Concepts and Terms [0/15]                                      :DOMAIN:
:PROPERTIES:
:CUSTOM_ID: Concepts-and-Terms-0-15
:END:
:CUSTOM_ID: CONCEPTS
:END:
#+call: lg-get-props-entry()
** TODO Regression to the Mean                                     :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: REGRESSION_TO_THE_MEAN
:END:
#+call: lg-get-props-entry()
** TODO Fat Tail Distribution                                      :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: FAT_TAIL_DISTRIBUTION
:END:
** TODO Data Driven Decision                                       :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Data-Driven-Decision
:END:
** TODO Shift Left                                                 :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Shift-Left
:END:
- like shift left security
** TODO Immutability                                               :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: IMMUTABILITY_CONCEPT
:END:
** TODO I-Shaped vs T-shaped /  Π-shaped                       :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: I-Shaped-vs-T-shaped-Π-shaped
:END:
** TODO Chaos Engineering                                          :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Chaos-Engineering
:END:
** TODO Intrinsic vs Extrinsic Motivation               :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Intrinsic-vs-Extrinsic-Motivation
:END:
** TODO Leading vs Lagging Indicators                              :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Leading-vs-Lagging-Indicators
:END:
** TODO Declarative vs Imperative                                  :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Declarative-vs-Imperative
:END:
** TODO Strict vs Lazy Evaluation                                  :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Strict-vs-Lazy-Evaluation
:END:
** TODO Back-pressure Strategies                                  :CONCEPT:
:PROPERTIES:
:learning_1: https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7
:CUSTOM_ID: Back-pressure-Strategies
:END:
#+call: lg-get-props-entry()
** TODO Overqualified Query                                        :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Overqualified-Query
:END:
** TODO Access Intent                                              :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Access-Intent
:END:
** TODO Skepticism                                                 :CONCEPT:
:PROPERTIES:
:CUSTOM_ID: Skepticism
:END:
* WIP Commented Resources                                           :CHAPTER:
:PROPERTIES:
:CUSTOM_ID: Commented-Resources
:END:
** WIP Videos [/]                                        :CHAPTER:
:PROPERTIES:
:CUSTOM_ID: Videos
:END:
*** YouTube [0/14]
:PROPERTIES:
:CUSTOM_ID: YouTube-0-14
:END:
**** WIP GOTO 2018 • Old Is the New New • Kevlin Henney
:PROPERTIES:
:author:   Kevlin Henney
:CREATED:  [2019-02-24 Sun 20:41]
:lg-yt-url: https://youtu.be/AbgsfeGvg3E
:CUSTOM_ID: YT:AbgsfeGvg3E
:END:
#+call: lg-get-props-entry()

- https://youtu.be/AbgsfeGvg3E
- 1968: year full of news
- Algol 68 - to big to ambitious expression oriented. If and if. Has closure.
- Not a new ideas.
- Singleton single malt whiskey
- System has either zero or multiple singleton
- Rian Foote: Patterns are aggressive disregard of originality.
- Richard Gabriel: worse is better in 1990.
  - Develop with minimal invention.
  - Better to have underfeatute software that is rock solid
- Simplicity
- Completeness
- C2 wiki was 150 lines of perl code.
- Correctness:
- Consistent
- 1968 NATO science conference. Software development process is iterative
- 1968 afips. Influential conference..
- Improve usability by making the software Faster.
- The fastest io is no io
- Command line tools can be 235x faster than your Hadoop cluster
- 299792458 is in no configuration file.
- can you fit your code in your cognitive limit
- lion's commentary of Unix 6th edition 9500 lines is a complete os.
  - there are Java classes bigger than that

- Stonehenge as an enterprise software.
  - Mono lithos one huge stone difficult to move
- UNIX philosophy.
  - White one thing that does one thing and does it well.

- 11 years of sun cycle reflect the SW industry cycle.
- write programs to work together
- ask Alfred Aho. Tdd on 1970 th


- Ward Cunningham oopsla 92 technical dept


- Jack W. Reeves:
  - programming is a design activity
- Alan Kay:
  - oop means only messaging,local retention and protection and hiding of state-process, and extreme late-binding of all things
- William Cook lambda calculus was the first object-oriented language (1941) 1932
- Simon Peyton-Jones (mr. Haskell):
  - excel is the world's most popular functional language

- coordinatio languages: separate computation and coordination
  - Unix pipe 1964
  - Ken Thompson 1970 implementace pipe in Unix

**** WIP Kevlin Henney - 1968
:PROPERTIES:
:CREATED:  [2019-02-26 Tue 20:34]
:lg-authors: Kevlin%20Henney
:lg-source: YouTube
:lg-quality: worth returning to it
:lg-tech-q: good
:lg-yt-url: https://youtu.be/v-RkKohsF78
:lg-serie: YOW! Conference 2018
:lg-form:  conference-talk
:CUSTOM_ID: YT:v-RkKohsF78
:END:
#+call: lg-get-props-entry()

https://youtu.be/v-RkKohsF78

- Pražské jaro.
- Jimmy Hendrix
- Led Zeppelin
- Facebook in 1969
- NATO congerence in Garmish (1968)
- Peter McBride: software craftsmanship
- Apollo project Margaret Heafield Hamilton inventés the software engineering term
- AFIPS conference proceedings vol. 33 1968
  - PERT .. createss only a paper
  - most deadly think in SW: you specify what you are going to do and then you do it an
  - design process is an iterative one
  - unit test, modularity
  - Patterns: aggressive disregard to originality
- Christopher Alexander: notes on the synthesis of form
  - book published in 1964
  - referenced in many later works in system / subsystem thinking
- Melvin Conway: how committees invent
  - Conway's law mandatory to mention on each conference
  - returns every 10 years
  - communication structures define system design
- Adam Thornhill:
  - your code as a crime scene (book)
  - talks about Conway's law.. based on much more data than the original Conway definition
- Stonehenge..
  - as a legacy system..
  - how did they do it..
  - we don't know
  - there is no documentation
  - Doug Mcllroy: this is the UNIX philosophy:
    - write programs that do one thing and do it well
    - write programs to work together
    - isn't this microservice definition
- Alan Perlis (first recipient of the Turing award)
  - a software system can be best designed if the testing is interlaced with the design instead of being used after the design
- bi-quinary coded decimal system
  - first system used in early computers
- ALGOL 68
  - int, long, void, bool, char, short, union, struct
  - born shell was inspired by algol
  - { did not exist at that time keyboard
  - actually try to write { on Scandinavian keyboard it is worse than. Emacs
  - start to look like lisp..
  - TDD in algol 68
- TDD instituted in 70 th wit AWK
- Alfred Aho :  we instituted rigorous regression tests for all of the features of AWK. Any of the three of us who put in new feature first had to write a test for the new feature
- simula 67
  - definition os class and instance
- pragmatic bullshit
  - we use pragmatic Agile
  - pragmatic functional
  - pragmatic structured programming
- lisp....
**** WIP YOW! Conference 2018 - Chris Richardson - Events and Commands
:PROPERTIES:
:CREATED:  [2019-03-07 Thu 20:16]
:lg-subject: YOW! Conference 2018 - Chris Richardson - Events and Commands
:CUSTOM_ID: yt:fhZwzm-d9ys
:END:
#+call: lg-get-props-entry()

https://youtu.be/fhZwzm-d9ys
:TOPICS:
- REST
- gRPC
- saga
- CQRS
- event-sourcing
- replication-lag
- transactional messaging
- temporaril coupling
- api-composition-pattern
- transactional outbox pattern
- transactional-log-tailing
- wal
:END:

:REFERENCES:
Microservices.io
Eventuate.io
Microservices.io/book (ctwyowconf18)
:END:

:TRIVIA:
- Saga - 1987 paper Hector Garcia-Molina and Kenneth Salem
  - use chains of small transactions coordinated by asynchronous messages
:END:
:POINTS-TAKEN:
- mainly
  - microservices are more than REST
  - microservices are more than events
  - microservices != Event sourcing
  - Apache Kafka != Event store
- service definition (contains of following parts)
  1. API
     - operation (both sync or asynchronous)
       - commands (CRUD)
       - queries
     - Events
       - event publisher
  2. has a dedicated database / table / schema
     - might contain replica of data of another service
  3. is a API client
     - invokes operations
  4. is event subscriber

- service enable
  - continuous delivery / deployment
  - testability and deployability
  - loosely coupled teams

- no acid transactiona position the easy w
  - no distributed transactions!
- sagas are ACD not Acid
- asynchronous messaging manages the Saga completion owing at least one delivery while preserving order

- Saga step = s transaction local to service
- 2pc is not an option
- sequencing Saga transactions
  - after completion of transaction T(I) "something" must decide what step to execute next
    - success: which T(I+1) ... Branching
    - failure: C(i-1)
- coordination
  - choreography: *distributed* decision making
    - simple.. for primitive cases. Higher connaissance cyclic dependencies ... Overloads domain objectsviin. I minimal
  - orchestration: *centralized* decision making
    - orchestration objects implements state machine and invokes the participants

- queries
  - API compositions pattern
    - to difficult to implement in many cases
  - CQRS
    - mouthful way of saying: maintain a replica of the data in a format that makes it easy to query (use elastic search or mongodb)
      - the view is maintained up to date by subscribing to the events emitted by the services that own the data ... Update the replica
      - commands
        - POST
        - PUT
        - DELETE
      - Queries
        - GET
          - you can use even different types of databases per type of view
  - replication lag (handling)
    - has to be handled by the UI side
- implementing transactional messaging
  - publish to message broker first
    - only in very simple cases
  - use even sourcing
    - event sourcing = event centric approach to business logic and persistence
    - persist object as a sequence of events
      - replay events to re-enter create in memory state
      - sidenote: Apache Kafka != Event store
    - Event sourcing guarantees: state change -> event is published
  - traditional persistence + transactional outbox pattern
    - transactional log tailing
    - polling - but it introduces latency
:END:

**** TODO Developing Microservices with Aggregates by Chris Richardson
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 06:40]
:lg-subject: Developing Microservices with Aggregates by Chris Richardson
:lg-yt-url: https://youtu.be/gR_EGN86fvg
:CUSTOM_ID: YT:gR_EGN86fvg
:END:
#+call: lg-get-props-entry()
**** WIP Re Imagine The Hiring Process
:PROPERTIES:
:CREATED:  [2019-03-05 Tue 20:33]
:lg-subject: Re Imagine The Hiring Process
:lg-yt-url: https://youtu.be/TbZ57raC1TE
:CUSTOM_ID: YT:TbZ57raC1TE
:END:
#+call: lg-get-props-entry()

- Elle Meredith
- Lachlan Hardy
:TOPICS:
- HumanResources
- Diversity
- Inclusion
- Culture
- Unconscious-bias
- Privilege
- Oppression
- Fluency-heuristic
- Collaborative-friction
- Diversity-dept
- Cultural-fit
:END:
:REFERENCES:
Mark s. Luckie
http://www.getluckie.net/
https://hbr.org/product/an-everyone-culture-becoming-a-deliberately-developmental-organization/14259-HBK-ENG
https://www.youtube.com/channel/UCuVsMYBwV0gJTsWRZ2Dj7iw/
:END:
:TRIVIA:
There is more CEO called David than womens CEO
:END:
:POINTS-TAKEN:
- Homogeneous teams feels more fluent - it is just a bias.
- You must start diverse to keep a diverse team
- Hiring is a part of the work (should be)
- Language of the job postings:
  - competitive terms are more appealing to man than to woman (hitting deadline, competitive work)
    - Cooperating or teamwork in job posting: you get more women appliance
- Whiteboard coding consider harmful
- Organizations that call themselves meritocratic are actually more likely to discriminate
- Have a supportive environment for diversity and beginners
- psychological safety
  - emotionally secure work environment where people bring their whole selves to work
  - people trust each others
  - don't blame people for mistakes
- gradual iterative improvement
  - process are improved to deliver long term benefits rather than focus on short term results
  - change is expected as are mistakes
  - learn fast learn often
- good communication is vital
  - discussions are better than assumptions
  - clear expectations are defined then adjusted as necessary
  - feedback is not just welcomed sought out
  - diverse perspectives are actively engaged with
- life is larger than work
  - flexibility in when and where work is done
  - engagement and support for employee and customer communities
- shared values
  - clearly stated goals and values that all staff share
  - common sense requites commonality (not in contrast with diversity)
  - efforts are targeted at meaningful goals
- Hiring process
  - diversify your inputs
  - share what you have learned
  - how is your marketing stacking up
    - look at your company web page
  - employee performance predictor
    - unstructured interview 14%
    - reference checks 7%
    - years of experience 3%
    - structured interview 26%
    - structured interview with sample test 29%
:END:
**** TODO GOTO 2019 • Mastering the Linux Command Line • Bert Jan Schrijver
:PROPERTIES:
:CUSTOM_ID: GOTO-2019-Mastering-the-Linux-Command-Line-Bert-Jan-Schrijver
:END:
- Hezký video. Za 45 minut jsem se dozvěděl skoro všechno co už jsem o příkazové rádce v Linuxu věděl, ale hezky udělané
- https://youtu.be/qmh7Uppd3x0

**** TODO YOW! Conference 2018 - Cat Swetel - The Metrics You Should Use But Probably Don't
:PROPERTIES:
:CREATED:  [2019-03-04 Mon 20:41]
:lg-yt-url: https://youtu.be/WEuHleDlpdc
:CUSTOM_ID: YT:WEuHleDlpdc
:END:
#+call: lg-get-props-entry()

:TOPICS:
- Nelson rules
- Weibull distribution
- Littles's law
- Leading indicators
- Lagging indicators
- #NOESTIMATES
- Unlabeled axes
:END:

What is the quality?
Measurement of how much the quality you have

Quality is a characteristic of a relationship with customers
- Delivery date prediction
  - time in process
    - units of time per unit of work
    - cycle time ... Maybe not a good name
    - weibull distribution not a standard distribution
    - is a better way to handle
  - automatically inform manager about the delay on other features that will get delayed
    - better to discuss the impact with customer
    - when it comes to non-profit random .... NELSON RULES!
  - multi domain model curve


- 4 aspects
  - quality
  - responsiveness
  - productivity
  - predictability


- Throughput
  - Units of work per unit of time


- Leading  indicators Vs lagging indicators

- Littles's law
  - if your arrival rate is higher than departure rate everything in your system will take a more time.


:Takeouts:
 - Don't use red and green as many man are colorblind
 - Data ... Thing just are ...  no judgment - productivity is lost by people being scared
 - Ron Jeffries:
   - either I invented story points or I was there when it happened. Story points are thinly obfuscated time no more no less.
   - If I am the inventor of story points I am extremely sorry.
 - If you see multi modal curve it shows that you have multiple types of workload
:End:
**** TODO DevOneConf 2018 - Siren Hofvander - Making Security an integrated part of the SW Dev Lifecycle
:PROPERTIES:
:lg-yt-url: https://youtu.be/8NzkYsY7TOk
:CUSTOM_ID: YT:8NzkYsY7TOk
:END:
#+call: lg-get-props-entry()
- Each security talk she gives is full of sarcasm but useful an eye opening
- "I would never o that ... This could never happened to me ... really?"
- From 13th minute on she starts with practical suggestions.
- Názorně s nadhledem a sarkasmem o security.
- "To by se mi nikdy nestalo. To bych nikdy neudělal? "
- Hmm jo ale nejsme sami. Používáme cizí kód a možná*to* někdo udělal.
- GDPR - hoďme na to ručníkna budeme dělá že se to nikdy nestalo.
- Hmm a co to security experti co chodí v kravatě a c level managementu ukazují obrázek hackerů co mají kapucu a Anonymous masku na obličeji.
- Jasně a proces vše vyřeší. Hmm a taky koláčové diagramy to je terpve terno.
- A jasně že vývojáři milují kvanta formulářů.
- A od 13. minuty končí sarkasm a začínají dobré praktické rady.
- Na 38. Minutě je pár tipů a nástrojů
**** WIP Modern Java: Change is the Only Constant by Mark Reinhold 
:PROPERTIES:
:lg-yt-url: https://youtu.be/SyVLioZmbOM
:CUSTOM_ID: YT:SyVLioZmbOM
:END:
#+call: lg-get-props-entry()
- Mluví o novinkách v Java 9 10 a 11.
- Nic objeveného ale kdo ho ještě neviděl mluvit, no proč né.

**** TODO Paying Technical Debt at Scale - Migrations @Stripe 
:PROPERTIES:
:CUSTOM_ID: Paying-Technical-Debt-at-Scale-Migrations-Stripe
:END:
- Něco i migracích a splácení technického dluhu - poučné  ...
- Od 15:00 minuty. Every migration is a product
- https://youtu.be/OFjvJmS_uDo 
- YouTube | InfoQ
**** TODO Data Modeling, Normalization and Denormalization 
:PROPERTIES:
:CUSTOM_ID: Data-Modeling-Normalization-and-Denormalization
:END:
- Hezká a klasika.
- Od 18:00 popisuje normální formy.
- Ok trochou starý ale furt na tom něco je.
- https://youtu.be/059NNng5BUQ 
- http://www.postgresqltutorial.com/postgresql-identity-column/
- YouTube | FOSDEM
**** TODO CSAR: Prof. Elizabeth Stokoe  
:PROPERTIES:
:CUSTOM_ID: CSAR-Prof-Elizabeth-Stokoe
:END:
https://www.youtube.com/watch?v=-1TUF5N1b7E
**** TODO The Interactional 'Nudge' - Talking About Talk 
:PROPERTIES:
:CUSTOM_ID: THE_INTERACTIONAL_NUDGE_TALKING_ABOUT_TALK
:END:
https://www.youtube.com/watch?v=e-QbxjXDwXU
**** TODO Q&A - The Interactional Nudge - With Elizabeth Stokoe 
:PROPERTIES:
:CUSTOM_ID: Q-A-The-Interactional-Nudge-With-Elizabeth-Stokoe
:END:
https://www.youtube.com/watch?v=nrV0OWSJDHU



*** Vimeo [0/1]
:PROPERTIES:
:CUSTOM_ID: Vimeo-0-1
:END:
**** WIP Meeting resistance and moving forward — Linda Rising
:PROPERTIES:
:lg-subject: Watch Meeting resistance and moving forward — Linda Rising
:lg-authors: Linda%20Rising
:lg-vimeo-url:  https://vimeo.com/325143661
:CUSTOM_ID: vimeo:325143661
:END:
#+call: lg-get-props-entry()

:KEYWORDS:
Cognitive-bias
:END:

:REFERENCES:
- [[#Thinking, Fast and Slow][Daniel Kahneman: Thinking, Fast and Slow]]
- Dan Ariely: predictably irrational
:END:

:POINTS-TAKEN:
- how we have conversations with people we disagree
  - we show how much more we know
  - winning by killing the other people's does not work
  - thank you for showing me how stupid I am... Hardly helps
- we technical people believe that our smartness gives us an edge during discussion
  - our opponents are missing facts
  - we feel  we must supply them with missing data
  - we can't understand why they are still resistant
  - the problem must be them
- behavioral economics
  - we have to find a new way of
    - influencing
    - having discussion
    - rational arguments have its place but as a mean of influencing others is severely fault
  - read
    - thinking fast and slow
    - predictably irrational
      - easier to digest with nice experiments
  - we are not rational decision makers
  - preposition that people are rational is false
  - we are not convinced by
    - rational argument
    - facts
    - Data
      - scientific arguments
- biases (heuristics that our brains use to protect itself)
  - confirmation bias
    - early 60th
    - Peter wason's research
    - when people have formed hypothesis they focus on evidence supporting pre-existing view
      - I believe you are right
      - believe you are wrong
      - I won't listen to you, you want listen to me... Imagine having a gun.
      - we think that we see the world clearly
      - we think that out explanation is the correct one
      - who disagree with us is just wrong
- the backfire effect
  - Brendan Nyhon and Jason reifler
  - when you argue using facts
    - people reject/discount the information
    - cling even more to their original view
  - correcting people ,*increases* erroneous beliefs
- cognitive dissonance
  - Leon Festinger
  - J. Merrill Carlsmith
  - 1959
  - we are extremely uncomfortable holding contradictory believes
    - contardictory "evidence" causes severe  cognitive discomfort
- cynics Vs skeptics
  - skeptics
    - are useful
    - every group should have one
    - every meeting should have one
    - every team should have one
    - Edvard de Bono : six thinking hats - someone who wears the black hat
  - cynics
    - are negative for the sake of being negative not RTO be helpful
      - typically focused on low level interests, not the greater good

 :END:

** WIP Podcasts [0/1]                                              :CHAPTER:
:PROPERTIES:
:CUSTOM_ID: Podcasts-0-1
:END:
*** WIP SE-Radio [0/1]
:PROPERTIES:
:CUSTOM_ID: SE-Radio-0-1
:END:
**** WIP SE-Radio 238: Linda Rising on the Agile Brain
:PROPERTIES:
:CREATED:  [2018-08-05 Sun 10:18]
:lg-event-date: <2015-11-09 Mon>
:lg-consumed: <2018-08-04 Sat>
:lg-keywords: Soft%20Skills
:lg-source: SE-Radio
:lg-quality: worth returning to it
:lg-authors: Linda%20Rising
:lg-subject: SE-Radio 238: Linda Rising on the Agile Brain
:lg-se-radio-url:  https://www.se-radio.net/2015/09/se-radio-episode-238-linda-rising-on-the-agile-brain/
:CUSTOM_ID: se-radio:238
:END:
#+call: lg-get-props-entry()

 :MY-REMARKS:
- you should provide feedback based on a efford not on the result
:END:

:OFFICIAL-DESCRIPTION:
- SE-Radio Episode 238: Linda Rising on the Agile Brain
- 11.09.15 by se-radio team
- Web player: http://podplayer.net/#/?id=7160439
- Episode: http://feedproxy.google.com/~r/se-radio/~5/5G8ZZrFHC5I/SE-Radio-Episode-238-Linda-Rising-on-the-Agile-Brain.mp3

- Johannes Thönes talks to Linda Rising, author, speaker and independent consultant, about the Agile Brain.
- They start by talking about the fixed, talent-oriented mindset and then contrast with the lg-oriented mindset.
- After establishing the terms, Linda explains how we know which mindset we are in currently and how we can change it for us and others,
:END:
*** Full Stack Radio
:PROPERTIES:
:lg-rss: https://feeds.transistor.fm/full-stack-radio
:lg-url-1: http://fullstackradio.com
:CUSTOM_ID: Full-Stack-Radio
:END:
#+call: lg-get-props-entry()
- A podcast for developers interested in building great software products. Hosted by Adam Wathan.
**** 139: Alex DeBrie - DynamoDB for Relational Database Diehards
:PROPERTIES:
:CUSTOM_ID: full-stack-radio:139
:lg-full-stack-radio-url:  https://fullstackradio.com/139
:END:
#+call: lg-get-props-entry()

- Does DynamoDB only make sense for things like your cache, or is it a good choice for a primary data store?
- An overview of the terminology used in DynamoDB and how the terminology compares to a relational database
- How primary keys work in DynamoDB
- What data types are available in DynamoDB
- How DynamoDB is a schemaless database
- Why it's important to understand your access patterns in advance with DynamoDB, unlike in a relational database
- Understanding why and how you usually have multiple record types in a single DynamoDB table
- What "index overloading" is in DynamoDB
- Understanding partition keys and sort keys
- How to structure your data in DynamoDB to make it possible to query related data, and how those queries work
- How secondary indexes work, allowing you to access the same data in different ways
- How to accommodate access patterns you didn't know about before you designed your schema
- When to flatten relationships vs. nest them
- Should you use DynamoDB if you aren't "web-scale"?
- How local development works with DynamoDB

** TODO Udemy [0/4]
:PROPERTIES:
:CUSTOM_ID: Udemy-0-4
:END:
*** TODO Docker Mastery: The Complete Toolset From a Docker Captain
:PROPERTIES:
:CUSTOM_ID: Docker-Mastery-The-Complete-Toolset-From-a-Docker-Captain
:END:
- https://www.udemy.com/share/101WekBEEadVpUQXg=/
- Build, test, deploy containers with the best mega-course on Docker, Kubernetes, Compose, Swarm and Registry using DevOps
*** TODO Kubernetes Mastery: Hands-On Lessons From A Docker Captain
:PROPERTIES:
:CUSTOM_ID: Kubernetes-Mastery-Hands-On-Lessons-From-A-Docker-Captain
:END:
- https://www.udemy.com/share/102iLUBEEadVpUQXg=/
- Learn the latest Kubernetes features (1.16) and plugins while practicing DevOps workflows, from a container expert
*** TODO Docker Swarm Mastery: DevOps Style Cluster Orchestration
:PROPERTIES:
:CUSTOM_ID: Docker-Swarm-Mastery-DevOps-Style-Cluster-Orchestration
:END:
- https://www.udemy.com/share/101u3oBEEadVpUQXg=/
- Build, automate, and monitor a server cluster for containers using the latest open source on Linux and Windows
*** TODO Docker for Node.js Projects From a Docker Captain
:PROPERTIES:
:CUSTOM_ID: Docker-for-Node-js-Projects-From-a-Docker-Captain
:END:
- https://www.udemy.com/share/1022zOBEEadVpUQXg=/
- Build, test, deploy Node for Docker, Kubernetes, Swarm, and ARM with the latest DevOps practices from a container expert 
** TODO Blogs [/]
:PROPERTIES:
:CUSTOM_ID: Blogs
:END:

* WIP Index                                                         :CHAPTER:
:PROPERTIES:
:header-args+: :results value table raw replace
:header-args+: :exports results
:header-args+: :eval export
:CUSTOM_ID: INDEX
:END:
** Index of Learning Links
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LEARNING_1)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-Learning-Links
:END:
#+name: collector-learning
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "N/D"))
    (org-propview-collect cols "%S" '((and(boundp 'LEARNING_1)(not(boundp 'NO_INDEX)))) nil nil '(NO_INDEX) colnames ))
#+end_src
#+call:collector-learning()
** Index of YouTube Videos
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LG-YT-URL)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-YouTube-Videos
:END:
#+name: collector-yt
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "N/D"))
    (org-propview-collect cols "%S" '((and(boundp 'LG-YT-URL)(not(boundp 'NO_INDEX)))) nil nil '(NO_INDEX) colnames ))
#+end_src
#+call:collector-yt()

** Index of SE-Radio Podcast Episodes
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LG-SE-RADIO-URL)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-SE-Radio-Podcast-Episodes
:END:
#+name: collector-se-radio
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "N/D"))
    (org-propview-collect cols "%S" '((boundp 'LG-SE-RADIO-URL)) nil nil nil colnames ))
#+end_src
#+call:collector-se-radio()
** Index of Concepts
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LEARNING_1)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-Concepts
:END:
#+name: collector-concepts
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "Not Yet Defined"))
    (org-propview-collect cols "%S" '((string-match "CONCEPT" TAGS)) nil nil nil colnames ))
#+end_src
#+call:collector-concepts()
** Index of Books
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "BOOKS") ITEM) LG-BOOK-SUBJECT)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-Books
:END:
#+name: collector-books
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "Not Yet Defined"))
    (org-propview-collect cols "%S" '((and(s-contains? "BOOK" TAGS)(not(s-contains? "NO_EXPORT" TAGS)))) nil nil nil colnames ))
#+end_src
#+call:collector-books()

** Index of Patterns
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "GOF_PATTERNS") ITEM) LEARNING_1)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-Patterns
:END:
#+name: collector-patterns
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "Not Yet Defined"))
    (org-propview-collect cols "%S" '((string-match "PATTERN" TAGS)) nil nil nil colnames ))
#+end_src
#+call:collector-patterns()

** Index of AWS Related Topics 
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LEARNING_1)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-AWS-Related-Topics
:END:
#+name: collector-aws
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "Not Yet Defined"))
    (org-propview-collect cols "%S" '((string-match "AWS" TAGS)) nil nil nil colnames ))
#+end_src
#+call:collector-aws()

** Index of GCP Related Topics
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LEARNING_1)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-GCP-Related-Topics
:END:
#+name: collector-gcp
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "Not Yet Defined"))
    (org-propview-collect cols "%S" '((string-match "GCP" TAGS)) nil nil nil colnames ))
#+end_src
#+call:collector-gcp()

** Index of AWS Services
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LEARNING_1)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: Index-of-AWS-Related-Topics
:END:
#+name: collector-aws
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "Not Yet Defined"))
    (org-propview-collect cols "%S" '((and(string-match "AWS" TAGS) (string-match "SERVICE" TAGS))) nil nil nil colnames ))
#+end_src
#+call:collector-aws()
** Index of TOOLS
:PROPERTIES:
:header-args+: :var cols='((format "[[#%s][%s]]" (if (boundp 'CUSTOM_ID) CUSTOM_ID "INDEX") ITEM) LEARNING_1)
:header-args+: :var colnames='(Item ref)
:CUSTOM_ID: INDEX_OF_TOOLS
:END:
#+name: collector-tools
#+begin_src elisp  :eval no
  (let ((org-propview-default-value "Not Yet Defined"))
    (org-propview-collect cols "%S" '((string-match "TOOL" TAGS)) nil nil nil colnames ))
#+end_src
#+call:collector-tools()



* WIP To integrate                                                :NO_EXPORT:
:PROPERTIES:
:CUSTOM_ID: To-integrate
:NO_INDEX: t
:END:
** TODO dog - used technologies
:PROPERTIES:
:CUSTOM_ID: dog-used-technologies
:END:
- AWS
  - API Gateway
  - Lambda
  - DynamoDB
  - Elasticsearch
  - Kinesis
  - SNS
  - S3
  - CloudWatch
  - CloudFormation
  - SAM
  - CloudFront
  - Secrets Manager
  - Route 53
  - VPC
  - Kibana
- Other
  - IDEA
  - JavaScript ES6
  - React 16
  - React styled-components (instead of CSS file)
  - Webpack 4
  - Bootstrap 4
  - Jest
  - NodeJS
  - git

** TODO devops
:PROPERTIES:
:CUSTOM_ID: devops
:END:

*** cncf
:PROPERTIES:
:CUSTOM_ID: cncf
:END:
** bookmarks Postgresql
:PROPERTIES:
:CUSTOM_ID: bookmarks-Postgresql
:END:
- https://iqsanswers.com/postgresql-interview-questions-answers/

** bookmarks/other
:PROPERTIES:
:CUSTOM_ID: bookmarks-other
:END:
- https://haydenjames.io/linux-commands-frequently-used-by-linux-sysadmins-part-1
- https://jeremiahflaga.github.io/2017/06/03/most-important-design-guideline-of-scott-myers/
- http://site.icu-project.org/
- https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/
- https://www.illumio.com/

** bookamrks/git
:PROPERTIES:
:CUSTOM_ID: bookamrks-git
:END:
- https://learngitbranching.js.org/
- https://www.softwaretestinghelp.com/git-interview-questions/
** bookmarks/kubernetes
:PROPERTIES:
:CUSTOM_ID: bookmarks-kubernetes
:END:
- tiller
- https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/
- https://ahmet.im/blog/knative-better-kubernetes-networking/
- https://github.com/ahmetb/kubernetes-network-policy-recipes
- https://ahmet.im/blog/kubecon-2017/
- https://kubernetes.io/docs/tutorials/#services
- https://kubernetes.io/docs/concepts/services-networking/service/
** bookmarks/Java
:PROPERTIES:
:CUSTOM_ID: bookmarks-Java
:END:
- https://micronaut.io/
- https://github.com/mjoellnier/micronaut-vs-quarkus
- https://github.com/quarkusio/quarkus
- https://docs.solace.com/SDKPerf/SDKPerf.htm
- https://architectelevator.com/book/
- https://www.enterpriseintegrationpatterns.com/ramblings.html
- https://adoptopenjdk.net/
- https://quarkus.io/
- https://www.udemy.com/course/spring-interview-questions-and-answers/
- https://www.edureka.co/blog/interview-questions/spring-boot-interview-questions/
- https://en.wikipedia.org/wiki/Comparison_of_Java_virtual_machines
- https://en.wikipedia.org/wiki/OpenJ9#Garbage_Collector
- https://en.wikipedia.org/wiki/Azul_Systems
- https://en.wikipedia.org/wiki/GraalVM
- https://en.wikipedia.org/wiki/List_of_Java_virtual_machines
- https://dzone.com/articles/choosing-the-right-gc
- https://docs.oracle.com/javaee/6/tutorial/doc/giwhl.html
- https://weld.cdi-spec.org/
- https://www.journaldev.com/2763/java-8-functional-interfaces
- https://www.journaldev.com/592/java-try-with-resources
- https://www.journaldev.com/2167/java-exception-interview-questions-and-answers
- https://www.baeldung.com/java-equals-hashcode-contracts
- https://www.javatpoint.com/html-interview-questions
** bookmarks/js [0/1]
:PROPERTIES:
:CUSTOM_ID: bookmarks-js-0-1
:END:
*** TODO https://www.freecodecamp.org/news/here-is-the-most-popular-ways-to-make-an-http-request-in-javascript-954ce8c95aaa/
:PROPERTIES:
:CUSTOM_ID: https-www-freecodecamp-org-news-here-is-the-most-popular-ways-to-make-an-http-request-in-javascript-954ce8c95aaa
:END:
** bookmarks/i18n
:PROPERTIES:
:CUSTOM_ID: bookmarks-i18n
:END:
- https://www.simultrans.com/blog/what-are-.po-files
- https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html
- https://docs.weblate.org/en/latest/admin/addons.html
- https://en.wikipedia.org/wiki/IETF_language_tag#cite_note-8
** bookmarks/ldap
:PROPERTIES:
:CUSTOM_ID: bookmarks-ldap
:END:
- http://www.chschneider.org/linux/server/openldap.shtml
- https://medium.com/@raghu.icecraft/simple-working-with-ldapsearch-cf6a5986977
- https://linoxide.com/mail/ldapsearch-command-test-ldap-connection/
** bookmarks/oidc [0/2]
:PROPERTIES:
:CUSTOM_ID: bookmarks-oidc
:END:
*** TODO OpenID Connect Core 1.0 incorporating errata set 1
:PROPERTIES:
:learning_1: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
:CUSTOM_ID: OpenID-Connect-Core-1-0-incorporating-errata-set-1
:END:
- OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It enables Clients to verify the identity of the End-User based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the End-User in an interoperable and REST-like manner.
- This specification defines the core OpenID Connect functionality: authentication built on top of OAuth 2.0 and the use of Claims to communicate information about the End-User. It also describes the security and privacy considerations for using OpenID Connect.

*** TODO others
:PROPERTIES:
:CUSTOM_ID: others
:END:
- https://openid.net/specs/openid-connect-core-1_0.html
- https://hub.docker.com/r/jboss/keycloak/
- https://openid.net/2015/05/26/enhancing-oauth-security-for-mobile-applications-with-pkse/
- https://github.com/vaquarkhan/vaquarkhan
- https://docs.apigee.com/api-platform/security/oauth/working-scopes
- https://developer.okta.com/blog/2017/07/25/oidc-primer-part-1
- https://brandur.org/oauth-scope
- https://oauth.net/2/scope/
- https://auth0.com/docs/authorization/which-oauth-2-0-flow-should-i-use
- https://github.com/IdentityModel/oidc-client-js
** bookmarks/security [0/2]
:PROPERTIES:
:CUSTOM_ID: bookmarks-security
:END:
*** TODO zap
:PROPERTIES:
:CUSTOM_ID: zap
:END:
*** TODO https://kalilinuxtutorials.com/scout-suite-multi-cloud-security-auditing-tool/
** bookmarks/unsorted [0/58]
:PROPERTIES:
:CUSTOM_ID: bookmarks-unsorted-0-59
:END:
*** TODO Circle CI maturity model
- https://docs.google.com/spreadsheets/d/131XZCEb8LoXqy79WWrhCX4sBnGhCM1nAIz4feFZJsEo/edit#gid=0
*** TODO https://cloud.google.com/blog/products/data-analytics/presto-optional-component-now-available-on-dataproc
:PROPERTIES:
:CUSTOM_ID: https-cloud-google-com-blog-products-data-analytics-presto-optional-component-now-available-on-dataproc
:END:
*** TODO https://cloud.google.com/compute/docs/machine-types
:PROPERTIES:
:CUSTOM_ID: https-cloud-google-com-compute-docs-machine-types
:END:
*** TODO https://docs.nats.io/
:PROPERTIES:
:CUSTOM_ID: https-docs-nats-io
:END:
*** TODO https://github.com/nkatre/Free-DevOps-Books-1
:PROPERTIES:
:CUSTOM_ID: https-github-com-nkatre-Free-DevOps-Books-1
:END:
*** TODO https://en.wikipedia.org/wiki/Apache_Drill
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-Apache-Drill
:END:
*** TODO https://cilium.io/
:PROPERTIES:
:CUSTOM_ID: https-cilium-io
:END:
*** TODO https://medium.com/@ruxijitianu/database-version-control-liquibase-versus-flyway-9872d43ee5a4
:PROPERTIES:
:CUSTOM_ID: https-medium-com-ruxijitianu-database-version-control-liquibase-versus-flyway-9872d43ee5a4
:END:
*** TODO https://insights.stackoverflow.com/survey/2020#developer-profile
:PROPERTIES:
:CUSTOM_ID: https-insights-stackoverflow-com-survey-2020-developer-profile
:END:
*** TODO https://ldapwiki.com/wiki/Acr_values
:PROPERTIES:
:CUSTOM_ID: https-ldapwiki-com-wiki-Acr-values
:END:
*** TODO https://medium.com/@gacheruevans0/2-tier-vs-3-tier-architecture-26db56fe7e9c
:PROPERTIES:
:CUSTOM_ID: https-medium-com-gacheruevans0-2-tier-vs-3-tier-architecture-26db56fe7e9c
:END:
*** TODO https://stackoverflow.com/questions/43535693/private-ios-app
:PROPERTIES:
:CUSTOM_ID: https-stackoverflow-com-questions-43535693-private-ios-app
:END:
*** TODO https://emacs.christianbaeuerlein.com/my-org-config.html
:PROPERTIES:
:CUSTOM_ID: https-emacs-christianbaeuerlein-com-my-org-config-html
:END:
*** TODO https://www.typescriptlang.org/docs/handbook/advanced-types.html
:PROPERTIES:
:CUSTOM_ID: https-www-typescriptlang-org-docs-handbook-advanced-types-html
:END:
*** TODO https://cloud.google.com/logging
:PROPERTIES:
:CUSTOM_ID: https-cloud-google-com-logging
:END:
*** TODO https://examples.yourdictionary.com/examples-of-hindsight-bias.html
:PROPERTIES:
:CUSTOM_ID: https-examples-yourdictionary-com-examples-of-hindsight-bias-html
:END:
*** TODO https://guides.sonatype.com/foundations/devops/principle-based-devops-frameworks/
:PROPERTIES:
:CUSTOM_ID: https-guides-sonatype-com-foundations-devops-principle-based-devops-frameworks
:END:
*** TODO https://aws.amazon.com/getting-started/learning-path-hobbyist-developer/
:PROPERTIES:
:CUSTOM_ID: https-aws-amazon-com-getting-started-learning-path-hobbyist-developer
:END:
*** TODO https://blog.sonatype.com/2010/04/why-nexus-for-the-non-programmer/
:PROPERTIES:
:CUSTOM_ID: https-blog-sonatype-com-2010-04-why-nexus-for-the-non-programmer
:END:
*** TODO https://en.wikipedia.org/wiki/Pomodoro_Technique
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-Pomodoro-Technique
:END:
*** TODO https://en.wikipedia.org/wiki/X.509
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-X-509
:END:
*** TODO https://www.dmarcanalyzer.com/dkim/
:PROPERTIES:
:CUSTOM_ID: https-www-dmarcanalyzer-com-dkim
:END:
*** TODO https://www.dmarcanalyzer.com/dmarc/
:PROPERTIES:
:CUSTOM_ID: https-www-dmarcanalyzer-com-dmarc
:END:
*** TODO https://www.dmarcanalyzer.com/spf/
:PROPERTIES:
:CUSTOM_ID: https-www-dmarcanalyzer-com-spf
:END:
*** TODO https://www.npmjs.com/package/@dynatrace/react-native-plugin
:PROPERTIES:
:CUSTOM_ID: https-www-npmjs-com-package-dynatrace-react-native-plugin
:END:
*** TODO https://astrobiomike.github.io/unix/six-glorious-commands
:PROPERTIES:
:CUSTOM_ID: https-astrobiomike-github-io-unix-six-glorious-commands
:END:
*** TODO https://docs.ksqldb.io/en/latest/developer-guide/syntax-reference/
:PROPERTIES:
:CUSTOM_ID: https-docs-ksqldb-io-en-latest-developer-guide-syntax-reference
:END:
*** TODO https://tapoueh.org/blog/2018/07/postgresql-listen-notify/
:PROPERTIES:
:CUSTOM_ID: https-tapoueh-org-blog-2018-07-postgresql-listen-notify
:END:
*** TODO http://shiroyasha.io/transaction-isolation-levels-in-postgresql.html
:PROPERTIES:
:CUSTOM_ID: http-shiroyasha-io-transaction-isolation-levels-in-postgresql-html
:END:
*** TODO https://www.nbs-system.com/
:PROPERTIES:
:CUSTOM_ID: https-www-nbs-system-com
:END:
*** TODO https://crowdsec.net/
:PROPERTIES:
:CUSTOM_ID: https-crowdsec-net
:END:
*** TODO https://www.datawarehouse4u.info/SCD-Slowly-Changing-Dimensions.html
:PROPERTIES:
:CUSTOM_ID: https-www-datawarehouse4u-info-SCD-Slowly-Changing-Dimensions-html
:END:
*** TODO https://www.baeldung.com/spring-mvc-interview-questions
:PROPERTIES:
:CUSTOM_ID: https-www-baeldung-com-spring-mvc-interview-questions
:END:
*** TODO https://archive.fosdem.org/2018/schedule/event/closing_keynote/attachments/slides/2597/export/events/attachments/closing_keynote/slides/2597/FOSDEM_2018_Closing_Keynote.pdf
:PROPERTIES:
:CUSTOM_ID: https-archive-fosdem-org-2018-schedule-event-closing-keynote-attachments-slides-2597-export-events-attachments-closing-keynote-slides-2597-FOSDEM-2018-Closing-Keynote-pdf
:END:
*** TODO https://en.wikipedia.org/wiki/Cache_placement_policies
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-Cache-placement-policies
:END:
*** TODO https://en.wikipedia.org/wiki/Cache_replacement_policies
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-Cache-replacement-policies
:END:
*** TODO https://tools.ietf.org/html/rfc6749#section-3.3
:PROPERTIES:
:CUSTOM_ID: https-tools-ietf-org-html-rfc6749-section-3-3
:END:
*** TODO https://www.oauth.com/oauth2-servers/scope/defining-scopes/
:PROPERTIES:
:CUSTOM_ID: https-www-oauth-com-oauth2-servers-scope-defining-scopes
:END:
*** TODO https://cloudinit.readthedocs.io/en/latest/topics/availability.html
:PROPERTIES:
:CUSTOM_ID: https-cloudinit-readthedocs-io-en-latest-topics-availability-html
:END:
*** TODO https://stackoverflow.com/questions/13647604/isolation-levels-in-oracle
:PROPERTIES:
:CUSTOM_ID: https-stackoverflow-com-questions-13647604-isolation-levels-in-oracle
:END:
*** TODO https://docs.oracle.com/cd/E19830-01/819-4721/beamv/index.html
:PROPERTIES:
:CUSTOM_ID: https-docs-oracle-com-cd-E19830-01-819-4721-beamv-index-html
:END:
*** TODO https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-Classless-Inter-Domain-Routing-CIDR-notation
:END:
*** TODO https://www.codecademy.com/articles/what-is-cors
:PROPERTIES:
:CUSTOM_ID: https-www-codecademy-com-articles-what-is-cors
:END:
*** TODO https://github.com/IdentityModel/oidc-client-js/blob/dev/jsrsasign/dist/jsrsasign.js
:PROPERTIES:
:CUSTOM_ID: https-github-com-IdentityModel-oidc-client-js-blob-dev-jsrsasign-dist-jsrsasign-js
:END:
*** TODO https://snyk.io/vuln/npm:jsrsasign@8.0.12
:PROPERTIES:
:CUSTOM_ID: https-snyk-io-vuln-npm-jsrsasign-8-0-12
:END:
*** TODO https://tools.ietf.org/id/draft-ietf-httpbis-rfc6265bis-03.html
:PROPERTIES:
:CUSTOM_ID: https-tools-ietf-org-id-draft-ietf-httpbis-rfc6265bis-03-html
:END:
*** TODO https://web.dev/samesite-cookies-explained/
:PROPERTIES:
:CUSTOM_ID: https-web-dev-samesite-cookies-explained
:END:
*** TODO https://cloud.google.com/stackdriver/pricing#pricing_examples_2
:PROPERTIES:
:CUSTOM_ID: https-cloud-google-com-stackdriver-pricing-pricing-examples-2
:END:
*** TODO https://nativecloud.dev/cnn-2020-21/
:PROPERTIES:
:CUSTOM_ID: https-nativecloud-dev-cnn-2020-21
:END:
*** TODO https://k3d.io/
:PROPERTIES:
:CUSTOM_ID: https-k3d-io
:END:
*** TODO https://www.reddit.com/r/kubernetes/comments/be0415/k3s_minikube_or_microk8s/
:PROPERTIES:
:CUSTOM_ID: https-www-reddit-com-r-kubernetes-comments-be0415-k3s-minikube-or-microk8s
:END:
*** TODO https://helm.sh/docs/topics/charts/#helm
:PROPERTIES:
:CUSTOM_ID: https-helm-sh-docs-topics-charts-helm
:END:
*** TODO https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes
:PROPERTIES:
:CUSTOM_ID: https-cloud-google-com-kubernetes-engine-docs-concepts-persistent-volumes
:END:
*** TODO https://aws.amazon.com/ec2/instance-types/
:PROPERTIES:
:CUSTOM_ID: https-aws-amazon-com-ec2-instance-types
:END:
*** TODO https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html
:PROPERTIES:
:CUSTOM_ID: https-docs-aws-amazon-com-AWSEC2-latest-UserGuide-instance-types-html
:END:
*** TODO https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
:PROPERTIES:
:CUSTOM_ID: https-docs-aws-amazon-com-AWSEC2-latest-UserGuide-using-regions-availability-zones-html
:END:
*** TODO https://aws.amazon.com/cli/
:PROPERTIES:
:CUSTOM_ID: https-aws-amazon-com-cli
:END:
*** TODO https://martinfowler.com/articles/evodb.html
:PROPERTIES:
:CUSTOM_ID: https-martinfowler-com-articles-evodb-html
:END:

** bookmarks/Statistics [0/4]
:PROPERTIES:
:CUSTOM_ID: bookmarks-Statistics-0-4
:END:
*** TODO https://en.wikipedia.org/wiki/German_tank_problem
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-German-tank-problem
:END:
*** TODO https://en.wikipedia.org/wiki/Power_law
:PROPERTIES:
:CUSTOM_ID: https-en-wikipedia-org-wiki-Power-law
:END:
*** TODO https://www.ncnr.nist.gov/resources/sansmodels/PowerLaw.html
:PROPERTIES:
:CUSTOM_ID: https-www-ncnr-nist-gov-resources-sansmodels-PowerLaw-html
:END:
*** TODO https://www.forbes.com/sites/joshbersin/2014/02/19/the-myth-of-the-bell-curve-look-for-the-hyper-performers/#5d7a3e226bca
:PROPERTIES:
:CUSTOM_ID: https-www-forbes-com-sites-joshbersin-2014-02-19-the-myth-of-the-bell-curve-look-for-the-hyper-performers-5d7a3e226bca
:END:
** From Orgzly
:PROPERTIES:
:CUSTOM_ID: From-Orgzly
:END:
*** Show HN: Poica – Algebraic data types and type introspection for pure C
:PROPERTIES:
:CREATED:  [2020-06-19 Fri 12:48]
:CUSTOM_ID: Show-HN-Poica-Algebraic-data-types-and-type-introspection-for-pure-C
:END:
#+call: lg-get-props-entry()

Show HN: Poica – Algebraic data types and type introspection for pure C - https://github.com/Hirrolot/poica
*** Maersk, Me and NotPetya
:PROPERTIES:
:CREATED:  [2020-06-22 Mon 06:45]
:CUSTOM_ID: Maersk-Me-and-NotPetya
:END:
#+call: lg-get-props-entry()

Maersk, Me and NotPetya - https://gvnshtn.com/maersk-me-notpetya/
*** MIT 6.001 Structure and Interpretation (1986) [video]
:PROPERTIES:
:CREATED:  [2020-06-22 Mon 16:46]
:CUSTOM_ID: MIT-6-001-Structure-and-Interpretation-1986-video
:END:
#+call: lg-get-props-entry()

MIT 6.001 Structure and Interpretation (1986) [video] - https://www.youtube.com/playlist?list=PLE18841CABEA24090
*** Teach Yourself Computer Science
:PROPERTIES:
:CREATED:  [2020-06-22 Mon 16:53]
:CUSTOM_ID: Teach-Yourself-Computer-Science
:END:
#+call: lg-get-props-entry()

Teach Yourself Computer Science - https://teachyourselfcs.com
** From Orgzly2 [0/61]
:PROPERTIES:
:CUSTOM_ID: From-Orgzly2-0-61
:END:
*** TODO Cracking the Lens: Targeting HTTP's Hidden Attack-Surface
:PROPERTIES:
:CREATED:  [2018-08-09 Thu 07:18]
:lg-yt-url: https://youtu.be/zP4b3pw94s0
:lg-subject: Cracking the Lens: Targeting HTTP's Hidden Attack-Surface
:CUSTOM_ID: Cracking-the-Lens-Targeting-HTTP's-Hidden-Attack-Surface
:END:
#+call: lg-get-props-entry()

:MY-REMARKS:
- investigates the reverse proxies
:END:

:OFFICIAL-description:
- Modern websites are browsed through a lens of transparent systems built to enhance performance, extract analytics and supply numerous additional services. This almost invisible attack surface has been largely overlooked for years.
- In this presentation, I'll show how to use malformed requests and esoteric headers to coax these systems into revealing themselves and opening gateways into our victim's networks. I'll share how by combining these techniques with a little Bash I was able to thoroughly perforate DoD networks, trivially earn over $30k in vulnerability bounties, and accidentally exploit my own ISP.
- While deconstructing the damage, I'll also showcase several hidden systems it unveiled, including not only covert request interception by the UK's largest ISP, but a substantially more suspicious Columbian ISP, a confused Tor backend, and a system that enabled reflected XSS to be escalated into SSRF. You'll also learn strategies to unblinker blind SSRF using exploit chains and caching mechanisms.
- Finally, to further drag these systems out into the light, I'll release Collaborator Everywhere - an open source Burp Suite extension which augments your web traffic with a selection of the best techniques to harvest leads from cooperative websites.
:END:

*** TODO Adventures with the purely functional OS NixOS
:PROPERTIES:
:lg-source: YouTube
:lg-categoty: NixOS
:lg-topic: NixOS
:lg-subject: Adventures with the purely functional OS NixOS
:CUSTOM_ID: Adventures-with-the-purely-functional-OS-NixOS
:END:
#+call: lg-get-props-entry()
https://youtu.be/4tuqI8V_cZw

*** TODO Refactoring Restify OAuth2
:PROPERTIES:
:lg-source: YouTube
:lg-categoty: OAuth2
:lg-subject: Refactoring Restify OAuth2
:lg-yt-url: https://youtu.be/aHrwUnsPom0
:CUSTOM_ID: Refactoring-Restify-OAuth2
:END:
#+call: lg-get-props-entry()

*** TODO The three paths of Scaling with Akka - Fran Perez
:PROPERTIES:
:lg-source: YouTube
:lg-authors: Fran%20PEREZ
:lg-categoty: Akka
:lg-subject: The three paths of Scaling with Akka - Fran Perez
:CUSTOM_ID: The-three-paths-of-Scaling-with-Akka-Fran-Perez
:END:
#+call: lg-get-props-entry()


https://youtu.be/iAYou32RrYs

*** TODO LambdaCon 2015
:PROPERTIES:
:lg-source: YouTube
:CUSTOM_ID: LambdaCon-2015
:END:
#+call: lg-get-props-entry()

LambdaCon 2015: https://www.youtube.com/playlist?list=PLYQ3kvhWU-EC7UbWtzabORMAEIVsSA827

*** TODO Efficient Microservices w/ Binary Protocol - gRPC 101
:PROPERTIES:
:lg-source: YouTube
:lg-keywords: Microservices
:lg-categoty: gRPC
:lg-subject: Efficient Microservices w/ Binary Protocol - gRPC 101
:CUSTOM_ID: Efficient-Microservices-w-Binary-Protocol-gRPC-101
:END:
#+call: lg-get-props-entry()

https://youtu.be/RqK-mwh3-aY

*** TODO BOB 2017 - Martin Kühl: The hidden nature of data
:PROPERTIES:
:lg-authors: Martin%20KÜHL
:lg-group: BOB 2017
:lg-source: YouTube
:lg-subject: BOB 2017 - Martin Kühl: The hidden nature of data
:CUSTOM_ID: BOB-2017-Martin-Kühl-The-hidden-nature-of-data
:END:
#+call: lg-get-props-entry()

https://youtu.be/f7ODZVmXj-4
*** TODO Scala Tutorial 18q - Arrays
:PROPERTIES:
:lg-source: YouTube
:lg-categoty: Scala
:lg-subject: Scala Tutorial 18q - Arrays
:CUSTOM_ID: Scala-Tutorial-18q-Arrays
:END:
#+call: lg-get-props-entry()
https://youtu.be/Br7-ry5swIg
*** TODO Avoiding Microservice Megadisasters - Jimmy Bogard
:PROPERTIES:
:lg-source: YouTube
:lg-authors: Jimmy%20BOGARD
:lg-categoty: Microservices
:lg-topic: Disaster
:lg-keywords: Conways%20Law Deadlock Disaster Single%20Source%20Of%20Truth DDD Bounded%20Context API%20Hell Eric%20Evans CAP Microservices
:lg-group: NDC London 2017
:lg-consumed: <2018-08-03 Fri>
:lg-event-date: <2017-01-16 Mon>
:lg-yt-url: https://youtu.be/gfh-VCTwMw8
:lg-duration: 45:26
:lg-subject: Avoiding Microservice Megadisasters - Jimmy Bogard
:CUSTOM_ID: Avoiding-Microservice-Megadisasters-Jimmy-Bogard
:END:
#+call: lg-get-props-entry()

- https://youtu.be/gfh-VCTwMw8
- Jak nxedělat microservices, založeno na mylných představách
  - network is reliable
  - latency is zero
  - bandwidth is infinite
  - network is secure
  - topology does not change
  - there is one administrator
  - transport cost is zero
  - network is homogeneous
- CAP theorem
- Single Source of Truth
  - does not mean strictly data on one location in one database
  - Eventuall consistency is the way to go

*** TODO NYLUG Presents: Charles Strahan -on- Introduction to NixOS
:PROPERTIES:
:lg-source: YouTube
:lg-authors: Charles%20STRAHAN
:lg-categoty: NixOS
:lg-topic: NixOS
:lg-subject: NYLUG Presents: Charles Strahan -on- Introduction to NixOS
:CUSTOM_ID: NYLUG-Presents-Charles-Strahan-on-Introduction-to-NixOS
:END:
#+call: lg-get-props-entry()

https://youtu.be/VivXSoovUFI

*** TODO An opinionated guide to Haskell
:PROPERTIES:
:lg-categoty: Haskell
:lg-source: Blog
:lg-url-1: https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/
:lg-subject: An opinionated guide to Haskell
:CUSTOM_ID: An-opinionated-guide-to-Haskell
:END:
#+call: lg-get-props-entry()

An opinionated guide to Haskell - https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/

*** TODO bench: Command-line benchmark tool
:PROPERTIES:
:lg-categoty: Linux
:lg-keywords: Linux
:lg-subject: bench: Command-line benchmark tool
:CUSTOM_ID: bench-Command-line-benchmark-tool
:END:
#+call: lg-get-props-entry()

https://hackage.haskell.org/package/bench

*** TODO Literate DevOps
:PROPERTIES:
:CREATED:  [2018-03-10 Sat 22:12]
:lg-categoty: Emacs
:lg-keywords: org-mode
:lg-subject: Literate DevOps
:CUSTOM_ID: Literate-DevOps
:END:
#+call: lg-get-props-entry()

http://howardism.org/Technical/Emacs/literate-devops.html

*** TODO 10 Tips for failing badly at Microservices by David Schmitz
:PROPERTIES:
:CREATED:  [2018-03-11 Sun 16:16]
:lg-consumed: <2108-03-11 Sun>
:lg-keywords: Microservices
:lg-source: YouTube
:lg-authors: David%20SCHMITZ
:lg-subject: 10 Tips for failing badly at Microservices by David Schmitz
:CUSTOM_ID: 10-Tips-for-failing-badly-at-Microservices-by-David-Schmitz
:END:
#+call: lg-get-props-entry()

https://youtu.be/X0tjziAQfNQ

*** TODO Emacs Tutorial 18 - Mark multiple and a few other things!
:PROPERTIES:
:CREATED:  [2018-03-11 Sun 09:34]
:lg-categoty: Emacs
:lg-source: YouTube
:lg-subject: Emacs Tutorial 18 - Mark multiple and a few other things!
:CUSTOM_ID: Emacs-Tutorial-18-Mark-multiple-and-a-few-other-things
:END:
#+call: lg-get-props-entry()

https://youtu.be/oSzxZWB9Qkg

*** TODO Walkthrough for Systemd Portable Services
:PROPERTIES:
:CREATED:  [2018-07-06 Fri 06:33]
:lg-categoty: Systemd
:lg-source: Blog
:lg-subject: Walkthrough for Systemd Portable Services
:CUSTOM_ID: Walkthrough-for-Systemd-Portable-Services
:END:
#+call: lg-get-props-entry()

- Walkthrough for Systemd Portable Services - http://0pointer.net/blog/walkthrough-for-portable-services.html

*** TODO SE-Radio 241: Kyle Kingsbury on Consensus in Distributed Systems
:PROPERTIES:
:lg-authors: Kyle%20Kingsbury
:lg-keywords: CAP CRDT Redis PostgreSQL RabbitMQ
:lg-consumed: <2018-08-04 Sat>
:lg-source: SE-Radio
:lg-quality: worth returning to it
:lg-url-1: http://www.se-radio.net/2015/11/se-radio-episode-241-kyle-kingsbury-on-consensus-in-distributed-systems/
:lg-subject: SE-Radio 241: Kyle Kingsbury on Consensus in Distributed Systems
:CUSTOM_ID: SE-Radio-241-Kyle-Kingsbury-on-Consensus-in-Distributed-Systems
:END:
#+call: lg-get-props-entry()

:OFFICIAL-DESCRIPTION:
- Kyle Kingsbury, known as Aphyr on Twitter and for his blog by the same name, talks to Stefan Tilkov about consensus in distributed systems and about his experience in testing systems to see how they behave in case of failures.
- In addition to discussing some of the theoretical foundations, such as the CAP theorem, isolation levels, and consensus protocols,
- Kyle talks about some specific databases, including MongoDB, Riak, and Redis, and discusses how they maintain and achieve  or fail to achieve  a consistent state.
- Finally, there’s some advice for practitioners on how to pick a solution and understand its properties.
  :END:

*** TODO SE-Radio Episode 330: Natalie Silvanovich on Attack Surface Reduction
:PROPERTIES:
:CREATED:  [2018-08-08 Wed 22:54]
:lg-subject: SE-Radio Episode 330: Natalie Silvanovich on Attack Surface Reduction
:CUSTOM_ID: SE-Radio-Episode-330-Natalie-Silvanovich-on-Attack-Surface-Reduction
:END:
#+call: lg-get-props-entry()


- SE-Radio Episode 330: Natalie Silvanovich on Attack Surface Reduction

- 17.07.18 by se-radio team

- Web player: http://podplayer.net/?id=52997029
- Episode: http://feedproxy.google.com/~r/se-radio/~5/ank_v4SW3xw/SE-Radio-Episode-330-Natalie-Silvanovich-on-Attack-Surface-Reduction.mp3

- Natalie Silvanovich from Google Project Zero talks with Kim Carter about what attack surface is in regards to software, how to identify risks and reduce the attack surface of the software you as a Software Engineer are creating. Natalie found over 100 0 day security defects in flash in her first year at Google, and […]

*** TODO Worst Computer Bugs in History: Therac-25 (2017)
:PROPERTIES:
:CREATED:  [2018-08-12 Sun 08:43]
:lg-subject: Worst Computer Bugs in History: Therac-25 (2017)
:CUSTOM_ID: Worst-Computer-Bugs-in-History-Therac-25-2017
:END:
#+call: lg-get-props-entry()

- Worst Computer Bugs in History: Therac-25 (2017) - https://blog.bugsnag.com/bug-day-race-condition-therac-25/

*** TODO 48 Dirty Little Secrets Cryptographers Don’t Want You To Know
:PROPERTIES:
:CREATED:  [2018-08-12 Sun 09:41]
:lg-subject: 48 Dirty Little Secrets Cryptographers Don’t Want You To Know
:CUSTOM_ID: 48-Dirty-Little-Secrets-Cryptographers-Don-t-Want-You-To-Know
:END:
#+call: lg-get-props-entry()

https://youtu.be/iZa_XKpj9X4

- Eliptické křivky
- Chinese general algorithm

*** TODO Kevin Johnson & Jason Gillam - Next Gen Web Pen Testing - AppSecUSA 2016
:PROPERTIES:
:CREATED:  [2018-08-12 Sun 09:42]
:lg-yt-url: https://youtu.be/rVnXzW31pWQ
:lg-subject: Kevin Johnson & Jason Gillam - Next Gen Web Pen Testing - AppSecUSA 2016
:CUSTOM_ID: Kevin-Johnson-Jason-Gillam-Next-Gen-Web-Pen-Testing-AppSecUSA-2016
:END:
#+call: lg-get-props-entry()

https://youtu.be/rVnXzW31pWQ

*** TODO APPSEC Cali 2018 - What's New in TLS 1.3
:PROPERTIES:
:CREATED:  [2018-08-12 Sun 09:43]
:lg-subject: APPSEC Cali 2018 - What's New in TLS 1.3
:CUSTOM_ID: APPSEC-Cali-2018-What's-New-in-TLS-1-3
:END:
#+call: lg-get-props-entry()

https://youtu.be/eTJjMGClri4

*** TODO APPSEC Cali 2018 - OWASP Top 10
:PROPERTIES:
:CREATED:  [2018-08-15 Wed 07:54]
:lg-subject: APPSEC Cali 2018 - OWASP Top 10
:CUSTOM_ID: APPSEC-Cali-2018-OWASP-Top-10
:END:
#+call: lg-get-props-entry()

https://youtu.be/TXAztSpYpvE

- Owasp top 10 good insight. Speaks about controversy at the beginning but after it is nice

*** TODO AppSec Cali 2019 - Slack App Security: Securing your Workspaces from a Bot Uprising
:PROPERTIES:
:CREATED:  [2019-03-22 Fri 21:50]
:lg-subject: AppSecCali 2019 - Slack App Security: Securing your Workspaces from a Bot Uprising
:CUSTOM_ID: AppSec-Cali-2019-Slack-App-Security-Securing-your-Workspaces-from-a-Bot-Uprising
:END:
#+call: lg-get-props-entry()

https://youtu.be/ED-RVhk8wg8

Security

Slack app security.

*** TODO What Doctors Can Teach Us on Continuous Learning - Johnny Graber
:PROPERTIES:
:CREATED:  [2018-08-15 Wed 07:52]
:lg-yt-url: https://youtu.be/SuZZV74wTkw
:lg-source: YouTube
:lg-subject: What Doctors Can Teach Us on Continuous Learning - Johnny Graber
:CUSTOM_ID: What-Doctors-Can-Teach-Us-on-Continuous-Learning-Johnny-Graber
:END:
#+call: lg-get-props-entry()

 - Dream on learning playing guitar Vs learning playing guitar.
 - use the training budget
 - get enough sleep
 - Swiss doctors have to spend 80 hours on training yearly.. how do they prove it

*** TODO Exploiting Network Printers
:PROPERTIES:
:CREATED:  [2018-08-15 Wed 07:56]
:lg-yt-url: https://youtu.be/DwKzSO4yA_s
:lg-authors: Jens%20Müller
:lg-group: black hat usa 2017
:lg-categoty: Security
:lg-keywords: Printers Postscript EPS IPP
:lg-subject: Exploiting Network Printers
:CUSTOM_ID: Exploiting-Network-Printers
:END:
#+call: lg-get-props-entry()
:OFFICIAL-DESCRIPTION:
- The idea of a paperless office has been dreamed of for more than three decades.
- However, nowadays printers are still one of the most essential devices for daily work and common Internet users.
- Instead of removing them, printers evolved from simple devices into complex network computer systems, installed directly into company networks, and carrying considerable confidential data in their print jobs.
- This makes them to an attractive attack target.
:END:
:MY-REMARKS:
- Nice. Esp usage of the Turing completeness of Postscript and eps. Image Magic ..
:END:

*** TODO Attacks Against GSMA's M2M Remote Provisioning
:PROPERTIES:
:CREATED:  [2018-08-15 Wed 07:58]
:lg-yt-url: https://youtu.be/rI9hvDDbdlE
:lg-authors: Maxime%20Meyer
:lg-group: black hat europe 2017
:lg-keywords: eUICC
:lg-categoty: eUICC
:lg-url-1: https://www.blackhat.com/docs/eu-17/materials/eu-17-Meyer-Attacks-Against-GSMAS-M2M-Remote-Provisioning.pdf
:lg-url-2: https://www.blackhat.com/docs/eu-17/materials/eu-17-Meyer-Attacks-Against-GSMAS-M2M-Remote-Provisioning-wp.pdf
:lg-subject: Attacks Against GSMA's M2M Remote Provisioning
:CUSTOM_ID: Attacks-Against-GSMA's-M2M-Remote-Provisioning
:END:
#+call: lg-get-props-entry()
:OFFICIAL-DESCRIPTION:
GSMA is investigating, developing and standardizing an embedded SIM card with remote provisioning (that is, over-the-air installation of subscription data), called an eUICC,to improve the current mobile-phone subscription model.
In this presentation, we will review remote-provisioning security mechanisms and show that these mechanisms are vulnerable to attacks that prevent network operators from providing service
:END:

:MY-REMARKS:
The way the SIM card is manufactured. Esp for the iot and the new way of limiting the transport of the chips there and back
:end:
*** TODO Web Application Security Risks: A Look at OWASP Top Ten 2017 - Christian Wenz
:PROPERTIES:
:CREATED:  [2018-08-15 Wed 08:00]
:lg-yt-url: https://youtu.be/avFR_Af0KGk
:lg-group: NDC Oslo 2017
:lg-authors: Christian Wenz
:lg-categoty: OWASP
:lg-event-date: <2017-06-15 Čt>
:lg-subject: Web Application Security Risks: A Look at OWASP Top Ten 2017 - Christian Wenz
:CUSTOM_ID: Web-Application-Security-Risks-A-Look-at-OWASP-Top-Ten-2017-Christian-Wenz
:END:
#+call: lg-get-props-entry()

:OFFICIAL-DESCRIPTION:
- Since 2003, the Open Web Application Security Project curates a list of the top ten security risks for web applications.
- After several delays, the 2017 list has finally been released in spring.
- Time to have a look at what's new, what has changed, and to get an up-to-date refresh on how to create secure web applications.
:END:

:MY-REMARKS:
- slow beginning describing the difficulties but after very nice overview of the OWASP
:END:
*** TODO Simon Brown on the Role of the Software Architect in a Continuous Delivery Environment
:PROPERTIES:
:CREATED:  [2018-08-19 Sun 21:50]
:lg-subject: Simon Brown on the Role of the Software Architect in a Continuous Delivery Environment
:CUSTOM_ID: Simon-Brown-on-the-Role-of-the-Software-Architect-in-a-Continuous-Delivery-Environment
:END:
#+call: lg-get-props-entry()

Simon Brown on the Role of the Software Architect in a Continuous Delivery Environment

23.09.17 by InfoQ

Web player: http://podplayer.net/?id=41262898
Episode: http://dts.podtrac.com/redirect.mp3/feeds.soundcloud.com/stream/343562772-infoq-channel-simon-brown-on-the-role-of-the-software-architecture-in-a-a-continuous-delivery-environment.mp3

This week's podcast features Simon Brown well known for his work training software architects. Topics include the differences between a tech lead and an architect, how much documentation is enough and what that looks like in a continuous delivery environment.

What you'll learn on this podcast:
• As an industry we seem to have lost our knowledge of how to do architecture well in the context of modern agile software teams.
• Architecture is about the expensive decisions; things that are costly to change later.
• Ideally architects should code in the production code base. If you are not able to do this at least be involved in quality reviews and peer reviews in the production code so you can get feedback on your designs.
• It is often said the the code is the only documentation you need but the code can’t tell you everything. You do need to document the things you can’t get from the code such as the architectural drivers, they key quality attributes and so on along with some high level diagrams and how you operate the system.
• As you step into the role of architect go and find a mentor or a local meet-up. The major change is that you have to influence and lead people.

This podcast is sponsored by AppDynamics. Software architects play a critical role in designing, executing, and migrating large infrastructures to the cloud. Download AppDynamic’s FREE eBook “10 Tips for Enterprise Cloud Migration” and launch your migration project with a proven plan. Download the eBook now at http://infoq.link/web_sndcld_appdynamics


Subscribe: www.youtube.com/infoq
Like InfoQ on Facebook: bit.ly/2jmlyG8
Follow on Twitter: twitter.com/InfoQ
Follow on LinkedIn: www.linkedin.com/company/infoq
Want to see extented shownotes? Check the landing page on InfoQ: http://bit.ly/2xvq7qM

*** TODO Experimental Creative Writing with the Vectorized Word by Allison Parrish
:PROPERTIES:
:CREATED:  [2018-08-15 Wed 08:01]
:lg-subject: Experimental Creative Writing with the Vectorized Word by Allison Parrish
:CUSTOM_ID: Experimental-Creative-Writing-with-the-Vectorized-Word-by-Allison-Parrish
:END:
#+call: lg-get-props-entry()

https://youtu.be/L3D0JEA1Jdc

*** TODO 20- Haskell course 28/Nov/2011 Hanning, Curry-Howard 1
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 06:13]
:lg-authors: Philip%20Wadler
:lg-subject: 20- Haskell course 28/Nov/2011 Hanning, Curry-Howard 1
:CUSTOM_ID: 20-Haskell-course-28-Nov-2011-Hanning-Curry-Howard-1
:END:
#+call: lg-get-props-entry()

https://youtu.be/uOsMt-vrWQ4
Knowledge is like the interest
MMCH prof. Wadler je opravdu skvely prednasejici.
Cely tento playlist stoji za to, ale to to 20 hodin prednasek o Haskellu tak to zvazte, protoze jakmile zacnete uz se nebudete moci odtrhnout.
https://www.youtube.com/playlist?list=PL395B50FC04752DA8

*** TODO Oliver Gould on Service Mesh for Microservices, LinkerD, and the Recently Released Conduit
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 14:14]
:lg-authors: Oliver%20Gould
:lg-subject: Oliver Gould on Service Mesh for Microservices, LinkerD, and the Recently Released Conduit
:CUSTOM_ID: Oliver-Gould-on-Service-Mesh-for-Microservices-LinkerD-and-the-Recently-Released-Conduit
:END:
#+call: lg-get-props-entry()

Oliver Gould on Service Mesh for Microservices, LinkerD, and the Recently Released Conduit

09.02.18 by InfoQ

Web player: http://podplayer.net/?id=46495465
Episode: http://dts.podtrac.com/redirect.mp3/feeds.soundcloud.com/stream/396889389-infoq-channel-oliver-gould-omicroservices-service-meshes-linkerd.mp3

This week on The InfoQ Podcast Wes Reisz talks with the CTO of Bouyant Oliver Gould. Bouyant is the maker the LinkerD Service Mesh and the recently released Conduit. In the podcast, Oliver defines a service mesh, clarifies the meaning of the data and control plane, discusses what a Service Mesh can offer a Microservice application owners, and, finally, discusses some of the considerations they took into account developing Conduit.

Why listen to this podcast:

- Service mesh is dedicated infrastructure that handles interservice communication.
- There are two components to a service mesh: the data plane handles communication and the control plane is about policy and config.
- LinkerD and Conduit are two open service meshes made by Bouyant. Conduit has a small memory footprint and provides a convention over configuration approach to service mesh deployment.
- Adopting Rust (language used for implementing the data plane in Conduit) requires thinking of memory differently, and the best way to adopt Rust is to read other people’s code.

More on this: Quick scan our curated show notes on InfoQ http://bit.ly/2skWF61

You can also subscribe to the InfoQ newsletter to receive weekly updates on the hottest topics from professional software development. bit.ly/24x3IVq

Subscribe: www.youtube.com/infoq
Like InfoQ on Facebook: bit.ly/2jmlyG8
Follow on Twitter: twitter.com/InfoQ
Follow on LinkedIn: www.linkedin.com/company/infoq
Check the landing page on InfoQ: http://bit.ly/2skWF61

*** TODO Evolution of Emacs Lisp [pdf]
:PROPERTIES:
:CREATED:  [2018-10-21 Sun 18:03]
:lg-subject: Evolution of Emacs Lisp [pdf]
:CUSTOM_ID: Evolution-of-Emacs-Lisp-pdf
:END:
#+call: lg-get-props-entry()

Evolution of Emacs Lisp [pdf] - https://www.iro.umontreal.ca/~monnier/hopl-4-emacs-lisp.pdf

*** TODO Practical Cryptography for Developers
:PROPERTIES:
:CREATED:  [2018-11-24 Sat 08:07]
:lg-subject: Practical Cryptography for Developers
:CUSTOM_ID: Practical-Cryptography-for-Developers
:END:
#+call: lg-get-props-entry()

Practical Cryptography for Developers - https://cryptobook.nakov.com/

*** TODO Designing Resilient Systems: Circuit Breakers or Retries?
:PROPERTIES:
:CREATED:  [2018-12-26 Wed 08:53]
:lg-subject: Designing Resilient Systems: Circuit Breakers or Retries?
:CUSTOM_ID: Designing-Resilient-Systems-Circuit-Breakers-or-Retries
:END:
#+call: lg-get-props-entry()

- Designing Resilient Systems: Circuit Breakers or Retries? - https://engineering.grab.com/designing-resilient-systems-part-1

*** TODO GOTO 2018
:PROPERTIES:
:lg-subject: GOTO 2018
:CUSTOM_ID: GOTO-2018
:END:
#+call: lg-get-props-entry()

*** TODO YOW! Conference 2018
:PROPERTIES:
:lg-subject: YOW! Conference 2018
:CUSTOM_ID: YOW-Conference-2018
:END:
#+call: lg-get-props-entry()

*** TODO GOTO 2018 • Why I Was Wrong About TypeScript • TJ VanToll
:PROPERTIES:
:CREATED:  [2019-02-24 Sun 08:15]
:CUSTOM_ID: GOTO-2018-Why-I-Was-Wrong-About-TypeScript-TJ-VanToll
:END:
#+call: lg-get-props-entry()

https://youtu.be/AQOEZVG2WY0

*** TODO Gary McGraw - How to Avoid the Top Ten Software Security Flaws
:PROPERTIES:
:CREATED:  [2019-02-27 Wed 21:04]
:lg-topic: Security
:lg-authors: Gary%20McGraw
:lg-serie: YOW! Conference 2018
:CUSTOM_ID: Gary-McGraw-How-to-Avoid-the-Top-Ten-Software-Security-Flaws
:END:
#+call: lg-get-props-entry()

https://youtu.be/TRJndqZIGMw
http://www.slideshare.net/cisoplatform7/asd-t09howtoavoidthetoptensoftwaresecurityflaws

- c++ suck From sec perspective
-

- security defects
 - There is a security flaw. Design problems
  - 50 percent
  - design
 + Bugs
   -; stack overflow

 - what are flaws
- IEEE CSD
  - http://bit.ly/ieee-CSD-gem

:TOPICS:
 - Security defects
- Implementation bugs
- Architecture flaws
- IEEE-CSD
- BSIMM9
- Unknown unknowns
:END:

:TRIVIA:
Only 1/8 of companies have a process
Makes fun of unknown unknowns
Microservice more dependencies - not a good thing in context of know your dependencies
:END:

:POINTS-TAKEN:
Design flaws take 50% of security defects
- Defines 10 common flaws:
  1. earn or give but never assume,  Don't trust anybody
     - YES:
       - validate data from untrusted sources
       - assume data are compromised
     - NO:
       - avoid authorization, access control, policy enforcement, and use of sensitive data in client code
  2. use auth mechanism that can not be bypassed
     - YES:
       - prevent user from changing identity without re-authentication
       - consider the strength of the authentication user has provided before taking a action
       - use timeouts
     - NO:
       - do not stay past the big three
         - something you are
         - something you have
         - something you know
       - avoid shared resources like IP address and mac address
       - avoid predicable tokens
  3. authorize after you authenticate
     - YES
       - perform authorization as an explicit check
       - re-use common infrastructure for conducting authorization checks
     - NO
       - authorization depends on a given set of privileges, and on the context of the request
       - failing to revoke authorization can result in authenticated users excercising out-of-date authorizations
  4. strictly separate data and control instructions, and newer process control instructions from untrusted sources
     - YES
       - utilize HW capabilities to enforce separation of code and data
       - know and use appropriate compiler/linker security flags
       - expose methods or endpoints that consume structured types
     - NO
       - co-mingling data and control instructions in a single entity is bad
       - beware of injection prone APIs
         - XSS, SQL injection, shell injection
       - watch out for eval
  5. define an approach that ensures all data are explicitly validated
     - YES
       - ensure that comprehensive data validation actually takes place
       - make security review of the validated scheme possible
       - use a centralised validation mechanism and canonical data forms (avoid strings)
     - NO
       - watch out for assumptions about data
       - avoid blacklisting, use whitelisting
  6. use cryptography correctly
     - YES:
       - use standard algorithms and libraries
       - centralize and re-use
       - design for crypto ability
       - get help from teal experts
  7. identify sensitive data and how they should be handled
     - YES:
       - know where your sensitive data are
       - classify your data into categories
       - consider data controls
         - file, memory, database protection
       - plan for change over time
  8. always consider the users
     - YES:
       - think about : deployment, configuration, use, update
       - know that security is an emergent property of the system
       - consider user culture, experience, biases
       - make things secure by default
     - NO:
  9. understand how integrating external components changes your attack surface
     - YES:
       - test your components for security
       - include extery components and dependencies in review
       - isolate components
       - keep an eye out for public security information about components
  10. be flexible when considering future changes to objects and actors
      - YES
        - design for change
        - consider security updates
        - make use of code signing and code protection
        - have a plan for "secret compromise" recovery
      - NO
        - watch out for fragile and/or brittle security
        - be careful with code signing and system administration/operation
        - keeping secrets is hard
        - crypto breaks
      - YES:
      - NO
:END:

*** TODO Hila Peleg - Automatic Programming - How Far Can Machines Go
:PROPERTIES:
:CREATED:  [2019-03-06 Wed 19:23]
:CUSTOM_ID: Hila-Peleg-Automatic-Programming-How-Far-Can-Machines-Go
:END:
#+call: lg-get-props-entry()

https://youtu.be/-EFTnauDZmY

:TOPICS:
technological-singularity
Programming-by-example
Halting-problem
REPL
RESL
:END:

:TOOLS:
Codota
Nicify-javascript
Flash-fill
:END:

:POINTS-TAKEN:
Automatic programming is hard
User intent is hard
Machines are not goog in common sense
Phone complete language models from phone typing assistant does a surprisingly good job in writing program
Perfect specification is actually a code
General program of "find me a program that...." Cannot be solved
We need to make a realistic expectations
:END:

:TRIVIA:
MS flash-fill started the field of programming by example
Now excel warns from using the flash fill
:END:

*** TODO Is It Time to Rewrite the Operating System in Rust?
:PROPERTIES:
:CREATED:  [2019-02-25 Mon 20:28]
:lg-subject: Is It Time to Rewrite the Operating System in Rust?
:CUSTOM_ID: Is-It-Time-to-Rewrite-the-Operating-System-in-Rust
:END:
#+call: lg-get-props-entry()

https://youtu.be/HgtRAbE1nBM

What is the operating system. Not that easy to define. But operating system isn't a operating system kernel.

History .. Burroughs B5000 MCP in 1961.  First os written in higher language. Way ahead of time.
The
MAC at MIT, CTSS (Second system syndrome). To be written in PL/I wrote os in non existent programming language. They didn't have a functional compiler.

- UNIX was implemented entirely in assembly.
- UNIX was a joke of Multics. UNIX was organic effort of 1968.
- There was a B programming language. B was a interpreted language.
- Some parts of B were rewritten in assembly for speed up.
- C was implemented independent on Unix.
- C didn't have structs they  were implemented later for Unix needs in 73
- C has macros .. newer use preprocessor like rust has.

- 1990 a great darkness came. All must be rewritten in c++ again the second system syndrome. All was more like HDD stress test.
Sun spring. Apple's Copland, taligent's pink Java os.

With Linux arrival Unix was resurrected.

And there is a JavaScript lisp without the bracket.

System programmers looking for something as performant as c but with power of modern languages.
Google develop Go. But with many idiosyncrasies
There is a problem: GC. Does not force programmers to think and thinking is important.

Rust brought a new concept of ownership. Power of garbage collected languages with the performance of manual memory management
Unlike C , rust is highly compostable
Rust is able to statically checking who owns what when. But rust does not permit your to have not initialed structs.
Cimooce property means that when you know how to control your memory doesn't mean that the others agree with your way doing so.
Double linked lists is a problem as two own our data.
Implemented a double linked list with two hash maps and it overperformed the c implementation.
Rust uses B-trees.

Algebraic types
Hygienic macros with full AST
Ffi allows full duplex integration with c


Reenix a first-time is kernel in rust. As undergrad thesis in 2015 - handling allocation errors is problematic in rust. There is RFC 2116 but still

Since 2016. An explosion of os written in Rust
But written From scratch but Linux binary compatibility is a challenge. And all fighting second system syndrome.

Maybe hybrid approach .. c kernel and rust drivers.

Maybe operating system but not the kernel. User level software is actually harder to write.

Maybe Rust based firmware...

*** TODO Tabs, spaces and salaries: a data science detective story - Evelina Gabasova
:PROPERTIES:
:lg-format: conference talk
:CREATED:  [2019-02-27 Wed 20:49]
:lg-subject: Tabs, spaces and salaries: a data science detective story - Evelina Gabasova
:CUSTOM_ID: Tabs-spaces-and-salaries-a-data-science-detective-story-Evelina-Gabasova
:END:
#+call: lg-get-props-entry()

https://youtu.be/9MKBex5p2lc


- Correlation Vs causation
- programmers that uses spaces make more
- snow Vs sub zero temperature
- tangled in betsheet Vs consumption of cheese
- Fourier actually died from tangled in  the betsheet

- you should check (look for)
  - sample size
  - randomised study?
  - results by a chance
  - hidden cause

- p-value problem
  - p-value <0.05

- how it is with the salary
  - sample size looks ok
  - by chance probably not as the sample size is ok
  -


- stork pairs vs children born
  - actually the cause is the country size

- do-calculus (but you need to know the domain and all variables)
  - but

- linear regression
  - full model Vs
  - reduced model
  - check for redundant variables

- people who contributed to open source have in avg higher salary
- People who contribute to open source tend to prefer spaces over tabs

- actually the VCS is the distinguisher it is the git usage that separates people
  - git higher
  - TFS lower salary
  - switch to git to get better salary - probably not

- why is git so important..
  - probably it says something about the company.

- GitHub.com/evelinag/tabs-spaces-talk
  - executable sources is R for the talk


- can you trust the data
  - us data
  - there are two peaks
    - India
    - Poland
    - Russia

She's From Czech Republic.
  - there are two peaks in Germany Poland Russian federation
  - but it looks likany people From Europe mixed yearly salary and monthly salary.
  - and really 1/12 was the first peak
  - missing data (not random) because of the questions
    - people with with very high salary and very low salary typically don't report
    - similar effect was with the survey about Trump Aš people feel ashamed admitting to vote for Trump

Todo: lookup the political party parliament voting consistecy.. it was in Czech Republic.. interesting

- beyond "correlation is not causation"







 Russia

*** TODO CRDTs in Production
:PROPERTIES:
:CREATED:  [2019-02-28 Thu 20:36]
:lg-subject: CRDTs in Production
:CUSTOM_ID: CRDTs-in-Production
:END:
#+call: lg-get-props-entry()

https://youtu.be/f03FWiIfXoQ

- QCon SF 2018
- Conference talk

:TAKEN:
- CRDT are not only academy
:END:
:TOPICS:
- CRDT
- CV - causality vector
- CAP theory
- Conflict resolution
:END:

*** TODO Alex Anthony - Easier code reviews with ESLint (Feb React London speaker)
:PROPERTIES:
:CREATED:  [2019-03-04 Mon 21:04]
:lg-subject: Alex Anthony - Easier code reviews with ESLint (Feb React London speaker)
:CUSTOM_ID: Alex-Anthony-Easier-code-reviews-with-ESLint-Feb-React-London-speaker
:END:
#+call: lg-get-props-entry()

https://youtu.be/fIk7vW1BLGI


Meetup talk

*** TODO Technical Leadership Through the Underground Railroad
:PROPERTIES:
:CREATED:  [2019-03-05 Tue 20:28]
:lg-subject: Technical Leadership Through the Underground Railroad
:CUSTOM_ID: Technical-Leadership-Through-the-Underground-Railroad
:END:
#+call: lg-get-props-entry()

https://youtu.be/kopTiMg5u9E

- Underground ralroad?

- History...
- It industry borrow a terminology from the sports?
- Self organized human run API.
- John p Parker wealthiest man in Ohio.
- Lived a double live
- Brought people From
- Not interesting
- Hangout

*** TODO to see:
:PROPERTIES:
:CUSTOM_ID: to-see
:END:

https://aws.amazon.com/managed-services/
https://www.youtube.com/channel/UCPHcNDphBAvooQI5U4yC0mA

*** TODO Episode 56: Developer Hiring
:PROPERTIES:
:CREATED:  [2019-03-07 Thu 17:10]
:lg-subject: Episode 56: Developer Hiring
:CUSTOM_ID: Episode-56-Developer-Hiring
:END:
#+call: lg-get-props-entry()

- Episode 56: Developer Hiring

- 2/27/19 by Table XI

- Web player: http://podplayer.net/?id=64477200
- Episode: https://aphid.fireside.fm/d/1437767933/e2f17a1d-4992-4c1c-b414-0780dcd58bc3/06bea63d-6fc1-4a82-88e8-917b0521000b.mp3

- Developer Hiring TableXI is now offering training for developers and products teams! For more info, email workshops@tablexi.com or find us at http://tablexi.com.workshops
- Today on the show, we're talking about hiring with Jennifer Tu and Zee Spencer of Cohere, Thayer Prime of Team Prime, and software consultant Matt Patterson.
- We talk about the entire developer hiring process from how to advertise your company to potential candidates, through coding tests and interviews, and all the way to the final decision process.
- It's a great conversation with a lot of different perspectives and a lot of good advice.
-
- We’d like to hear from you.
- What do you look for when hiring developers?
- Let us know at http://techdoneright.io/56 or on Twitter at @tech_done_right
- Guests
  - Jennifer Tu: Cofounder of Cohere.
  - Zee Spencer: Cofounder of Cohere.
  - Thayer Prime: Founder of Team Prime.
  - Matt Patterson: Software Consultant.
- Notes
  - 02:55 - Common Mistakes When Hiring Developers
  - 05:17 - Effective Hiring Procedures and Interview Processes
  - 10:31 - Getting Your Company’s Name Out There
  - 15:30 - Recruitment, Onboarding, and Reviews
  - 18:52 - Sending Take-Home Exercises and the Problems They Present; Pre-Hire Pairing
  - 30:33 - Good and Bad Uses of Interview Time
  - 33:11 - Developing Interview Question and Using Standardization to Remove Biases
  - 35:34 - Making Yes/No Decisions
- Related Episodes
  - Apprenticeship with Megan Tiu, Kara Carrell, and Alyssa Ramsey
  - Diversity and Inclusion at Small Companies with Meara Charnetzki, Michael Donnelly, and Elena Valentine
  - Live Panel: Hiring Developers in (and out of) Health Care Developer Bootcamps and Computing Education with Jeff Casimir and Mark Guzdial
- Special Guests:
  - Jennifer Tu, Matt Patterson, Thayer Prime, and Zee Spencer.

*** TODO Evelina Gabasova - Exploring StackOverflow Data
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 06:47]
:lg-subject: Evelina Gabasova - Exploring StackOverflow Data
:CUSTOM_ID: Evelina-Gabasova-Exploring-StackOverflow-Data
:END:
#+call: lg-get-props-entry()

https://youtu.be/K8CIBh22VzE

*** TODO Upskilling Enterprise DevOps Skills Report Results!
:PROPERTIES:
:CREATED:  [2019-03-09 Sat 13:39]
:lg-subject: Upskilling  Enterprise DevOps Skills Report Results!
:CUSTOM_ID: Upskilling-Enterprise-DevOps-Skills-Report-Results
:END:
#+call: lg-get-props-entry()

https://youtu.be/5kbhyAQUqMA

- Eveline oehrlich
- Jayne grill
- Webinar

:KEYWORDS:
- DevOps
- skills-benchmarking
- 4th-tevolution
- Industry 4.0
- T-shaped-professional
- I-shaped-professional
- Knowledge
- Skill
- Ability
:END:
:REFERENCES:
- Electric cloud university
- DevOps institute (DOI)
- DevOpsinstitute.com
:END:

:POINTS-TAKEN:
- Important ingredients to "do the DevOps"
  - spirit of continuous improvement
    - people
    - process
    - tools
- as releasez become more frequent people can become overwhelmed
- employment trends worldwide
   - global workforce change
   - skill stability
   - Challenges
      - top (51%) - insufficient understanding of disruptive changes
- DevOps Jobs in 2019 are in hotest demand
   - Glassdoor: in top 10 tech roles
   - Robert Half: seventh most wanted professional
   - 37% of. Companies are currently hiring DevOps
   - DevOps engineer is the most popular title
- DevOps require T-shaped professionals
- DevOps skills
     - functional know- how
     - soft skills
     - process skills
     - technical skills

- kwowledge Vs skill Vs ability
   - knowledge
      - definition
         - practical and/or theoretical understanding of a topic
      - obtained throughput
         - learning training experience
   - skill
      - definition
          - things that one learns through training and/or through experience
      - obtained throughput
        - practicing, learning
   - ability
      - definition
         - level of being able to perform or deliver a task
      - obtained throughput
         - natural capability
- current state of the DevOps
   - 11% planning to adopt in the future
   - 15% in a planning phase
   - 43% project level adoption
   - 19% enterprise level adoption
   - 1% consciously avoiding DevOps
   - 1% been there and failed
- become the automator and not the automated
- DevOps as an automator must have skills survey
    - 57% automation skills
    - 55% process skills and knowledge
        - 46 + 49 software development life cycle
        - 45 + 50 understand of process flow and analysis
        - 45 + 47 experience with source control models and processes
         - 41 + 50 agile (eg csm/cspo/csd or psm/pspo/psd)
         - 40 + 48 experience with test driven deployment concepts and methods
          - 39 + 52 system thinking
          - 36 + 54 scrum basic or advanced
          - 32 + 57 experience with performance tuning and monitoring
          - 29 + 53 ITIL basic or advanced
          - 16 + 51 program management experience and/or certification (pgm msp)
          - 15 + 50 project management expérience and/or certification (e.g. PMP capm CSM prince2)

    - 53% soft skills
      - global survey
         -  78 + 20 collaboration and cooperation
         - problem solving
         - interpersonal skills
         - sharing and knowledge transfer
         - flexibility and adaptability
         - personal value commitment
         - creativity
         - empathy
         - customer experience skills
         - multi tasking
         - leadership
         - diplomacy
         - business understanding
         - carreer development
         - visionary
         - risk taking
       - C-level management selected must have
       - management selected must have
       - Individual contributor selected must have

    - 42% functional knowledge (ops  ad&d infra network storage)
       - 52% + 44% it operations knowledge
       - it infrastructure knowledge
       - security practices
       - applications development & design (SDLC)
       - quality assurance knowledge
       - testing knowledge
       - enterprise and or business architecture knowledge
       - network knowledge
       - business continuity and or disaster recovery knowledge
       - dB schemas and SQL knowledge
       - governance risk and audits
    - 28% specific automation tools
    - 26% business skills
    - 15% specific certification
- DevOps topology
   - 19% add-on responsibility of one or more members of IT (ad hoc and not formalized)
   - 22% on project-by-project basis via DevOps service team
   - 24% Via cross-functional team distributed among different IT teams and business units
   - 11% via central IT team which services multiple AppDev teams
    - 10% via dedicated central DevOps team which owns governance
    - 3% other
:END:

*** TODO Just what is a "service mesh", and if I get one will it make everything OK? - Elton Stoneman
:PROPERTIES:
:CREATED:  [2019-03-21 Thu 18:46]
:lg-subject: Just what is a "service mesh", and if I get one will it make everything OK? - Elton Stoneman
:CUSTOM_ID: Just-what-is-a-service-mesh-and-if-I-get-one-will-it-make-everything-OK-Elton-Stoneman
:END:
#+call: lg-get-props-entry()

https://youtu.be/fki4nIvYJcc

:KEYWORDS:
- K8s
- Ostio:
- Load-ballancing
- Traffic-managemen
- Docker
- Service-mesh
- Prometheus
- Graphana
- Elastic search
- Fluentd
- Observability
- Security
- Mesh
- Envoy
:END:

*** TODO Beauty in Code 2019, 2 of 6 — Kjell Ljøstad: "How to Become Agile Without Scrum or Kanban"
:PROPERTIES:
:CREATED:  [2019-03-25 Mon 20:31]
:CUSTOM_ID: Beauty-in-Code-2019-2-of-6-Kjell-Ljøstad-How-to-Become-Agile-Without-Scrum-or-Kanban
:END:
#+call: lg-get-props-entry()

https://youtu.be/IhqxJCZKCz4

- not a kanban or scrum just agile
- 26 richeat people own more than 3.8 mld
- agle  means adaptible quick
- not the strongest survive but thos mot adaptable for change
- what is in agile manifesto
   - individual ower
....
- google -  why are some teams so much more performant

..- needs for performance teams (MIT human dynamic laboratory) over 2000 People in study
    - everyone talks and listens in roughly equal measure
    - members face one another and conversations energetic
    - members connect directly with one another not through their bosses
     - member periodically explore outside of the team and bring information black
    -
 - does size matter
     - oh yes
     - ideal team size is approx 6
        - the fenommen that occurs in group as it's size increases
           - the individual effort goes down
           - need for coordination goes up
- study from quantitative software management
  - you can deliver faster with more people but the cost will be enormous

- the whole person (people must see a value in working for you)
  - education and work
  - history
  - family and friends
  - interests and hobbies
  - future and dreams
  - know eachother better
  - relational skills
    - a set of skills that helps you establish maintain and develop relationships between people.
  - what is a relation
    - love
    - friendship
    - friendly
    - respect
    - exhausting
    - dangerous

- relational management
  - a positive view
  - actively show interest
  - Find teh good
  - What motivates
- Credo
  - cultivate the positive
  - tone down the negative
- team as a puzzle
  - competence
  - personality
  - teams must be of different personalities

- Core of Agile
  - communication + knowledge transfer=  working valuable software

- forms of communication
  - dialogue
    - takes practice
    - best way
    - build on top what have been said
  - discussion
    - one of us is going to win .. not a good ways
  - debate
    - like politicians in TV

- how to listen
   - intentional listening
     - intention
     - message
     - wisdom
   - correctional listening
     - details
     - formulations
     - imPerfections
- how to create or kill dialogue
    - create
      - active listening
      - ask questions
      - build on ideas
      - recognition
      - get everyone involved
   - kill
       - interruptions
       - sarcasm
       - corrections
       - neglecting input
       - accentuate own opinions
** Udemy
*** TODO https://www.udemy.com/course/understanding-typescript/
** podcasts
:PROPERTIES:
:CUSTOM_ID: podcasts
:END:
**** All in the Mind
:PROPERTIES:
:lg-rss: https://podcasts.files.bbci.co.uk/b006qxx9.rss
:lg-url-1: http://www.bbc.co.uk/programmes/b006qxx9
:CUSTOM_ID: All-in-the-Mind
:END:
**** AWS Podcast
:PROPERTIES:
:lg-rss: https://d3gih7jbfe3jlq.cloudfront.net/aws-podcast.rss
:lg-url-1: https://aws.amazon.com/podcasts/aws-podcast/
:CUSTOM_ID: AWS-Podcast
:END:
**** Brain Science with Ginger Campbell, MD: Neuroscience for Everyone
:PROPERTIES:
:lg-rss: https://brainsciencepodcast.libsyn.com/rss
:lg-url-1: http://brainsciencepodcast.com
:CUSTOM_ID: Brain-Science-with-Ginger-Campbell-MD-Neuroscience-for-Everyone
:END:
**** Ciel &amp; Espace
:PROPERTIES:
:lg-rss: http://ephemerides.cieletespace.fr
:lg-url-1: https://www.cieletespace.fr
:CUSTOM_ID: Ciel-amp-Espace
:END:
**** CodePen Radio
:PROPERTIES:
:lg-rss: https://blog.codepen.io/feed/podcast
:lg-url-1: https://blog.codepen.io
:CUSTOM_ID: CodePen-Radio
:END:
**** Coding Blocks
:PROPERTIES:
:lg-rss: https://www.codingblocks.net/feed/podcast
:lg-url-1: https://www.codingblocks.net
:CUSTOM_ID: CODING-BLOCKS-PODCAST
:END:
**** Command Line Heroes
:PROPERTIES:
:lg-rss: https://feeds.pacific-content.com/commandlineheroes
:lg-url-1: https://www.redhat.com/en/command-line-heroes
:CUSTOM_ID: Command-Line-Heroes
:END:
**** CoRecursive with Adam Gordon Bell
:PROPERTIES:
:lg-rss: https://corecursive.com/feed
:lg-url-1: http://corecursive.com
:CUSTOM_ID: CoRecursive-with-Adam-Gordon-Bell
:END:
**** CPradio
:PROPERTIES:
:lg-rss: https://www.ranlevi.com/feed/cp_pod/
:lg-url-1: https://cpradio.castos.com
:CUSTOM_ID: CPradio
:END:
**** Darknet Diaries
:PROPERTIES:
:lg-rss: https://feeds.megaphone.fm/darknetdiaries
:lg-url-1: https://darknetdiaries.com/
:CUSTOM_ID: Darknet-Diaries
:END:
**** DevOps and Docker Talk
:PROPERTIES:
:lg-rss: https://feeds.transistor.fm/devops-and-docker-talk
:lg-url-1: https://podcast.bretfisher.com
:CUSTOM_ID: DevOps-and-Docker-Talk
:END:
**** DevOps Cafe Podcast
:PROPERTIES:
:lg-rss: https://devopscafe.libsyn.com/rss
:lg-url-1: http://devopscafe.org
:CUSTOM_ID: DevOps-Cafe-Podcast
:END:
**** EconTalk
:PROPERTIES:
:lg-rss: http://files.libertyfund.org/econtalk/EconTalk.xml
:lg-url-1: https://www.EconTalk.org
:CUSTOM_ID: EconTalk
:END:
**** egghead.io developer chats
:PROPERTIES:
:lg-rss: https://feeds.simplecast.com/saRCLXVY
:lg-url-1: https://egghead.io
:CUSTOM_ID: egghead-io-developer-chats
:END:
**** Elixir Wizards
:PROPERTIES:
:lg-rss: https://feeds.fireside.fm/smartlogic/rss
:lg-url-1: https://smartlogic.io/podcast/elixir-wizards
:CUSTOM_ID: Elixir-Wizards
:END:
**** Emacs Chat
:PROPERTIES:
:lg-rss: https://sachachua.com/blog/category/podcast/emacs-chat-podcast/feed/
:lg-url-1: https://sachachua.com/blog/category/podcast/emacs-chat-podcast/
:CUSTOM_ID: Emacs-Chat
:END:
**** Engineering Culture by InfoQ
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:258266127/sounds.rss
:lg-url-1: http://bit.ly/2dcGm4z
:CUSTOM_ID: Engineering-Culture-by-InfoQ
:END:
**** French Podcast
:PROPERTIES:
:lg-rss: https://nsf.libsyn.com/rss
:lg-url-1: http://www.newsinslowfrench.com
:CUSTOM_ID: French-Podcast
:END:
**** Full Stack Cast
:PROPERTIES:
:lg-rss: https://feed.pippa.io/public/shows/5c41923801f1e74d22ffbc9e
:lg-url-1: https://shows.pippa.io/full-stack-cast
:CUSTOM_ID: Full-Stack-Cast
:END:
**** Full Stack Radio
:PROPERTIES:
:lg-rss: https://feeds.transistor.fm/full-stack-radio
:lg-url-1: http://fullstackradio.com
:CUSTOM_ID: FULL_STACK_RADIO_PODCAST
:END:
**** Functional Geekery
:PROPERTIES:
:lg-rss: https://www.functionalgeekery.com/feed/mp3/
:lg-url-1: https://www.functionalgeekery.com
:CUSTOM_ID: Functional-Geekery
:END:
**** Going Linux
:PROPERTIES:
:lg-rss: https://goinglinux.com/mp3podcast.xml
:lg-url-1: https://goinglinux.com
:CUSTOM_ID: Going-Linux
:END:
**** Google Cloud Platform Podcast
:PROPERTIES:
:lg-rss: http://feeds.feedburner.com/gcppodcast
:lg-url-1: https://www.gcppodcast.com
:CUSTOM_ID: Google-Cloud-Platform-Podcast
:END:
**** Hanselminutes with Scott Hanselman
:PROPERTIES:
:lg-rss: https://feeds.simplecast.com/gvtxUiIf
:lg-url-1: https://www.hanselminutes.com
:CUSTOM_ID: Hanselminutes-with-Scott-Hanselman
:END:
**** Haskell Weekly
:PROPERTIES:
:lg-rss: https://haskellweekly.news/podcast/feed.rss
:lg-url-1: https://haskellweekly.news/podcast.html
:CUSTOM_ID: Haskell-Weekly
:END:
**** Health Check
:PROPERTIES:
:lg-rss: https://podcasts.files.bbci.co.uk/p002vsyw.rss
:lg-url-1: http://www.bbc.co.uk/programmes/p002vsyw
:CUSTOM_ID: Health-Check
:END:
**** Hope in Source
:PROPERTIES:
:lg-rss: https://feeds.transistor.fm/hope-in-source
:lg-url-1: https://hopeinsource.com
:CUSTOM_ID: Hope-in-Source
:END:
**** Immune
:PROPERTIES:
:lg-rss: https://immune.libsyn.com/rss
:lg-url-1: http://microbe.tv/immune
:CUSTOM_ID: Immune
:END:
**** Inside Health
:PROPERTIES:
:lg-rss: https://podcasts.files.bbci.co.uk/b019dl1b.rss
:lg-url-1: http://www.bbc.co.uk/programmes/b019dl1b
:CUSTOM_ID: Inside-Health
:END:
**** Kubernetes Podcast from Google
:PROPERTIES:
:lg-rss: https://kubernetespodcast.com/feeds/audio.xml
:lg-url-1: https://kubernetespodcast.com
:CUSTOM_ID: Kubernetes-Podcast-from-Google
:END:
**** La Conversation scientifique
:PROPERTIES:
:lg-rss: http://radiofrance-podcast.net/podcast09/rss_13957.xml
:lg-url-1: https://www.franceculture.fr/emissions/la-conversation-scientifique
:CUSTOM_ID: La-Conversation-scientifique
:END:
**** La Méthode scientifique
:PROPERTIES:
:lg-rss: http://radiofrance-podcast.net/podcast09/rss_14312.xml
:lg-url-1: http://www.radiofrance.fr/
:CUSTOM_ID: La-Méthode-scientifique
:END:
**** LambdaCast
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:239787249/sounds.rss
:lg-url-1: https://www.patreon.com/lambdacast
:CUSTOM_ID: LambdaCast
:END:
**** Leonardo Plus
:PROPERTIES:
:lg-rss: https://api.rozhlas.cz/data/v2/podcast/show/6482961.rss
:lg-url-1: https://portal.rozhlas.cz/leonardo-plus-6482961
:CUSTOM_ID: Leonardo-Plus
:END:
**** Lex Fridman Podcast
:PROPERTIES:
:lg-rss: https://lexfridman.com/feed/podcast/
:lg-url-1: https://lexfridman.com/podcast
:CUSTOM_ID: Lex-Fridman-Podcast
:END:
**** Linux Action News
:PROPERTIES:
:lg-rss: https://linuxactionnews.com/rss
:lg-url-1: https://linuxactionnews.com
:CUSTOM_ID: Linux-Action-News
:END:
**** LINUX Unplugged
:PROPERTIES:
:lg-rss: https://feeds.fireside.fm/linuxunplugged/rss
:lg-url-1: https://linuxunplugged.com
:CUSTOM_ID: LINUX-Unplugged
:END:
**** Magic Read Along
:PROPERTIES:
:lg-rss: http://www.magicreadalong.com/episode?format=rss
:lg-url-1: http://www.magicreadalong.com/
:CUSTOM_ID: Magic-Read-Along
:END:
**** Maintainable
:PROPERTIES:
:lg-rss: https://feeds.simplecast.com/7y1CbAbN
:lg-url-1: https://maintainable.fm
:CUSTOM_ID: Maintainable
:END:
**** Malicious Life
:PROPERTIES:
:lg-rss: https://malicious.life/feed/podcast/
:lg-url-1: https://malicious.life
:CUSTOM_ID: Malicious-Life
:END:
**** Mobycast
:PROPERTIES:
:lg-rss: https://api.timber.fm/feeds/mobycast
:lg-url-1: https://mobycast.fm
:CUSTOM_ID: Mobycast
:END:
**** Naked Genetics, from the Naked Scientists
:PROPERTIES:
:lg-rss: https://www.thenakedscientists.com/rss/naked_genetics.xml
:lg-url-1: https://www.thenakedscientists.com/podcasts/naked-genetics
:CUSTOM_ID: Naked-Genetics-from-the-Naked-Scientists
:END:
**** NYC Haskell User's Group
:PROPERTIES:
:lg-rss: https://youtubecast.madriska.com/user/UCzNYHE7Kj6pBqq5h8LG9Zcg
:lg-url-1: https://youtubecast.madriska.com/user/UCzNYHE7Kj6pBqq5h8LG9Zcg
:CUSTOM_ID: NYC-Haskell-User's-Group
:END:
**** Ockham’s Razor
:PROPERTIES:
:lg-rss: http://www.abc.net.au/radionational/feed/2883682/podcast.xml
:lg-url-1: http://www.abc.net.au/radionational/programs/ockhamsrazor/
:CUSTOM_ID: Ockham-s-Razor
:END:
**** omega tau - science &amp; engineering [English only]
:PROPERTIES:
:lg-rss: http://omegataupodcast.net/englishOnly.php
:lg-url-1: http://omegataupodcast.net
:CUSTOM_ID: omega-tau-science-amp-engineering-English-only
:END:
**** omega tau - wissenschaft &amp; technik [nur Deutsch]
:PROPERTIES:
:lg-rss: http://omegataupodcast.net/nurDeutsch.php
:lg-url-1: http://omegataupodcast.net
:CUSTOM_ID: omega-tau-wissenschaft-amp-technik-nur-Deutsch
:END:
**** Parallel and Concurrent Haskell
:PROPERTIES:
:lg-rss: https://mytube.maljubeh.com/playlist?list=PLbgaMIhjbmEm_51-HWv9BQUXcmHYtl4sw
:lg-url-1: https://www.youtube.com/playlist?list=PLbgaMIhjbmEm_51-HWv9BQUXcmHYtl4sw
:CUSTOM_ID: Parallel-and-Concurrent-Haskell
:END:
**** Pátečníci
:PROPERTIES:
:lg-rss: https://anchor.fm/s/125c68b0/podcast/rss
:lg-url-1: http://www.patecnici.net/
:CUSTOM_ID: PÁTEČNÍCI_PODCAST
:END:
**** Planetárium
:PROPERTIES:
:lg-rss: https://api.rozhlas.cz/data/v2/podcast/show/6826205.rss
:lg-url-1: https://portal.rozhlas.cz/planetarium-6826205
:CUSTOM_ID: Planetárium
:END:
**** Podcast Science
:PROPERTIES:
:lg-rss: HTTP://feeds.feedburner.com/podcastscience
:lg-url-1: http://www.podcastscience.fm
:CUSTOM_ID: Podcast-Science
:END:
**** PodCTL - Enterprise Kubernetes
:PROPERTIES:
:lg-rss: https://feeds.buzzsprout.com/110399.rss
:lg-url-1: http://blog.openshift.com
:CUSTOM_ID: PodCTL-Enterprise-Kubernetes
:END:
**** Reason Town
:PROPERTIES:
:lg-rss: https://anchor.fm/s/79070e8/podcast/rss
:lg-url-1: https://reason.town
:CUSTOM_ID: Reason-Town
:END:
**** Scaling Postgres
:PROPERTIES:
:lg-rss: https://scalingpostgres.libsyn.com/rss
:lg-url-1: https://www.scalingpostgres.com
:CUSTOM_ID: Scaling-Postgres
:END:
**** Science Café
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:11069813/sounds.rss
:lg-url-1: http://www.sciencecafe.cz
:CUSTOM_ID: Science-Café
:END:
**** Sciences pour tous
:PROPERTIES:
:lg-rss: http://campus.univ-lyon1.fr/wp-content/uploads/podcast/podcast_sciences-pour-tous_fr-flux.xml
:lg-url-1: http://sciencespourtous.univ-lyon1.fr/
:CUSTOM_ID: Sciences-pour-tous
:END:
**** Self-Hosted
:PROPERTIES:
:lg-rss: https://feeds.fireside.fm/selfhosted/rss
:lg-url-1: https://selfhosted.show
:CUSTOM_ID: Self-Hosted
:END:
**** Smart Drug Smarts: Brain Optimization | Nootropics | Neuroscience
:PROPERTIES:
:lg-rss: https://smartdrugsmarts.com/feed/podcast
:lg-url-1: https://smartdrugsmarts.com
:CUSTOM_ID: Smart-Drug-Smarts-Brain-Optimization-Nootropics-Neuroscience
:END:
**** Software Defined Talk
:PROPERTIES:
:lg-rss: https://feeds.fireside.fm/sdt/rss
:lg-url-1: https://www.softwaredefinedtalk.com
:CUSTOM_ID: Software-Defined-Talk
:END:
**** Software Engineering Radio - the podcast for professional software developers
:PROPERTIES:
:lg-rss: https://seradio.libsyn.com/rss
:lg-url-1: http://www.se-radio.net
:CUSTOM_ID: Software-Engineering-Radio-the-podcast-for-professional-software-developers
:END:
**** Software Engineering Unlocked
:PROPERTIES:
:lg-rss: https://feeds.simplecast.com/K1_mv0CJ
:lg-url-1: https://www.software-engineering-unlocked.com
:CUSTOM_ID: Software-Engineering-Unlocked
:END:
**** Strange Loop
:PROPERTIES:
:lg-rss: https://audiobookpodcast.azurewebsites.net/List/Download/?book=Strange%20Loop
:lg-url-1: http://audiobookpodcast.azurewebsites.net
:CUSTOM_ID: Strange-Loop
:END:
**** Stuff You Should Know
:PROPERTIES:
:lg-rss: https://feeds.megaphone.fm/stuffyoushouldknow
:lg-url-1: https://www.howstuffworks.com
:CUSTOM_ID: Stuff-You-Should-Know
:END:
**** Tabs and Spaces Podcast
:PROPERTIES:
:lg-rss: https://tabsandspaces.libsyn.com/rss
:lg-url-1: https://tabsandspaces.io
:CUSTOM_ID: Tabs-and-Spaces-Podcast
:END:
**** Tech Done Right
:PROPERTIES:
:lg-rss: https://feeds.fireside.fm/techdoneright/rss
:lg-url-1: https://www.techdoneright.io
:CUSTOM_ID: Tech-Done-Right
:END:
**** The Cloud Native Show
:PROPERTIES:
:lg-rss: https://anchor.fm/s/4474574/podcast/rss
:lg-url-1: https://rackner.com
:CUSTOM_ID: The-Cloud-Native-Show
:END:
**** The Frontside Podcast
:PROPERTIES:
:lg-rss: https://rss.simplecast.com/podcasts/96/rss
:lg-url-1: https://frontside.io
:CUSTOM_ID: The-Frontside-Podcast
:END:
**** The Haskell Cast
:PROPERTIES:
:lg-rss: http://www.haskellcast.com/feed.xml
:lg-url-1: http://www.haskellcast.com
:CUSTOM_ID: The-Haskell-Cast
:END:
**** The InfoQ Podcast
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:215740450/sounds.rss
:lg-url-1: http://bit.ly/1Xc6w4R
:CUSTOM_ID: The-InfoQ-Podcast
:END:
**** The K Files
:PROPERTIES:
:lg-rss: https://feeds.buzzsprout.com/812318.rss
:lg-url-1: https://k8sfiles.com
:CUSTOM_ID: The-K-Files
:END:
**** The Naked Scientists Podcast
:PROPERTIES:
:lg-rss: https://www.thenakedscientists.com/naked_scientists_podcast.xml
:lg-url-1: https://www.thenakedscientists.com/podcasts/naked-scientists-podcast
:CUSTOM_ID: The-Naked-Scientists-Podcast
:END:
**** The New Stack @ Scale
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:172286536/sounds.rss
:lg-url-1: http://thenewstack.io
:CUSTOM_ID: The-New-Stack-Scale
:END:
**** The New Stack Analysts
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:94518611/sounds.rss
:lg-url-1: http://thenewstack.io
:CUSTOM_ID: The-New-Stack-Analysts
:END:
**** The New Stack Context
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:231433999/sounds.rss
:lg-url-1: http://thenewstack.io/
:CUSTOM_ID: The-New-Stack-Context
:END:
**** The New Stack Makers
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:107605642/sounds.rss
:lg-url-1: http://soundcloud.com/thenewstackmakers
:CUSTOM_ID: The-New-Stack-Makers
:END:
**** The Numberphile Podcast
:PROPERTIES:
:lg-rss: https://www.numberphile.com/podcast?format=rss
:lg-url-1: https://www.numberphile.com/podcast/
:CUSTOM_ID: The-Numberphile-Podcast
:END:
**** The Privacy, Security, &amp; OSINT Show
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:261098918/sounds.rss
:lg-url-1: http://soundcloud.com/user-98066669
:CUSTOM_ID: The-Privacy-Security-amp-OSINT-Show
:END:
**** The Psych Files
:PROPERTIES:
:lg-rss: https://audioboom.com/channels/4847417.rss
:lg-url-1: https://audioboom.com/channel/the-psych-files
:CUSTOM_ID: The-Psych-Files
:END:
**** The Readout Loud
:PROPERTIES:
:lg-rss: http://feeds.soundcloud.com/users/soundcloud:users:400438029/sounds.rss
:lg-url-1: http://soundcloud.com/readout-loud
:CUSTOM_ID: The-Readout-Loud
:END:
**** The Stack Overflow Podcast
:PROPERTIES:
:lg-rss: https://feeds.simplecast.com/XA_851k3
:lg-url-1: https://stackoverflow.blog/podcast/
:CUSTOM_ID: The-Stack-Overflow-Podcast
:END:
**** The Undefined Podcast
:PROPERTIES:
:lg-rss: https://feeds.simplecast.com/8lcA0Is7
:lg-url-1: https://undefined.fm
:CUSTOM_ID: The-Undefined-Podcast
:END:
**** The Web Platform Podcast
:PROPERTIES:
:lg-rss: https://thewebplatform.libsyn.com/rss
:lg-url-1: https://thewebplatformpodcast.com/
:CUSTOM_ID: The-Web-Platform-Podcast
:END:
**** This Week in Evolution
:PROPERTIES:
:lg-rss: https://twievo.libsyn.com/rss
:lg-url-1: http://microbe.tv/twievo
:CUSTOM_ID: This-Week-in-Evolution
:END:
**** This Week in Microbiology
:PROPERTIES:
:lg-rss: http://twimshow.microbeworld.libsynpro.com/rss
:lg-url-1: http://www.asm.org/twim/
:CUSTOM_ID: This-Week-in-Microbiology
:END:
**** This Week in Virology
:PROPERTIES:
:lg-rss: http://twiv.microbeworld.libsynpro.com/twiv
:lg-url-1: http://www.microbe.tv/twiv
:CUSTOM_ID: This-Week-in-Virology
:END:
**** Ubuntu Podcast
:PROPERTIES:
:lg-rss: https://ubuntupodcast.org/feed/podcast
:lg-url-1: https://ubuntupodcast.org
:CUSTOM_ID: Ubuntu-Podcast
:END:
**** Unlearn
:PROPERTIES:
:lg-rss: https://feeds.megaphone.fm/unlearn
:lg-url-1: https://barryoreilly.com/podcast
:CUSTOM_ID: Unlearn
:END:
**** Věda na doma
:PROPERTIES:
:lg-rss: https://anchor.fm/s/18ca4c58/podcast/rss
:lg-url-1: https://anchor.fm/akademieved
:CUSTOM_ID: Věda-na-doma
:END:
**** Wissenschaft | Deutsche Welle
:PROPERTIES:
:lg-rss: https://rss.dw.com/xml/podcast_Wissenschaft
:lg-url-1: http://www.dw.de/dw/0,,12296,00.html?maca=de-podcast_wissenschaft-1688-xml-mrss
:CUSTOM_ID: Wissenschaft-Deutsche-Welle
:END:
**** You Are Not So Smart
:PROPERTIES:
:lg-rss: https://www.omnycontent.com/d/playlist/aaea4e69-af51-495e-afc9-a9760146922b/da047861-7121-4447-8ccb-ab1a00165c0e/337ad035-d2e9-4942-9e4d-ab1a00165c1c/podcast.rss
:lg-url-1: http://www.youarenotsosmart.com/
:CUSTOM_ID: You-Are-Not-So-Smart
:END:

** Videoteka
:PROPERTIES:
:CUSTOM_ID: Videoteka
:END:
*** FDP
:PROPERTIES:
:CUSTOM_ID: FDP
:END:
**** Jiří Podolský - E=mc2 a jaderná energie: Epizoda I (MFF FDP 2.3.2017)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:55]
:lg-authors: Jiří%20Podolský
:lg-subject: E=mc2 a jaderná energie: Epizoda I
:CUSTOM_ID: Jiří-Podolský-E-mc2-a-jaderná-energie-Epizoda-I-MFF-FDP-2-3-2017
:END:

https://youtu.be/mP-DqZeYnyM

**** Jiří Podolský - E=mc2 a jaderná energie: Epizoda II (MFF FDP 9.3.2017)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:52]
:lg-authors: Jiří%20Podolský
:lg-subject: Jiří Podolský - E=mc2 a jaderná energie: Epizoda II (MFF FDP 9.3.2017)
:CUSTOM_ID: Jiří-Podolský-E-mc2-a-jaderná-energie-Epizoda-II-MFF-FDP-9-3-2017
:END:

https://youtu.be/PNHPHeDcub0

**** Podolský, Cejnar - Génius Einstein v Praze po 100 letech, fikce a skutečnost (MFF FDP 11.5.2017)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:52]
:lg-subject: Podolský, Cejnar - Génius Einstein v Praze po 100 letech, fikce a skutečnost (MFF FDP 11.5.2017)
:CUSTOM_ID: Podolský-Cejnar-Génius-Einstein-v-Praze-po-100-letech-fikce-a-skutečnost-MFF-FDP-11-5-2017
:END:

https://youtu.be/iQHDGX-mO-w

**** Podolský, Cejnar, ... - Génius Einstein v Praze po 100 letech, pohled do zákulisí (MFF FDP 4.5.2017)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:53]
:lg-subject: Podolský, Cejnar, ... - Génius Einstein v Praze po 100 letech, pohled do zákulisí (MFF FDP 4.5.2017)
:CUSTOM_ID: Podolský-Cejnar-Génius-Einstein-v-Praze-po-100-letech-pohled-do-zákulisí-MFF-FDP-4-5-2017
:END:

https://youtu.be/WHAuEisOUBU

**** Jiří Podolský - Kosmos jako celek – co o něm dnes víme? (MFF FDP 16.3.2017)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:53]
:lg-authors: Jiří%20Podolský
:lg-subject: Jiří Podolský - Kosmos jako celek – co o něm dnes víme? (MFF FDP 16.3.2017)
:CUSTOM_ID: Jiří-Podolský-Kosmos-jako-celek-co-o-něm-dnes-víme-MFF-FDP-16-3-2017
:END:

https://youtu.be/iE-E7oJAyNE
*** MFF FJDP
:PROPERTIES:
:CUSTOM_ID: MFF-FJDP
:END:
**** Od Aristotela k Newtonovi
:PROPERTIES:
:CREATED:  [2019-02-27 Wed 21:22]
:lg-serie: MFF FJDP
:lg-authors: Pavel%20Krtouš
:lg-format: Lecture
:lg-yt-url: https://youtu.be/w9ulyaauBIE
:lg-subject: Od Aristotela k Newtonovi
:CUSTOM_ID: Od-Aristotela-k-Newtonovi
:END:

**** Pavel Krtouš - Newton vs. Mach (MFF FJDP 21.2.2019)
:PROPERTIES:
:CREATED:  [2019-03-06 Wed 22:48]
:lg-authors: Pavel%20Krtouš
:lg-subject: Pavel Krtouš - Newton vs. Mach (MFF FJDP 21.2.2019)
:CUSTOM_ID: Pavel-Krtouš-Newton-vs-Mach-MFF-FJDP-21-2-2019
:END:

https://youtu.be/Nao3KDb1DdA

Impetus
Giordano Bruno
Dynamika 2. Řádu
Newton
Gravitační zákon
Principia

**** Jiří Podolský - Astronomie, matka fyziky (MFF FDP 22.2.2018)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 19:04]
:lg-authors: Jiří%20Podolský
:lg-subject: Jiří Podolský - Astronomie, matka fyziky (MFF FDP 22.2.2018)
:CUSTOM_ID: Jiří-Podolský-Astronomie-matka-fyziky-MFF-FDP-22-2-2018
:END:

https://youtu.be/Cxu4jiSiX8Y

**** Jiří Podolský - Zrod matematicky formulované mechaniky (MFF FDP 8.3.2018)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 19:03]
:lg-authors: Jiří%20Podolský
:lg-subject: Jiří Podolský - Zrod matematicky formulované mechaniky (MFF FDP 8.3.2018)
:CUSTOM_ID: Jiří-Podolský-Zrod-matematicky-formulované-mechaniky-MFF-FDP-8-3-2018
:END:

https://youtu.be/y4-SBAKvkAM

**** Jiří Podolský - Heliocentrická revoluce (MFF FJDP 1.3.2018)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 19:02]
:lg-authors: Jiří%20Podolský
:lg-subject: Jiří Podolský - Heliocentrická revoluce (MFF FJDP 1.3.2018)
:CUSTOM_ID: Jiří-Podolský-Heliocentrická-revoluce-MFF-FJDP-1-3-2018
:END:

https://youtu.be/x8rNuE3_Mwk

**** Jiří Podolský - Od hmotných bodů ke spojitým polím (MFF FJDP 15.3.2018)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 19:02]
:lg-authors: Jiří%20Podolský
:lg-subject: Jiří Podolský - Od hmotných bodů ke spojitým polím (MFF FJDP 15.3.2018)
:CUSTOM_ID: Jiří-Podolský-Od-hmotných-bodů-ke-spojitým-polím-MFF-FJDP-15-3-2018
:END:

https://youtu.be/C_Vhx9UfXf0

**** Jiří Podolský - Gravitace jako deformace prostoročasu (MFF FJDP 29.3.2018)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:56]
:lg-authors: Jiří%20Podolský
:lg-subject: Jiří Podolský - Gravitace jako deformace prostoročasu (MFF FJDP 29.3.2018)
:CUSTOM_ID: Jiří-Podolský-Gravitace-jako-deformace-prostoročasu-MFF-FJDP-29-3-2018
:END:

https://youtu.be/K_Xa0T9So6w

*** Pátečníci
:PROPERTIES:
:CUSTOM_ID: Pátečníci
:END:
**** Martin Wihoda - Velká Morava a její místo v dějinách (Pátečníci 13.4.2018)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:59]
:lg-subject: Martin Wihoda - Velká Morava a její místo v dějinách (Pátečníci 13.4.2018)
:CUSTOM_ID: Martin-Wihoda-Velká-Morava-a-její-místo-v-dějinách-Pátečníci-13-4-2018
:END:

https://youtu.be/5o8fhcOgU24

**** Petr Slavíček - Minulost a budoucnost periodické tabulky prvků (Pátečníci 18.1.2019)
:PROPERTIES:
:CREATED:  [2019-03-04 Mon 22:56]
:lg-authors: Petr%20Slavíček
:lg-subject: Petr Slavíček - Minulost a budoucnost periodické tabulky prvků (Pátečníci 18.1.2019)
:CUSTOM_ID: Petr-Slavíček-Minulost-a-budoucnost-periodické-tabulky-prvků-Pátečníci-18-1-2019
:END:

https://youtu.be/x5paMKAhPCs

**** Jiří Grygar - Alfred kontra Ignác Nobel - pompa a kabaret (Pátečníci 12.5.2017)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:12]
:lg-subject: Jiří Grygar - Alfred kontra Ignác Nobel - pompa a kabaret (Pátečníci 12.5.2017)
:CUSTOM_ID: Jiří-Grygar-Alfred-kontra-Ignác-Nobel-pompa-a-kabaret-Pátečníci-12-5-2017
:END:

https://youtu.be/Fq-VRTrLc_k

**** Julius Lukeš - Mikrobi v nás (Pátečníci 29.6.2018)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:15]
:lg-subject: Julius Lukeš - Mikrobi v nás (Pátečníci 29.6.2018)
:CUSTOM_ID: Julius-Lukeš-Mikrobi-v-nás-Pátečníci-29-6-2018
:END:

https://youtu.be/5kqace415RA

**** Jaroslav Kousal - Žhavé konce kosmických letů (Pátečníci 1.9.2017)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:15]
:lg-subject: Jaroslav Kousal - Žhavé konce kosmických letů (Pátečníci 1.9.2017)
:CUSTOM_ID: Jaroslav-Kousal-Žhavé-konce-kosmických-letů-Pátečníci-1-9-2017
:END:

https://youtu.be/-p3YqlPywiQ

**** Ludmila Hamplová - Hoaxy v medicíně (Pátečníci 15.6.2018)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:14]
:lg-subject: Ludmila Hamplová - Hoaxy v medicíně (Pátečníci 15.6.2018)
:CUSTOM_ID: Ludmila-Hamplová-Hoaxy-v-medicíně-Pátečníci-15-6-2018
:END:

https://youtu.be/7NfV3omWwd8

*** ÚMKP
:PROPERTIES:
:CUSTOM_ID: ÚMKP
:END:
**** Kde se bere naše "já"? (ÚMKP, NÚDZ 3.4.2017)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 19:02]
:lg-authors: Filip%20Španiel
:lg-subject: Kde se bere naše "já"? (ÚMKP, NÚDZ 3.4.2017)
:CUSTOM_ID: Kde-se-bere-naše-já-ÚMKP-NÚDZ-3-4-2017
:END:

https://youtu.be/ksSza5L2ph4

**** Lukáš Pekárek - Ze života virů (ÚMKP, BC 25.2.2019)
:PROPERTIES:
:CREATED:  [2019-03-06 Wed 22:03]
:lg-authors: Lukáš%20Pekárek
:lg-subject: Lukáš Pekárek - Ze života virů (ÚMKP, BC 25.2.2019)
:CUSTOM_ID: Lukáš-Pekárek-Ze-života-virů-ÚMKP-BC-25-2-2019
:END:

https://youtu.be/wOvCG4bEfDE



Viri se liší mezi sebou o 30%
Jsou tak geneticky rozdílné že neumíme najít společného předka
Reverzní transkripce

Lionel Messi. Nanismus
EPO
Insuline
Sincitin
Endogenní retrovirus tvorba placenty

*** Neurazitelny.cz
:PROPERTIES:
:CUSTOM_ID: Neurazitelny-cz
:END:
**** Omyly ve vědě - Petr Slavíček  Neurazitelny.cz  Večery na FF UK
:PROPERTIES:
:CREATED:  [2019-03-04 Mon 22:58]
:lg-subject: Omyly ve vědě - Petr Slavíček  Neurazitelny.cz  Večery na FF UK
:CUSTOM_ID: Omyly-ve-vědě-Petr-Slavíček-Neurazitelny-cz-Večery-na-FF-UK
:END:

https://youtu.be/keJbMu2SRnk

**** Kritické myšlení - Úvod do rozpoznávání keců | Neurazitelny.cz | Večery na FF UK
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:11]
:lg-subject: Kritické myšlení - Úvod do rozpoznávání keců | Neurazitelny.cz | Večery na FF UK
:CUSTOM_ID: Kritické-myšlení-Úvod-do-rozpoznávání-keců-Neurazitelny-cz-Večery-na-FF-UK
:END:

https://youtu.be/AdRNgEktsvo

**** Cyril Höschl: Dřív nebyla šance šířit blbosti tak rychle jako dnes | Neurazitelny.cz | Stůl pro tři
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:06]
:lg-subject: Cyril Höschl: Dřív nebyla šance šířit blbosti tak rychle jako dnes | Neurazitelny.cz | Stůl pro tři
:CUSTOM_ID: Cyril-Höschl-Dřív-nebyla-šance-šířit-blbosti-tak-rychle-jako-dnes-Neurazitelny-cz-Stůl-pro-tři
:END:

https://youtu.be/qqQ89pvydsI

*** Biologické čtvrtky ve Viničné
:PROPERTIES:
:CUSTOM_ID: Biologické-čtvrtky-ve-Viničné
:END:
**** R. Kopecký: Autonomní agent s povolením zabíjet; přednáška
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:07]
:lg-subject: Biologické čtvrtky ve Viničné; R. Kopecký: Autonomní agent s povolením zabíjet; přednáška
:lg-serie: Biologické čtvrtky ve Viničné
:CUSTOM_ID: R-Kopecký-Autonomní-agent-s-povolením-zabíjet-přednáška
:END:

https://youtu.be/9cBfxe7FdOg

**** I. Horáček: Nezamrzlá evoluce; přednáška
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:12]
:lg-subject: Biologické čtvrtky ve Viničné; I. Horáček: Nezamrzlá evoluce; přednáška
:lg-serie: Biologické čtvrtky ve Viničné
:CUSTOM_ID: I-Horáček-Nezamrzlá-evoluce-přednáška
:END:

https://youtu.be/tpVKpBaj418

**** Čest tlouštíkům, sláva epitranskriptomu!
:PROPERTIES:
:CREATED:  [2019-03-01 Fri 22:05]
:lg-serie: Biologické čtvrtky ve Viničné
:lg-authors: Petr%20Telenský
:lg-format: Lecture
:lg-subject: Čest tlouštíkům, sláva epitranskriptomu!
:CUSTOM_ID: Čest-tlouštíkům-sláva-epitranskriptomu
:END:

https://youtu.be/5Dc6bExXkV4

:TRIVIA:
Jste tlustý
Máte tlustý děti
Dostanete cukrovku
Dostanete rakovinu
Nejhorší je že z toho zblbnete
:END:

*** Jiří Podolský - Feynmanova ztracená přednáška (MFF-PMF 20.12.2018)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:03]
:lg-subject: Jiří Podolský - Feynmanova ztracená přednáška (MFF-PMF 20.12.2018)
:CUSTOM_ID: Jiří-Podolský-Feynmanova-ztracená-přednáška-MFF-PMF-20-12-2018
:END:

https://youtu.be/Un0MOt7o6R8

*** Pavel Cejnar - Nanosvět a kvantové počítání (MFF-PMF 6.12.2018)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:06]
:lg-subject: Pavel Cejnar - Nanosvět a kvantové počítání (MFF-PMF 6.12.2018)
:CUSTOM_ID: Pavel-Cejnar-Nanosvět-a-kvantové-počítání-MFF-PMF-6-12-2018
:END:

https://youtu.be/XERC54B0eSs

*** Luboš Pick - Jak napálit matfyzáka (MFF-FPF 14.12.2017)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:35]
:lg-subject: Luboš Pick - Jak napálit matfyzáka (MFF-FPF 14.12.2017)
:CUSTOM_ID: Luboš-Pick-Jak-napálit-matfyzáka-MFF-FPF-14-12-2017
:END:

https://youtu.be/tB_z17TBrNg

*** The Royal Institution
:PROPERTIES:
:CUSTOM_ID: The-Royal-Institution
:END:
**** How to Think Like a Mathematician - with Eugenia Cheng
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:58]
:lg-subject: How to Think Like a Mathematician - with Eugenia Cheng
:CUSTOM_ID: How-to-Think-Like-a-Mathematician-with-Eugenia-Cheng
:END:

https://youtu.be/8emPcpfqPRU

**** Linguistics, Style and Writing in the 21st Century - with Steven Pinker
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:58]
:lg-subject: Linguistics, Style and Writing in the 21st Century - with Steven Pinker
:CUSTOM_ID: Linguistics-Style-and-Writing-in-the-21st-Century-with-Steven-Pinker
:END:

https://youtu.be/OV5J6BfToSw

**** Q&A - Linguistics, Style and Writing - with Steven Pinker
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:59]
:lg-subject: Q&A - Linguistics, Style and Writing - with Steven Pinker
:CUSTOM_ID: Q-A-Linguistics-Style-and-Writing-with-Steven-Pinker
:END:

https://youtu.be/7rYAnYXIhL0

**** How the Wiring of Our Brains Shapes Who We Are - with Kevin Mitchell
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:59]
:lg-subject: How the Wiring of Our Brains Shapes Who We Are - with Kevin Mitchell
:CUSTOM_ID: How-the-Wiring-of-Our-Brains-Shapes-Who-We-Are-with-Kevin-Mitchell
:END:

https://youtu.be/SkJqkGX0ThQ

**** How We Measure the World - with Michael de Podesta
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:00]
:lg-subject: How We Measure the World - with Michael de Podesta
:CUSTOM_ID: How-We-Measure-the-World-with-Michael-de-Podesta
:END:

https://youtu.be/dguZLChkRV8

**** Topology, Geometry and Life in Three Dimensions
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:01]
:lg-subject: Topology, Geometry and Life in Three Dimensions
:CUSTOM_ID: Topology-Geometry-and-Life-in-Three-Dimensions
:END:

https://youtu.be/K60F97qChKg

**** The Physics and Philosophy of Time - with Carlo Rovelli
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:03]
:lg-subject: The Physics and Philosophy of Time - with Carlo Rovelli
:CUSTOM_ID: The-Physics-and-Philosophy-of-Time-with-Carlo-Rovelli
:END:

https://youtu.be/-6rWqJhDv7M

**** Q&A The Physics and Philosophy of Time - with Carlo Rovelli
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:03]
:lg-subject: Q&A The Physics and Philosophy of Time - with Carlo Rovelli
:CUSTOM_ID: Q-A-The-Physics-and-Philosophy-of-Time-with-Carlo-Rovelli
:END:

https://youtu.be/NXcu0BlbTrM

*** Marek Vácha - Podněty moderní biomedicíny pro filosofii a etiku (11. hodina)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:49]
:lg-subject: Podněty moderní biomedicíny pro filosofii a etiku (11. hodina)
:CUSTOM_ID: Marek-Vácha-Podněty-moderní-biomedicíny-pro-filosofii-a-etiku-11-hodina
:END:

https://youtu.be/NCme5BSwNv0

*** Marek Vácha - Podněty moderní biomedicíny pro filosofii a etiku (10. hodina)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:59]
:lg-subject: Marek Vácha - Podněty moderní biomedicíny pro filosofii a etiku (10. hodina)
:CUSTOM_ID: Marek-Vácha-Podněty-moderní-biomedicíny-pro-filosofii-a-etiku-10-hodina
:END:

https://youtu.be/KdEYVJB56CI

*** Marek Orko Vácha, Miloslav Nevrlý - 22. 5. 2017 - Knihkupectví a antikvariát Fryč
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:36]
:lg-subject: Marek Orko Vácha, Miloslav Nevrlý - 22. 5. 2017 - Knihkupectví a antikvariát Fryč
:CUSTOM_ID: Marek-Orko-Vácha-Miloslav-Nevrlý-22-5-2017-Knihkupectví-a-antikvariát-Fryč
:END:

https://youtu.be/8RKjEtHU4SY

*** Stanislav Novotný - 60 let formátu Cinemascope (Krnov - Festival 70mm filmů 14.04.2013)
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:58]
:lg-subject: Stanislav Novotný - 60 let formátu Cinemascope (Krnov - Festival 70mm filmů 14.04.2013)
:CUSTOM_ID: Stanislav-Novotný-60-let-formátu-Cinemascope-Krnov-Festival-70mm-filmů-14-04-2013
:END:

https://youtu.be/oG4VtTGAssA

*** Mgr. Jakub Rozehnal, Akustický vesmír
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 19:00]
:lg-subject: Mgr. Jakub Rozehnal, Akustický vesmír
:CUSTOM_ID: Mgr-Jakub-Rozehnal-Akustický-vesmír
:END:

https://youtu.be/VYjSboE9ZE4

*** Bohdan Zronek – ředitel Divize jaderná energetika ČEZ, a.s. na FEL
:PROPERTIES:
:CREATED:  [2018-08-23 Thu 18:54]
:lg-subject: Bohdan Zronek – ředitel Divize jaderná energetika ČEZ, a.s. na FEL
:CUSTOM_ID: Bohdan-Zronek-ředitel-Divize-jaderná-energetika-ČEZ-a-s-na-FEL
:END:

https://youtu.be/LuVOB2peyno

*** Komunisti vlevo, TOP 09 vpravo a kde je ANO? Aneb jak změřit, kdo je pravičák a kdo levičák
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:18]
:lg-subject: Komunisti vlevo, TOP 09 vpravo a kde je ANO? Aneb jak změřit, kdo je pravičák a kdo levičák
:CUSTOM_ID: Komunisti-vlevo-TOP-09-vpravo-a-kde-je-ANO-Aneb-jak-změřit-kdo-je-pravičák-a-kdo-levičák
:END:

https://youtu.be/I2A3H3caQsg

*** Ještě dnes buď větším egoistou! O konzumní povaze naší doby
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:33]
:lg-subject: Ještě dnes buď větším egoistou! O konzumní povaze naší doby
:CUSTOM_ID: Ještě-dnes-buď-větším-egoistou-O-konzumní-povaze-naší-doby
:END:

https://youtu.be/qg7m0ax3A1g

*** Detektivem v přírodě
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:34]
:lg-subject: Detektivem v přírodě
:CUSTOM_ID: Detektivem-v-přírodě
:END:

https://youtu.be/EiVyLvQ2PrU

*** Stručná historie (západní) vědy
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:39]
:lg-subject: Stručná historie (západní) vědy
:CUSTOM_ID: Stručná-historie-západní-vědy
:END:

https://youtu.be/P1TGfNS3vmA

*** Zdravotné benefity a riziká kondičného tréningu
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 18:40]
:lg-subject: Zdravotné benefity a riziká kondičného tréningu
:CUSTOM_ID: Zdravotné-benefity-a-riziká-kondičného-tréningu
:END:

https://youtu.be/Hhd_XASTzng

*** Science to Go: Richard Feynman
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:05]
:lg-subject: Science to Go: Richard Feynman
:CUSTOM_ID: Science-to-Go-Richard-Feynman
:END:

https://youtu.be/8JrzL3GM7fM

*** Psychedelický mozek a vědomí očima neurovědce
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:06]
:lg-subject: Psychedelický mozek a vědomí očima neurovědce
:CUSTOM_ID: Psychedelický-mozek-a-vědomí-očima-neurovědce
:END:

https://youtu.be/x2chY8beAxI

*** Ing. Dana Drábová, Ph.D., Dobrý sluha ale zlý pán aneb jaderná energetika 30 let po Černobylu
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:08]
:lg-subject: Ing. Dana Drábová, Ph.D., Dobrý sluha ale zlý pán aneb jaderná energetika 30 let po Černobylu
:CUSTOM_ID: Ing-Dana-Drábová-Ph-D-Dobrý-sluha-ale-zlý-pán-aneb-jaderná-energetika-30-let-po-Černobylu
:END:

https://youtu.be/8VgXlNqcnoI

*** Mgr. Ondřej Vencálek, Ph.D., Výprava do světa podivuhodných náhod
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:10]
:lg-subject: Mgr. Ondřej Vencálek, Ph.D., Výprava do světa podivuhodných náhod
:CUSTOM_ID: Mgr-Ondřej-Vencálek-Ph-D-Výprava-do-světa-podivuhodných-náhod
:END:

https://youtu.be/4jE_b3nenQo

*** Martin C. Putna - 16. 10. 2018 - Knihkupectví a antikvariát Fryč
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:10]
:lg-subject: Martin C. Putna - 16. 10. 2018 - Knihkupectví a antikvariát Fryč
:CUSTOM_ID: Martin-C-Putna-16-10-2018-Knihkupectví-a-antikvariát-Fryč
:END:

https://youtu.be/MNJZbNGX7qE

*** Václav Moravec   Dezinformace a jak se jim bránit
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:11]
:lg-subject: Václav Moravec   Dezinformace a jak se jim bránit
:CUSTOM_ID: Václav-Moravec-Dezinformace-a-jak-se-jim-bránit
:END:

https://youtu.be/mwLUwGWBH54

*** Jak se děti učí mluvit
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:11]
:lg-subject: Jak se děti učí mluvit
:CUSTOM_ID: Jak-se-děti-učí-mluvit
:END:

https://youtu.be/FQBtoilbLpw

*** Jiří Horáček - Nové modely fungování lidské mysli (ÚMKP, NUDZ 17.9.2018)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:12]
:lg-subject: Jiří Horáček - Nové modely fungování lidské mysli (ÚMKP, NUDZ 17.9.2018)
:CUSTOM_ID: Jiří-Horáček-Nové-modely-fungování-lidské-mysli-ÚMKP-NUDZ-17-9-2018
:END:

https://youtu.be/C7eKPlTks7k

*** Tomáš Přibyl, Když padají rakety
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:13]
:lg-subject: Tomáš Přibyl, Když padají rakety
:CUSTOM_ID: Tomáš-Přibyl-Když-padají-rakety
:END:

https://youtu.be/7VC19mNfs14

*** Science Café OU - Etika výzkumu: Smí věda úplně všechno? A může jí v tom etika zabránit? - dr. Šiler
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:14]
:lg-subject: Science Café OU - Etika výzkumu: Smí věda úplně všechno? A může jí v tom etika zabránit? - dr. Šiler
:CUSTOM_ID: Science-Café-OU-Etika-výzkumu-Smí-věda-úplně-všechno-A-může-jí-v-tom-etika-zabránit-dr-Šiler
:END:

https://youtu.be/mjvWlTvG_yQ

*** .pod lampou: Prvá sekunda vesmíru 5.7.2015
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:14]
:lg-subject: .pod lampou: Prvá sekunda vesmíru 5.7.2015
:CUSTOM_ID: pod-lampou-Prvá-sekunda-vesmíru-5-7-2015
:END:

https://youtu.be/dkoriLH_5-o

*** Marek Orko Vácha: od eugeniky 19. století po projekt lidského genomu (15. 4. 2015)
:PROPERTIES:
:CREATED:  [2019-03-08 Fri 19:16]
:lg-subject: Marek Orko Vácha: od eugeniky 19. století po projekt lidského genomu (15. 4. 2015)
:CUSTOM_ID: Marek-Orko-Vácha-od-eugeniky-19-století-po-projekt-lidského-genomu-15-4-2015
:END:

https://youtu.be/cI390zLJc3I

*** Nové záludné otázky z astronomie - prof. Mikulášek, 28.2.2019, UFY PřF JU
:PROPERTIES:
:CREATED:  [2019-03-09 Sat 13:00]
:lg-subject: Nové záludné otázky z astronomie - prof. Mikulášek, 28.2.2019, UFY PřF JU
:CUSTOM_ID: Nové-záludné-otázky-z-astronomie-prof-Mikulášek-28-2-2019-UFY-PřF-JU
:END:

https://youtu.be/uHZ5BnKZtsM

Proč  sluneční cykly korelují s počasím?
Je hnědý trpaslík skutečně hnědý
Kolikrát je kilonova větší než nova
Karv je v současnosti na zemí 100 krát více než před tím

*** Eugenia Cheng: To Infinity - and Beyond
:PROPERTIES:
:CREATED:  [2019-03-11 Mon 21:01]
:lg-subject: Eugenia Cheng: To Infinity - and Beyond
:CUSTOM_ID: Eugenia-Cheng-To-Infinity-and-Beyond
:END:

https://youtu.be/cCn45UAjIzI

ingressive vs congressive
Critical thinking.., well name it thinkin
