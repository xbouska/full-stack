#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: d:t  prop:t tags:t |:t


* Architecture
** DDD
*** bounded context
*** ubiquotous language
*** Entity and Value Object
** Messaging
*** queue vs topics
*** delivery: at least once at most once exactly once
* Design principals
** DRY
** KISS
** YAGNI
** DoD
** DoR
** MOSCOW
* Linux
** ssh how to create trust between computers
** awk / sed / grep / bash / tail / head
** ls / ps / htop
** bash 
*** co je to here doc?
** co je to regexp
** NFS
** file types: 
*** block device
*** character device
*** named pipe
*** symlink
** /etc/nsswitch.conf
** /etc/resolv.conf
* Data
** CAP theorem
** Beyond CAP database systems
** ACID
** BASE
** transaction isolation levels
** eventual consistency
** big table
** big query
** slowly moving dimensions
** OLAP vs OLTP
** Apache Drill .. a jeho kamaradi
* Cloud
** IAAS
** FINOPS
** DEVSECOPS
** Cloud native architecture
* K8S: 
** pod
** node
** service mesh
** ingress and exgress?
** etcd
* DEVOPS / SRE
** tools
*** docker 
**** docker file
**** docker compose
*** Chef
*** Puppet, 
*** Ansible
*** Terraform
*** Cloud Formation
*** hashicorp consul
*** hashicorp vault
*** zookeeper
** Observability
*** 3 pillars
**** logs
**** metrics
**** traces
*** Tail Latency
* FE 
** CORS
** React
*** react-hooks a jak se to pouziva?
*** jaky je rozdil mezi React a React native
** The Elm Architecture (TEA)
* IT: 
** co je to bit 
*** XOR, OR, AND, BitShift
** co je to CIDR co je to netmast
** co je to unicode, utf-8, ASCII, EBCDIC
* Java: 
** Java EE
*** access intent
**** optimistic vs pessimistic
** Java 9 - project jigsaw
** Loom
** Diamond operator
** generics
** Co je to Local-Variable Type inference
** Jaky je rozdil mezi hashCode a equals(), co je to contrakt
** JCF:
*** List, Set
*** ArrayList vs LinkedList
*** StringBuilder vs String Buffer vs String
*** BigDecimal vs float

** TODO Spring

* JS: 
** co je to iife
** inheritance model of JS
** hoisting
** event loop
** promisses
** observables
** RxJS
** JS modular system
* BASICS: 
** co je to yaml json xml jaky je mezi nimi rozdil - zamerte se na vyhody ledniho
* FP: 
** functional programming?
** main properties
** Lambda Calculus
*** α-conversion: 
- changing bound variables;
*** β-reduction: 
- applying functions to their arguments;
*** η-reduction: 
- which captures a notion of extensionality.
** Monoid
** Functor
** Applicative
** Monad
** kleisli functor
** Optics
*** Lenses
*** prisms
** recursion schemes
*** catamorphisms
*** anamorphisms
*** hylomorphisms
*** paramorphisms

* LANG:
** co je to Garbage Collector
** strongly typed languages vs weakly typed
* Security:
** LDAP
*** object class
**** inetOrgPerson
*** iod
*** CN, DN, SN,
** owasp top10
** Bock Ciphers
*** ECB, CBC, OFB, CFB, CTR  - what they are
:PROPERTIES:
:study:    https://www.highgo.ca/2019/08/08/the-difference-in-five-modes-in-the-aes-encryption-algorithm/
:END:
*** AES
*** DES
** Hash
*** base64
** co je to symetricka a asymetricka sifra
** bastillion.io
** PKI
** X509
** Oauth2/OIDC
*** grant types:
**** Authorization Code
**** Client Credentials
**** Device Code
**** Refresh Token
**** PKCE
**** (Implicit Flow)
**** (Password Grant)
*** Scope
:answer:
A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf. 
Often, applications will want to make use of the information that has already been created in an online resource.
To do so, the application must ask for authorization to access this information on a user’s behalf. 
When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs,
and the authorization server uses the Scope parameter to respond with the access that was actually granted.
:end:
* OOP:
** jake znate navrhove vzory?
** popist me Abstract Factory 
** Singleton

