#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: d:t  prop:t tags:t |:t


* Architecture & Design
** DDD                                                             :SUBJECT:
*** bounded context                                               :SUBJECT:
*** ubiquotous language                                           :SUBJECT:
*** Entity and Value Object                                       :SUBJECT:
** Data architecture and tools
*** ACID
*** BASE
*** SQL
**** inner vs outher join
**** partitionning
*** ORM
*** CAP theorem
*** Beyond CAP database systems
*** Wall: Write Ahead Logs
*** Distributed consensus: Paxos Raft Zab
*** Transactions
**** transaction isolation levels
*** eventual consistency
*** big table
*** big query
*** OLAP vs OLTP
*** slowly moving dimensions
*** Elastic Search
**** Bloom Filter
*** MongoDB
*** Apache Drill .. a jeho kamaradi
*** Multi master replication
*** JPA
*** QueryDSL
*** Backup strategy
** Messaging
*** queue
*** topics
*** message delivery mode: 
- at least once at most once exactly once
** micro-service-architecture
** Enterprise Architecture Integration Patterns
*** orchestration
*** choreography
** Event Sourcing
** CQRS
** CRUD
** Pragmatic Design principes
*** DRY                                                           :SUBJECT:
*** KISS                                                          :SUBJECT:
*** YAGNI                                                         :SUBJECT:
*** open-close principal                                          :SUBJECT:
*** High cohesion                                                 :SUBJECT:
*** Low coupling                                                  :SUBJECT:
* Project 
** Scrum
** Kanban
** Lean
** Jira
** Confluence
** MOSCOW
** DoD
** DoR

* Cloud
** Cloud native architecture
** IaaS
** PaaS
** SaaS
** FINOPS
** DEVSECOPS
** storage:
*** S3
*** GCS bucket
**** api
**** what it is good for
*** min.io
* DEVOPS / SRE
** Linux
*** ssh how to create trust between computers
*** awk / sed / grep / bash / tail / head
*** ls / ps / htop
*** bash                                                          :SUBJECT:
**** co je to here doc?                                         :QUESTION:
*** co je to regexp
*** list open ports
*** iptables
*** BPF
*** list open files
*** stdin stdout stderr
*** NFS
*** file types: 
**** block device
**** character device
**** named pipe
**** symlink
*** /etc/nsswitch.conf
*** /etc/resolv.conf
*** ip
#+begin_src bash :output verbatim
ip addr sh
ip route sh
#+end_src
** Tools
*** Git
**** pull-request
**** cherry pick
**** flow
**** git push
**** rebase vs merge - semantical and syntactical diff
**** stash
*** Docker
**** docker file
**** docker compose
**** docker swarm
*** K8S: 
**** helm
**** chart
**** template
**** pod
**** node
**** service mesh
**** ingress controller
**** ingress and exgress?
**** etcd
*** Terraform
**** resource
**** module
**** state
**** backend
*** Chef
*** Puppet
*** Ansible
*** Cloud Formation
*** Hashicorp consul
*** Hashicorp vault
*** zookeeper
*** kibana
*** graphana
*** ELK
** Observability
*** 3 pillars
**** logs
**** metrics
**** traces
*** Tail Latency
* Web Front End
** CORS
** React
*** react-hooks
*** React 
*** React Native
** HTML
** CSS
*** Less
*** Sass
** The Elm Architecture (TEA)
* IT+CS
** bit / byte / endian / float
*** XOR, OR, AND, Shift (logic vs aritmetic
*** mantisa exponent jednickovy a dvojkovy doplnek
** TCP/IP
*** CIDR
*** netmask
** Unicode
*** What is unicode
*** utf-8
*** ASCII
*** EBCDIC
** XML JSON YAML ...
*** yaml
*** json
*** xml

** Code complexity O notation
** Amortized complexity

* Functional Proramming
** Lambda Calculus                                                 :SUBJECT:
*** α-conversion
- changing bound variables
*** β-reduction
- applying functions to their arguments;
*** η-reduction
- which captures a notion of extensionality.
** Patterns
*** Monoid
*** Functor
*** Applicative
*** Monad
*** Kleisli Functor
*** Optics
**** Lenses
**** Prisms
*** Recursion Schemes
**** catamorphisms
**** anamorphisms
**** hylomorphisms
**** paramorphisms

**** Persistent data structure - Chris Okasaki
**** Immutability                                                :SUBJECT:

* Security:
** Oauth2/OIDC
*** grant types:
**** Authorization Code
**** Client Credentials
**** Device Code
**** Refresh Token
**** PKCE
**** (Implicit Flow)
**** (Password Grant)
*** Scope
:answer:
A mechanism that defines the specific actions applications can be allowed to do or information that they can request on a user’s behalf. 
Often, applications will want to make use of the information that has already been created in an online resource.
To do so, the application must ask for authorization to access this information on a user’s behalf. 
When an app requests permission to access a resource through an authorization server, it uses the Scope parameter to specify what access it needs,
and the authorization server uses the Scope parameter to respond with the access that was actually granted.
:end:
** LDAP
*** object class
**** inetOrgPerson
*** OID
*** CN, DN, SN,
** OWASP top 10
*** A1:2017-Injection
*** A2:2017-Broken Authentication
***  A3:2017-Sensitive Data Exposure
***  A4:2017-XML External Entities (XXE)
***  A5:2017-Broken Access Control
***  A6:2017-Security Misconfiguration
***  A7:2017-Cross-Site Scripting (XSS)
***  A8:2017-Insecure Deserialization
***  A9:2017-Using Components with Known Vulnerabilities
***  A10:2017-Insufficient Logging & Monitoring
** Ciphers
*** Block Ciphers
**** ECB, CBC, OFB, CFB, CTR  - what they are
:PROPERTIES:
:study:    https://www.highgo.ca/2019/08/08/the-difference-in-five-modes-in-the-aes-encryption-algorithm/
:END:
**** AES
**** DES
*** Hash
***** base64
*** symetricka sifra
*** asymetricka sifra
** bastillion.io
** PKI
** X509

* Languages:
** Java Script
*** co je to iife
*** inheritance model of JS
*** hoisting
*** event loop
*** promisses
*** observables
*** RxJS
*** JS modular system
** Java
*** Java 9 - project jigsaw
*** hashCode vs equals()
*** hashCode()
**** is this code wrong? yes / no / why                         :QUESTION:
Imagine you replace all haskCode implementation by this - what will happen
#+begin_src java :output verbatim
@Override
public final int hashCode() {
    int result = 17;
    return result;
}
#+end_src
*** contract? in Java 
*** Generics
*** Java EE
**** access intent
***** optimistic vs pessimistic
*** Java Collections Framework:
**** List vs Set vs Map
**** ArrayList vs LinkedList
*** StringBuilder vs StringBuffer vs String
*** BigDecimal vs float
*** Spring
**** Jaký je rozdíl mezi JavaEE a Springem?
- JavaEE je standard, který potřebuje aplikační server (JBoss, WebSphere, etc.) jakožto implementaci a runtime prostředí.
- Spring je framework, který roztáčí vlastní Spring Context, což je taková obdoba kontejneru v JavaEE a v něm všechno běží.
**** Co přinesl Spring Boot do Spring ekosystému?
- Strašně zjednodušený start aplikace.
- Vše je velmi opinionated a není potřeba napsat ani jednu řádku konfigurace, protože všechno má nějaký "rozumný default".
- Aplikace může být standalone JAR proces, WAR nebo JAR s embedded Tomcatem.
- V každém případě je to one liner.
- Plus mnoho "starter" dependencí, kterými jde snadno přidat další moduly a tooly tímto opinionated stylem.
**** Jaký je hlavní rozdíl v transaction handlingu mezi JavaEE (od verze 3) a Springem?
- JavaEE to má implicitní a Spring explicitní
- V JavaEE deklarujeme EJB a ta má všechny své public metody automaticky v transakci v nějakém defaultním módu
- Ve Springu deklarujeme beanu nějakého typu a automaticky nikdy žádné transakce nemá. Zapínáme si je explicitně pomocí anotace.
*** Jaký je rozdíl mezi Java SE a JavaEE
- Java SE se používá hlavně pro nějaké procesy, které se nastartují, provedou nějakou činost a skončí
- JavaEE se používá hlavně pro aplikace, které jsou nasazené na nějakém trvale běžícím serveru a vystavují buď nějaké služby nebo přímo front end.
*** Co je to aplikační server a nějaký příklad
*** Java exception handling                                       :SUBJECT:
**** Jaký je rozdíl mezi checked a unchecked exceptionou
**** Co všechno je špatně na tomto kusu kódu
#+begin_src java :output verbatim
try {
  // ...
} catch (Exception e) {
  log.error("Oh no!", e.getMessage());
}
#+end_src
- Zdaleka největší průšvih je, že jsme přišli o stack trace! Musíme nechat zalogovat celý objekt "e" a nebo aspoň přímo jeho ST.
- Chytáme příliš obecný typ, takže nemůžeme nijak rozlišit mezi jednotlivými typy chyb.
- Kombinace chytání příliš obecné chyby a neudělání re-throw, je velmi nebezpečná. Pokud nechceme dělat re-throw, měli bychom chytat jen ten typ, kterého se to týká.
- A další věci, jako stupidní message "Oh no!", atd.
** NodeJS
- npm
- yarn
- nvm
- popular libraries

** Garbage Collector
** strongly typed languages vs weakly typed
* Quality and Testing
** Blue green deployment
** Code coverage
** Cyclomatic complexity                                           :SUBJECT:
** Code quality                                                    :SUBJECT:
** Antifragile architecture
** Unit testing
** AB testing
* Object Oriented Programming
** Polymorphism
** Gof Design Patterns
*** Abstract Factory 
*** Singleton

* TODO unsorted
** Maven
*** Jaký je rozdíl mezi <dependencies> a <dependencyManagement>?
- dependencyManagement má smysl je v multi-module projektu, konkrétně v otcovském pomu. Používá se pro deklarování dependencí a jejich scopů a verzí a každý sub-modul si pak jen řekné, které z nich chce používat (a už nemusí deklarovat scope a verzi).
- dependencies v otcovském pomu znamenají, že každý sub-modul všechny takové dependence automaticky dostane. Používá se to např. pro testovací balíky nebo nějaké velmi obecně použitelné commons balíky a jiné pomocné tooly jako Lombok.
*** K čemu se používá scope provided?
- Jde o dependence, které chceme při kompilaci, ale nechceme na runtimu
- Většinou jde o dependence, které nám v JavaEE poskytne aplikační server
- Nebo o tooly jako Lombok, které potřebujeme při kompilaci a nepotřebujeme na runtimu
** Gradle
** ReasonML
** Uml
** C4
** Org42
